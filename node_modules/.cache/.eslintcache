[{"F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\index.js":"1","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\reportWebVitals.js":"2","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\App.js":"3","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\Constants.js":"4","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\assets\\images\\ImagesExplained.js":"5","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\assets\\images\\Images.js":"6","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\reel\\Reel.js":"7","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\symbols\\Symbol.js":"8","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\scorebet\\ScoreBet.js":"9","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\calculatescore\\CalculateScore.js":"10","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\scorebet\\Bet.js":"11","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\withdrawal\\Withdrawal.js":"12","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\gameexplained\\GameExplained.jsx":"13","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\welcomemessage\\WelcomeMessage.jsx":"14","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\mint\\Mint.jsx":"15","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\reelset\\ReelSet.jsx":"16","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\controller\\Controller.jsx":"17","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\youtubeembeded\\ExportYoutubeVideo.jsx":"18","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\youtubeembeded\\YoutubeEmbed.jsx":"19"},{"size":562,"mtime":1658471764844,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1654169658116,"results":"22","hashOfConfig":"21"},{"size":1179,"mtime":1659767848091,"results":"23","hashOfConfig":"21"},{"size":2826,"mtime":1656889389987,"results":"24","hashOfConfig":"21"},{"size":3544,"mtime":1658130621421,"results":"25","hashOfConfig":"21"},{"size":1069,"mtime":1654606486542,"results":"26","hashOfConfig":"21"},{"size":2371,"mtime":1659746595760,"results":"27","hashOfConfig":"21"},{"size":1702,"mtime":1659745456455,"results":"28","hashOfConfig":"21"},{"size":928,"mtime":1659745136075,"results":"29","hashOfConfig":"21"},{"size":15023,"mtime":1659749373842,"results":"30","hashOfConfig":"21"},{"size":1235,"mtime":1659746927370,"results":"31","hashOfConfig":"21"},{"size":5920,"mtime":1659747577080,"results":"32","hashOfConfig":"21"},{"size":2579,"mtime":1659764621298,"results":"33","hashOfConfig":"21"},{"size":3876,"mtime":1659765012366,"results":"34","hashOfConfig":"21"},{"size":4697,"mtime":1659766529659,"results":"35","hashOfConfig":"21"},{"size":5193,"mtime":1659765580828,"results":"36","hashOfConfig":"21"},{"size":1468,"mtime":1659748888960,"results":"37","hashOfConfig":"21"},{"size":311,"mtime":1659768908524,"results":"38","hashOfConfig":"21"},{"size":562,"mtime":1659768217440,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kz1bil",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},"F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\index.js",[],[],"F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\reportWebVitals.js",[],[],"F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\App.js",["106","107","108","109","110","111","112"],[],"import React, { useRef,useEffect, useState } from \"react\";\nimport {ethers} from \"ethers\";\nimport ReelSet from \"./components/reelset/ReelSet\";\nimport \"./assets/css/App.css\";\nimport { assert } from \"chai\";\n//import GameScoreCarousels from './components/gamescorecarousel/GameScoreCarousel';\nimport GameExplained from './components/gameexplained/GameExplained';\nimport WelcomeMessage from './components/welcomemessage/WelcomeMessage';\nimport ExportYoutubeVideo from './components/youtubeembeded/ExportYoutubeVideo'\n\nconst App = () => {\n  const [spin, setSpin] = useState(0);\n  const [showList, setShowList] = useState(0);\n  const [widthCarousel, setWidthCarousel] = useState(0);\n  const carousel = useRef();\n    \n  const callbackSetSpin = (spin) => {\n    setSpin(spin);\n  };\n\n  const callBackShowWin = () => {\n    setShowList(1);\n  };\n\n  return (\n    <div className=\"game\">\n      <div className=\"game__container\">\n      <WelcomeMessage />\n      <ReelSet\n        runGame={spin}\n        spinCallback={callbackSetSpin}\n        showWinCallback={callBackShowWin}\n      />\n      <GameExplained/>\n      <ExportYoutubeVideo/>\n      </div>\n      \n    </div>\n    \n  );\n};\nexport default App;\n","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\Constants.js",[],[],"F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\assets\\images\\ImagesExplained.js",["113"],[],"F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\assets\\images\\Images.js",[],[],"F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\reel\\Reel.js",["114"],[],"import React, { useRef} from \"react\";\r\nimport Constants from \"../../Constants\";\r\nimport {motion} from 'framer-motion';\r\nimport Symbol from \"../symbols/Symbol\";\r\nimport './reel.css';\r\n\r\nlet offset=0;\r\nlet generatedReels=0;\r\n\r\nconst Reel = (props) => {\r\n  //42 symbols\r\n//  const symbols = \"DDDGNNSSVVVCCFFRRYYIIJJZZMMOOLLTTPPKKQQAAG\";\r\n//const symbols = \"DDDGNNSS\";\r\n let reels = [];\r\n  const symbols = Constants.REEL_SYMBOLS;\r\n  let reelSymbols = [];\r\n  let symbolRef = useRef();\r\n  let randomNr= 3;\r\n  let reelIdx=[];\r\n  let reelImg= [];\r\n\r\n  const randomBetween = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  const sendArrayList = ()=>{\r\n    \r\n    if(reelIdx.length===3){\r\n        props.createArray(reelIdx, reelImg);\r\n    }\r\n    generatedReels++;\r\n  }\r\n\r\n  const generatedSymbols =(randomNr)=>{\r\n       let elementPos=-(randomNr/242);\r\n\r\n       for(let i=0; i<3;i++){\r\n        reelIdx.push(elementPos+i);\r\n        reelImg.push(reelSymbols[elementPos+i]);\r\n       }\r\n     }\r\n\r\n  const getRandomNr = () => {\r\n    if (props.gameOn > 0) {\r\n    randomNr = -(randomBetween(\r\n        (Constants.REELS_REPEAT - 2) * symbols[props.index].length,\r\n        (Constants.REELS_REPEAT - 8) * symbols[props.index].length\r\n      ) * 242);\r\n    }\r\n\r\n    if(offset===randomNr){\r\n      getRandomNr();\r\n    }\r\n   else{\r\n        generatedSymbols(randomNr); //modified \r\n        offset=randomNr;\r\n    }\r\n  };\r\n\r\n  if(props.gameOn===0){\r\n      reelSymbols=symbols[props.index].split(\"\");\r\n  }else if(props.gameOn>0){\r\n    reelSymbols= symbols[props.index].repeat(Constants.REELS_REPEAT).split(\"\");\r\n    getRandomNr();\r\n  }  \r\n\r\nconst createReels = () =>{\r\n  reels=reelSymbols.map((el, idx) => {\r\n      return (\r\n        <Symbol symbol={el} key={idx} index={idx} spin={props.gameOn} />\r\n      );\r\n    })\r\n\r\n    return <>{reels}</>\r\n}\r\n\r\nconst variants = {\r\n  opacity:{\r\n      opacity: 1 \r\n  },\r\n  spin: {\r\n     y:offset,\r\n     opacity:1, \r\n     transition:{ \r\n          duration:3, \r\n          delay:props.index * 0.8 \r\n      },\r\n  },\r\n  exit : { opacity: 1 }\r\n};\r\n\r\nreturn (\r\n  <motion.div className=\"reel\" >\r\n    <motion.div key={props.index} variants={variants}  opacity=\"initial\"  animate=\"spin\" className=\"icons\" ref={symbolRef}>\r\n      {createReels()}{sendArrayList()}\r\n    </motion.div>\r\n  </motion.div>\r\n);\r\n};\r\nexport default Reel;\r\n\r\n\r\n\r\n","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\symbols\\Symbol.js",[],[],"F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\scorebet\\ScoreBet.js",[],[],"F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\calculatescore\\CalculateScore.js",["115","116","117","118","119","120"],[],"import React,{ useState} from 'react';\r\nimport Constants from '../../Constants';\r\nimport bonusWin from '../../assets/sounds/winningBonus.wav'\r\nimport Withdrawal from '../withdrawal/Withdrawal'; \r\nimport {ethers} from \"ethers\";\r\nimport PFPRacerNFT from '../../artifacts/contracts/PFPRacerNFT.sol/abi.json'\r\nimport './calculatescore.css';\r\n/*\r\nReceiving spinResults={props.resultsArray} \r\n          spinResultsIdx={props.resultsArrayIdx} \r\n          myBet={bet} \r\n          setCallbackScore={callbackScore} \r\n          game={props.game}\r\n*/\r\n\r\nlet show = 0;\r\nlet fnScr = 0;\r\n\r\nconst CalculateScore = (props) => {\r\n    const [score, setScore] = useState(2);\r\n    let finalScore=0;\r\n /*Controling the calculation working score part !!!*********************/\r\n if(show!==props.game){\r\n\r\n    let bet =props.myBet;\r\n    \r\n    \r\n    let spinResults = props.spinResults;\r\n//    let spinResultsIdx = props.spinResultsIdx;\r\n\r\n  //  let bet = 0;\r\n    let winningLines = [];\r\n  //  let countWin = 0;\r\n    let symbolSellection = [];\r\n  //  const symbols = Constants.REEL_SYMBOLS;\r\n   \r\n\r\n  \r\n   // audioUrlBtn = require(\"../assets/sounds/buttonPress.wav\");\r\n    const audioBtn = new Audio(\"../../assets/sounds/buttonPress.wav\");\r\n  \r\n   // audioUrlSpin = require(\"../assets/sounds/spinningSlotMachine.wav\");\r\n    const audioSpin = new Audio(\"../../assets/sounds/spinningSlotMachine.wav\");\r\n\r\n    const audioWinBonus = new Audio(bonusWin);\r\n\r\n    const playWinBonus = () =>{\r\n          audioWinBonus.play();\r\n    }\r\n\r\n    const handleScore = (e) => {\r\n//        setScore(Math.round((score + e) * 100) / 100);\r\n        console.log(\"My e in handleScore is:\"+e)\r\n        console.log(\"My score in handleScoreis: \"+score);\r\n        let result = score+e;\r\n        finalScore= Math.round((result + Number.EPSILON) * 100) / 100;\r\n        console.log(\"My finalScore in handleScore is:\"+finalScore);\r\n        setScore(finalScore);\r\n      };\r\n\r\n    const setMyScore = (e) => {\r\n        let scr = 0;\r\n    \r\n        if (bet > 0 && e > 0) {\r\n\r\n        //  scr = e + bet * e;\r\n        if(e<100){\r\n          scr=(bet*e)*10; // (0.2*0.2)=0.04*10 = 0.4\r\n          scr = Math.round((scr + Number.EPSILON) * 100) / 100;\r\n          console.log(\"My score in e<100 \"+scr);\r\n        }else if(e>=100){\r\n            scr=(bet*e)+e; //\r\n            scr = Math.round((scr + Number.EPSILON) * 100) / 100;\r\n            console.log(\"My score in e>=100 \"+scr);\r\n        }\r\n        //  scr = Math.round(scr * 100) / 100;\r\n        // scr=Math.round(scr);\r\n        } else if (bet > 0 && e === 0) {\r\n        //  scr = e + bet * e;\r\n          // scr=(bet*e)*10;\r\n          // scr = Math.round((scr + Number.EPSILON) * 100) / 100;\r\n          scr=0;\r\n          console.log(\"My score in (bet > 0 && e === 0 \"+scr);\r\n        //  scr = Math.round(scr * 100) / 100;\r\n        // scr=Math.round(scr);\r\n        } \r\n        // else if (bet === 0 && e > 0) {\r\n        //  scr = Math.round((scr + e) * 100) / 100;\r\n       // scr=Math.round(scr+e);\r\n        // }\r\n        //handleScore(scr);\r\n        // let result = score+e;\r\n        // finalScore= Math.round((result + Number.EPSILON) * 100) / 100;\r\n\r\n        return scr;\r\n        //setScore(scr);\r\n      };\r\n\r\n    const drawScore = (lineNumberType, fool) => {\r\n        let newScore = 0;\r\n        if (fool) {\r\n          lineNumberType = 18;\r\n        }\r\n        switch (lineNumberType) {\r\n          case 0: // top line\r\n            console.log(\"Case 0: top line\");\r\n            newScore = 0.5;\r\n            break;\r\n          case 1: // middle line\r\n            //        audioWin.play();\r\n            console.log(\"Case 1: middle line\");\r\n            newScore = 0.5;\r\n            break;\r\n          case 2: // bottom line\r\n            //        audioWin.play();\r\n            console.log(\"Case 2: bottom line\");\r\n            newScore = 0.5;\r\n            break;\r\n          case 3: // V shape starting bottom left\r\n            //        audioWin.play();\r\n            console.log(\"Case 3: V shape starting bottom left\");\r\n            newScore = 0.2;\r\n            break;\r\n          case 4: // V shape starting bottom right\r\n            //        audioWin.play();\r\n            console.log(\"Case 4: V shape starting bottom right\");\r\n            newScore = 0.2;\r\n            break;\r\n          case 5: // W shape starting top left\r\n            //        audioWin.play();\r\n            console.log(\"Case 5: W shape starting top left\");\r\n            newScore = 0.3;\r\n            break;\r\n          case 6: // M shape starting bottom left\r\n            //        audioWin.play();\r\n            console.log(\"Case 6: M shape starting bottom left\");\r\n            newScore = 0.3;\r\n            break;\r\n          case 7: // M shape on top half\r\n            //        audioWin.play();\r\n            console.log(\"Case 7: M shape on top half\");\r\n            newScore = 0.3;\r\n            break;\r\n          case 8: // W shape on top half\r\n            //        audioWin.play();\r\n            console.log(\"Case 8: W shape on top half\");\r\n            newScore = 0.3;\r\n            break;\r\n          case 9: //W shape on bottom half\r\n            //        audioWin.play();\r\n            console.log(\"Case 8: W shape on bottom half\");\r\n            newScore = 0.3;\r\n            break;\r\n          case 10: // M shape on bottom half\r\n            //        audioWin.play();\r\n            console.log(\"Case 8: M shape on bottom half\");\r\n            newScore = 0.3;\r\n            break;\r\n          case 11: // U shape on top half\r\n            //        audioWin.play();\r\n            console.log(\"Case 11: U shape on top half\");\r\n            newScore = 0.1;\r\n            break;\r\n          case 12: // inverse U shape on top half\r\n            //        audioWin.play();\r\n            console.log(\"Case 12: inverse U shape on top half\");\r\n            newScore = 0.1;\r\n            break;\r\n          case 13: // U shape on bottom half\r\n            //        audioWin.play();\r\n            console.log(\"Case 13: U shape on bottom half\");\r\n            newScore = 0.1;\r\n            break;\r\n          case 14: // inverse U shape on bottom half\r\n            //        audioWin.play();\r\n            console.log(\"Case 14: inverse U shape on bottom half\");\r\n            newScore = 0.1;\r\n            break;\r\n          case 15: // inverse U shape on top half\r\n            //        audioWin.play();\r\n            console.log(\"Case 15: inverse U shape on top half\");\r\n            newScore = 0.1;\r\n            break;\r\n          case 16: // Z shape from top left\r\n            //        audioWin.play();\r\n            console.log(\"Case 16: Z shape from top left\");\r\n            newScore = 0.2;\r\n            break;\r\n          case 17: // Z shape from bottom left\r\n            //        audioWin.play();\r\n            console.log(\"Case 17: Z shape from bottom left\");\r\n            newScore = 0.2;\r\n            break;\r\n          case 18: // JackPot\r\n            //        audioWinBonus.play();\r\n            console.log(\"Case 18: JackPot\");\r\n            playWinBonus();\r\n            newScore = 100;\r\n            break;\r\n          default:\r\n            console.log(\"Case default: zero\");\r\n            newScore = 0;\r\n        }\r\n    \r\n//        setMyScore(newScore);\r\n        \r\n        return newScore;\r\n      };\r\n\r\n      const checkFiveFools = () => {\r\n        let fl = false;\r\n       //this has been changed from Constants.LINES.length;\r\n        for (let i = 0; i < Constants.LINES.length; i++) {\r\n          let fool = 0;\r\n          //this has been changed from Constants.LINES[i].length\r\n          for (let j = 0; j < Constants.LINES[i].length; j++) {\r\n            let indexI = Constants.LINES[i][j][0];\r\n            let indexJ = Constants.LINES[i][j][1];\r\n            if (spinResults[indexI][indexJ] === \"D\") {\r\n              fool++;\r\n            }\r\n          }\r\n     \r\n          if (fool === 5) {\r\n            fl = true;\r\n            winningLines.push(i);\r\n            props.winningLinesCallBack(winningLines, fl);\r\n            drawScore(i, true);\r\n            //  highLightWinningLines(0);\r\n            break;\r\n          }\r\n        }\r\n        return fl;\r\n      }\r\n\r\n      const checkFourFools = () => {\r\n        for (let i = 0; i < Constants.LINES.length; i++) {\r\n          let fool = 0;\r\n          for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n            let indexI = Constants.LINES[i][j][0];\r\n            let indexJ = Constants.LINES[i][j][1];\r\n       \r\n            if (spinResults[indexI][indexJ] === \"D\") {\r\n              fool++;\r\n            }\r\n          }\r\n       \r\n          if (fool === 4) {\r\n            winningLines.push(i);\r\n            drawScore(i, false);\r\n          }\r\n        }\r\n      };\r\n\r\n      const checkLinesElements = (symbol) => {\r\n//        countWin++;\r\n        let symNr = 0;\r\n        let fool = 0;\r\n        for (let i = 0; i < Constants.LINES.length; i++) {\r\n          fool = 0;\r\n          symNr = 0;\r\n          for (let j = 0; j < Constants.LINES[i].length; j++) {\r\n            let indexI = Constants.LINES[i][j][0];\r\n            let indexJ = Constants.LINES[i][j][1];\r\n    \r\n            if (spinResults[indexI][indexJ] === \"D\") {\r\n              fool++;\r\n            }\r\n            if (symbol === spinResults[indexI][indexJ]) {\r\n              symNr++;\r\n            }\r\n          }\r\n          if (fool + symNr === 5 && fool < 4) {\r\n            winningLines.push(i);\r\n          }\r\n        }\r\n        winningLines = uniq(winningLines);\r\n      };\r\n    \r\n      const uniq = (a) => {\r\n        return a.sort().filter(function (item, pos, ary) {\r\n          return !pos || item !== ary[pos - 1];\r\n        });\r\n      };\r\n\r\n      const checkElements = () => {\r\n        let fool = 0;\r\n        for (let k = 0; k < 3; k++) {\r\n          fool = 0;\r\n          for (let i = 0; i < spinResults.length; i++) {\r\n            let symb = \"\";\r\n            for (let j = k; j < spinResults[i].length; j++) {\r\n              if (spinResults[i][j] !== \"D\") {\r\n                symb = spinResults[i][j];\r\n                j = spinResults[i].length;\r\n              } else {\r\n                fool++;\r\n                j = spinResults[i].length;\r\n              }\r\n            }\r\n            if (fool < 4 && symb !== \"\") {\r\n              symbolSellection.push(symb);\r\n            }\r\n          }\r\n        }\r\n        for (let i = 0; i < symbolSellection.length; i++) {\r\n          checkLinesElements(symbolSellection[i]);\r\n        }\r\n      };\r\n    \r\n      const setBetZero = () => {\r\n        bet = 0;\r\n      };\r\n\r\n      const evaluatespinResults = () => {\r\n        checkFourFools();\r\n        checkElements();\r\n        if (winningLines.length > 0) {\r\n         props.winningLinesCallBack(winningLines, false);\r\n         let fnScore=0;\r\n          for (let i = 0; i < winningLines.length; i++) {\r\n            console.log(\"My score is \"+score);\r\n            let scr = drawScore(winningLines[i], false);\r\n            console.log(\"My scr in evaluateSpinResults is: \"+scr);\r\n            let betScore = setMyScore(scr);\r\n            console.log(\"My betScore in evaluateSpinResults is: \"+betScore);\r\n            fnScore= fnScore+betScore;\r\n          }\r\n          console.log(\"My fnScore in evaluateSpinResults is:\"+fnScore);\r\n          fnScore=fnScore+score;\r\n          finalScore= Math.round((fnScore + Number.EPSILON) * 100) / 100;\r\n        } else {\r\n          if (score - bet >= 0.2) {\r\n          props.looserCallBack();\r\n//            finalScore=Math.round((score - bet) * 100) / 100;\r\n//            setScore(Math.round((score - bet) * 100) / 100);\r\n            console.log(\"My finalScore in evaluateSpinResults is: \"+finalScore);\r\n            let fnScore= score-bet;\r\n            finalScore= Math.round((fnScore + Number.EPSILON) * 100) / 100;\r\n            console.log(\"My finalScore in evaluateSpinResults after adding score is: \"+finalScore);\r\n            if (score < bet) {\r\n              setBetZero();\r\n            }\r\n          } else if (score - bet === 0) {\r\n            finalScore=score-bet;\r\n            setBetZero();\r\n//            setScore(0);\r\n            finalScore=0;\r\n        //CREATE A GAME OVER SET FROM HERE    \r\n            insertToDb();\r\n            props.looserCallBack();\r\n\r\n          }\r\n        }\r\n      };\r\n\r\n      const insertToDb = async () =>{\r\n        if(typeof window.ethereum !== \"undefined\"){\r\n          const accounts = await window.ethereum.request({\r\n            method: \"eth_requestAccounts\",\r\n          });\r\n          const contractAddr = \"0xDFe7ff7386e0C4321Bd1fc7d5f47887C91C7455B\";\r\n          const url=\"https://vast-ridge-99820.herokuapp.com\";\r\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n          const gasPrice = await provider.getGasPrice();\r\n          const newSigner = provider.getSigner();\r\n//          setAccount(accounts[0]);\r\n          let contract = new ethers.Contract(\r\n                          contractAddr,\r\n                          PFPRacerNFT.abi,\r\n                          newSigner\r\n                        );\r\n\r\n                        const dataToSend = JSON.stringify({ \"wallet\": accounts[0],\r\n                                                            \"txtype\":\"withdrawal\",\r\n                                                            \"amount\":0,\r\n                                                             });\r\n                       \r\n                          const link = url+\"/api/insertWallet\";\r\n                          await fetch(link,{\r\n                          method: 'POST',\r\n                          headers: {\r\n                            'Accept': 'application/json',\r\n                            'Content-Type': 'application/json',\r\n                          },\r\n                          body: dataToSend\r\n                        })\r\n          \r\n        }else{\r\n          alert(\"Please install metamask\");\r\n        }\r\n      }\r\n\r\n      const checkWin = () => {\r\n        if (props.game > 0) {\r\n          let fool = checkFiveFools();\r\n          if (!fool) {\r\n            evaluatespinResults();\r\n          }\r\n        }\r\n    \r\n      };\r\n\r\n\r\n/**Testing part  */  \r\n  \r\nsetTimeout(()=>{\r\n    //    setScore(scr);\r\n    checkWin();\r\n    setScore(finalScore);\r\n    \r\n    console.log(\"My score in state is: \"+score);\r\n    console.log(\"My finalScore in state is: \"+finalScore);\r\n    props.setCallbackScore(finalScore);\r\n    show=props.game;\r\n},7500)\r\n/**END of testing part */  \r\n\r\n/******************************************/  \r\n}\r\n\r\nconst callbackSetMyScr = (myScr) => {\r\n      if(myScr===0){\r\n        setScore(myScr);\r\n\r\n        props.setCallbackScore(myScr);\r\n   //   btnDisable=true;\r\n    }else if(myScr>0){\r\n        setScore(myScr);\r\n        props.setCallbackScore(myScr);\r\n    }\r\n      //score=myScr;\r\n    }\r\n\r\n    const callBackGetScore = () => {\r\n      return score;\r\n    }\r\n \r\n    return (    \r\n      <> \r\n      <Withdrawal blockWithdraw={props.blockWithdrawal} getScoreCallback={callBackGetScore} setScoreCallBack={callbackSetMyScr}/>\r\n      <label className=\"label-score\">\r\n        Score:<span id=\"score\">{score}</span>\r\n      </label>\r\n    </>  \r\n    )\r\n}\r\n\r\n\r\nexport default CalculateScore;","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\scorebet\\Bet.js",[],[],"F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\withdrawal\\Withdrawal.js",["121","122","123","124","125"],[],"import  React, { useEffect, useState} from \"react\";\r\nimport './withdrawal.css';\r\nimport {ethers} from \"ethers\";\r\nimport PFPRacerNFT from '../../artifacts/contracts/PFPRacerNFT.sol/abi.json';\r\n\r\nconst Withdrawal=(props)=>{\r\n\r\n    const [rolling, setRolling] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [account, setAccount] = useState(\"\");\r\n    const [contract, setContract] = useState(\"\");\r\n    let refCode =\"\";\r\n    const contractAddr=\"0xDFe7ff7386e0C4321Bd1fc7d5f47887C91C7455B\";\r\n    const url=\"https://vast-ridge-99820.herokuapp.com\";\r\n    \r\n\r\n    const createSmartKey = async (refCode)=>{\r\n      let hashCode=\"\";\r\n\r\n      const dataToSend = JSON.stringify({ \"refCode\": refCode });\r\n  const link = url+\"/api/post_refCode\";\r\n\r\n  await fetch(link, {\r\n    method:'POST',\r\n    headers:{'Content-Type':'application/json'},\r\n    body:dataToSend\r\n  }).then(response => {\r\n    return response.text();\r\n    }).then(data => {\r\n      hashCode=data;\r\n       }, error => {\r\n      });\r\n      return hashCode;\r\n    }\r\n\r\n    const initConnection = async () =>{\r\n      if(typeof window.ethereum !== \"undefined\"){\r\n        const accounts = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const gasPrice = await provider.getGasPrice();\r\n        const newSigner = provider.getSigner();\r\n        setAccount(accounts[0]);\r\n        setContract(\r\n          new ethers.Contract(\r\n            contractAddr,\r\n            PFPRacerNFT.abi,\r\n            newSigner\r\n          )\r\n        )\r\n      }else{\r\n        alert(\"Please install metamask\");\r\n      }\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n      initConnection();\r\n    },[account]);\r\n\r\n  const makeWithdrawal = async(refCode) => {\r\n    \r\n    let withdrawalAmount = Math.floor(props.getScoreCallback());\r\n    let fail=false;\r\n      if(withdrawalAmount > 0){\r\n      window.confirm(\"GasLimit is set to 174860 WEI,DO NOT CHANGE && Please be aware: if you have 1.2 or 20.2 NFT's you will be able to withdrawal only the integer part of it, like 1 or 2.\");\r\n      //await contract.withdrawal(refCode);\r\n      let withdrawalCosts= await contract.getWithdrawalCost();\r\n\r\n      let price=withdrawalCosts*withdrawalAmount;\r\n      price = price.toString();\r\n       try{\r\n        // {gasPrice: ethers.utils.parseUnits('100', 'gwei'), gasLimit: 1000000}\r\n        var options = { gasLimit: 174860, nonce: 45, value: ethers.utils.parseUnits(price, 'wei') };\r\n        await contract.withdrawal(withdrawalAmount,refCode,options);\r\n        \r\n     }catch(err){\r\n       fail=true;\r\n       alert(\"Network is quite crowded at this this very moment and gas cost's are very high, please try again later !!\");\r\n     }\r\n    \r\n    if(!fail){\r\n      insertWalletIntoDB();\r\n      let myScr= props.getScoreCallback()-withdrawalAmount;\r\n      props.setScoreCallBack(myScr);\r\n    }\r\n\r\n    }\r\n  }\r\n\r\n  const checkWallet = async()=>{\r\n    // /checkUserWallet, setCheckUserWallet\r\n    let results=false;\r\n    const dataToSend = JSON.stringify({ \"wallet\": account });\r\n    // Send data to the backend via POST\r\n    let link = url+\"/api/getWalletVerify\";\r\n    await fetch(link, {\r\n//    await fetch('http://localhost:3333/api/getWalletVerify', {\r\n      method: 'POST',\r\n//      mode: 'no-cors', // <---\r\n      headers: {\r\n//        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: dataToSend\r\n    }).then(response => {\r\n      return response.text();\r\n      }).then(data => {\r\n\r\n        if(data!=='\"0\"'){\r\n          results=true;\r\n        }\r\n         }, error => {\r\n        });\r\n    return results;\r\n  }\r\n\r\n  const insertWalletIntoDB = async()=>{\r\n    const withdrawalAmount=Math.floor(props.getScoreCallback());\r\n\r\n    const dataToSend = JSON.stringify({ \"wallet\": account,\r\n                                        \"txtype\":\"withdrawal\",\r\n                                        \"amount\":withdrawalAmount,\r\n                                         });\r\n   \r\n      const link = url+\"/api/insertWallet\";\r\n      await fetch(link,{\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: dataToSend\r\n    })\r\n\r\n  }\r\n  \r\n  const promtRefCode = async()=>{\r\n    let code = prompt(\"Please enter your refCode:\", \"RefCode\");\r\n    return code;\r\n  }\r\n\r\n  const handleSubmit = async() => {\r\n    await initConnection();\r\n    if(account!==\"\"){\r\n      let withdrawalPaused = await contract.getWithdrawalPaused();\r\n      if(!withdrawalPaused){\r\n        let respCheckWallet = await checkWallet();\r\n      if(!respCheckWallet){\r\n          \r\n          if(!props.blockWithdraw){\r\n            let score = Math.floor(props.getScoreCallback());\r\n            if(score>0){\r\n            refCode = await promtRefCode();\r\n              if (refCode === null || refCode === \"\" || refCode !== \"RACECOUPLE2022\") {\r\n                let text = \"Wrong RefCode ! But you can Mint !\";\r\n                window.confirm(text)\r\n              } else {\r\n            //checkAccount and insert to database\r\n\r\n              let hashKey = await createSmartKey(refCode);\r\n              \r\n              makeWithdrawal(hashKey);\r\n            }\r\n          }\r\n        }else{\r\n          window.confirm(\"You need to have at least 1 NFT to withdrawal\");\r\n        }\r\n    } else{\r\n      window.confirm(\"You already had your chance ! But you can still Mint & play !\");\r\n    }\r\n  }else{\r\n    alert(\"Withdrawal has been paused, please try again later !\");\r\n  }\r\n  }else{\r\n    alert(\"Please connect to Metamask !!! Or install Metamask wallet if not already installed in order to place a withdrawal !!!\");\r\n  }\r\n};\r\n\r\n    return(\r\n    <div\r\n         className={handleSubmit ? \"roll rolling\" : \"roll\"}\r\n         onClick={() => {handleSubmit()}}\r\n    >Withdrawal</div>\r\n    )\r\n}\r\n\r\nexport default Withdrawal;","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\gameexplained\\GameExplained.jsx",[],[],"F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\welcomemessage\\WelcomeMessage.jsx",["126","127","128","129","130"],[],"import React, { useEffect, useState } from \"react\";\r\nimport {ethers} from \"ethers\";\r\nimport \"./welcomemessage.css\";\r\nimport Mint from \"../mint/Mint\";\r\nimport PFPRacerNFT from '../../artifacts/contracts/PFPRacerNFT.sol/abi.json'\r\nimport { assert } from \"chai\";\r\n\r\nconst WelcomeMessage = (props) =>{\r\n    const [connecting, setConnecting] = useState();\r\n    const [showList, setShowList] = useState(0);\r\n    const [welcomeMessage, setWelcomeMessage] = useState(\"\");\r\n    const [account, setAccount] = useState(\"\");\r\n    const [contract, setContract] = useState(\"\");\r\n    const contractAddr = \"0xDFe7ff7386e0C4321Bd1fc7d5f47887C91C7455B\";\r\n\r\n    const welcomeWallMessage = () => {\r\n        if(welcomeMessage===\"\"){\r\n          return (\r\n            <div className=\"welcome\">\r\n            <div className=\"div-connect\">   \r\n            <h2 className=\"h2-welcome\">Minting Racer NFT Slot Machine</h2>\r\n              <button\r\n                  className={connect ? \"connect connecting\" : \"connect\"}\r\n                  onClick={() => {checkConnection()}}\r\n              >Connect to Metamask Wallet</button>\r\n            </div> \r\n          </div>);\r\n      }else{\r\n                  //insertToDb={props.insertToDb}\r\n        return(\r\n        <div className=\"welcome\">\r\n          <Mint account={account} contract={contract} /> \r\n          <h2 className=\"h2-connect\">Welcome Player :\r\n            <p className=\"p-welcomeMessage\">{welcomeMessage}</p>\r\n            </h2>\r\n        </div>\r\n        );\r\n      }\r\n      }\r\n\r\n      const checkConnection = async() =>{\r\n        if(typeof window.ethereum !== \"undefined\"){\r\n            const accounts = await window.ethereum.request({\r\n              method: \"eth_requestAccounts\",\r\n            });\r\n    \r\n            if(accounts[0]!==undefined){\r\n            \r\n              const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n              const newSigner = provider.getSigner();\r\n\r\n              let chainId = await newSigner.getChainId();\r\n              if(chainId!==137){\r\n                alert(\"You are not connected the Correct network please switch to: chainID:137 RPC URL:https://matic-mumbai.chainstacklabs.com\");\r\n              }else{\r\n                setWelcomeMessage(accounts);\r\n                setAccount(accounts[0]);\r\n                setContract(\r\n                  new ethers.Contract(\r\n                    contractAddr,\r\n                    PFPRacerNFT.abi,\r\n                    newSigner\r\n                  )\r\n                )\r\n              }\r\n            }else{\r\n              setWelcomeMessage(account);\r\n            }\r\n      }else{\r\n        alert(\"Metamask not installed !!! Please install metamask in order to place a mint or do a withdrawal !!!\");\r\n      }\r\n    }\r\n    \r\n    const connect = async () => {\r\n        if(typeof window.ethereum !== \"undefined\"){\r\n          const accounts = await window.ethereum.request({\r\n            method: \"eth_requestAccounts\",\r\n          });\r\n    \r\n          if(accounts[0]===undefined){\r\n            const provider =  new ethers.providers.Web3Provider(window.ethereum);\r\n            const newSigner =  provider.getSigner();\r\n            setAccount(accounts[0]);\r\n            setContract(\r\n              new ethers.Contract(\r\n                contractAddr,\r\n                PFPRacerNFT.abi,\r\n                newSigner\r\n              )\r\n            )\r\n            setWelcomeMessage(\"Welcome player: \"+account+\" !\");\r\n         }else{\r\n          assert(\"You already are connected to \"+account);\r\n         }\r\n        }else{\r\n          alert(\"Metamask not installed !!! Please install metamask in order to place a mint or do a withdrawal !!!\");\r\n        }\r\n      }\r\n\r\n      useEffect(()=>{\r\n        checkConnection();\r\n        welcomeWallMessage();\r\n      },[account])\r\n\r\n      return(\r\n        <div>{welcomeWallMessage()}</div>  \r\n      )\r\n\r\n}\r\n\r\nexport default WelcomeMessage;","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\mint\\Mint.jsx",["131","132","133","134","135","136"],[],"import  React, { useEffect, useState} from \"react\";\r\nimport './mint.css';\r\nimport {ethers} from \"ethers\";\r\n\r\nlet mintAmount=0;\r\n\r\nconst Mint = (props) =>{\r\n    const [mintAmount, setMintAmount] = useState(0);\r\n    const [leftToMint, setLeftToMint] = useState(0);\r\n        \r\n    const url=\"https://vast-ridge-99820.herokuapp.com\";\r\n\r\n\r\n    const howManyNFTsAreLeft = async () =>{\r\n      console.log(\"We are in howManyNFTsAreLeft\")\r\n      let totalNFT=\"\";\r\n      let mintedNFT=\"\";\r\n      try{\r\n        totalNFT = await props.contract.getMaxSupply();\r\n        console.log(\"totalNFT = \"+totalNFT);\r\n        }catch(err){\r\n          console.log(\"My error is: \"+err);\r\n          totalNFT=\"ERR\";\r\n        }\r\n      try{\r\n        mintedNFT= await props.contract.getContractNFTBalance(); \r\n      }catch(err){\r\n        console.log(\"Account is \"+props.account);\r\n        console.log(\"Contract balance err is\"+err);\r\n        mintedNFT=0;\r\n      }\r\n        let nftLeftToMint = totalNFT - mintedNFT;\r\n        console.log(\"Left to mint\"+leftToMint)\r\n        setLeftToMint(nftLeftToMint);\r\n      }\r\n\r\n      const insertWalletIntoDB = async()=>{\r\n\r\n        const dataToSend = JSON.stringify({ \"wallet\": props.account,\r\n                                            \"txtype\":\"mint\",\r\n                                            \"amount\":mintAmount,\r\n                                             });\r\n          const link = url+\"/api/insertWallet\";\r\n          await fetch(link,{\r\n      //  await fetch('http://localhost:3333/api/insertWallet', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: dataToSend\r\n        })\r\n    \r\n      }\r\n\r\nconst handleSubmit= async() =>{\r\n  let transaction = \"\";\r\n  let errorTx= false;\r\n  let contractPaused = await props.contract.paused();\r\n  console.log(\"We are in the handleSubmit function\");\r\n  if(!contractPaused){\r\n    if(mintAmount>0&&mintAmount<1001){\r\n        try{\r\n            const{ethereum}=window;\r\n\r\n            if(ethereum){\r\n   \r\n                let cost = await props.contract.cost();\r\n                cost = cost*mintAmount;\r\n                cost = cost.toString();\r\n                var options = { gasLimit: 174860, nonce: 45, value: ethers.utils.parseUnits(cost, 'wei') };\r\n              try{\r\n//                var options = { gasLimit: 174860, nonce: 45, value: ethers.utils.parseUnits(price, 'wei') };\r\n                transaction = await props.contract.mint(mintAmount, options);\r\n              }catch(err){\r\n                errorTx=true;\r\n                alert(\"Transaction failed, please try again later ! Transaction has been reverted ! \");\r\n              }\r\n              if(!errorTx){\r\n                alert(\"Minted !! You can see transaction here:\" +\"<a href=\"+`https://mumbai.polygonscan.com/tx/${transaction.hash}`+\">Transaction</a>\");\r\n                insertWalletIntoDB();\r\n                await howManyNFTsAreLeft();\r\n                setMintAmount(0);\r\n              }\r\n             } else{\r\n                alert(\"Please connect to Metamask or install it if not already done !\");\r\n             }   \r\n        }\r\n        catch(err){\r\n           alert(\"Network is crowded please try again later !\");\r\n        }\r\n     \r\n\r\n    }else{\r\n      if(mintAmount===0){\r\n        alert(\"You need to mint at least 1 NFT\");\r\n      }else if(mintAmount >1000){\r\n        alert(\"Holly Molly what do you wanna do ? Hold your horses and leave some for the others too!!! \");\r\n      }else{\r\n        alert(\"Make sure you insert NUMBERS Only !!!\");\r\n      }\r\n    }\r\n\r\n}else{\r\n  alert(\"Contract is PAUSED, you can't mint at this moment, please try again later\");\r\n}\r\n}\r\n\r\n    useEffect(()=>{\r\n\r\n      howManyNFTsAreLeft();\r\n    },[mintAmount])\r\n\r\n     useEffect(()=>{\r\n      howManyNFTsAreLeft();\r\n     },[mintAmount])\r\n\r\n      return (\r\n        <>\r\n        <div className=\"div-form\">\r\n        <form className=\"form\">\r\n        <label className=\"label-mint\">\r\n             NFT's left to mint:\r\n             <p className=\"p-welcomeMint\">{leftToMint}</p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n        </label>\r\n          <label className=\"form-label\">\r\n            Mint Amount:\r\n            <input\r\n              type=\"text\"\r\n              value={mintAmount}\r\n              onChange={e => setMintAmount(e.target.value)}\r\n            />\r\n          </label>\r\n          <label className=\"label-price\">\r\n            Price per/NFT is 10 Matic\r\n            </label>\r\n        </form>\r\n        </div>\r\n     <button className=\"form-submit-button\" onClick={()=>{handleSubmit(mintAmount)}}>Mint</button>\r\n     </>\r\n      );\r\n}\r\n\r\nexport default Mint;","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\reelset\\ReelSet.jsx",["137"],[],"import React, { useEffect, useRef, useState} from \"react\";\r\nimport Constants from \"../../Constants\";\r\nimport \"./reelset.css\";\r\nimport Reel from \"../reel/Reel\";\r\nimport  Controller from '../controller/Controller'\r\nimport spinSound from '../../assets/sounds/spinningSlotMachine.wav';\r\nimport winBet from '../../assets/sounds/coinsHandling.wav';\r\nimport loosing from '../../assets/sounds/loosing.wav';\r\n\r\nlet timer;\r\n\r\nconst ReelSet = (props) => {\r\n  const [gameOn, setGameOn] = useState(0);\r\n  let zeroGame= 0;\r\n  let refLights = useRef();\r\n  let refWinning = useRef();\r\n\r\n  let spinResultsIdx = [];\r\n  let spinResults = [];\r\n  let winningResults=[];\r\n\r\n  const audioSpin = new Audio(spinSound);\r\n  const audioWin = new Audio(winBet);\r\n \r\n  const audioLoosing = new Audio(loosing);\r\n\r\n  const playLoosing = () => {\r\n    audioLoosing.play();\r\n};\r\n\r\n  const playWinBet = () => {\r\n        audioWin.play();\r\n  };\r\n\r\n\r\n\r\n  const play = () => {\r\n      audioSpin.play();\r\n    };\r\n\r\n  const blurResults = () =>{    \r\n    if(spinResultsIdx.length===5){\r\n      for(let i=0; i<5;i++){\r\n        setTimeout(()=>{\r\n        for(let j=0; j<spinResultsIdx.length;j++){\r\n          for(let k=i; k<5;k++){\r\n            let imagePoz=spinResultsIdx[k][j];\r\n// /            console.log(\"My childElementCount is: \"+refLights.current.childNodes[i].childNodes[0].childElementCount);\r\n//            console.log(\"My blurring image is: \"+refLights.current.childNodes[i].childNodes[0].attributes[3].baseUri);\r\n            refLights.current.childNodes[i].childNodes[0].childNodes[imagePoz].attributes[3].value=\"opacity: 0.3\";\r\n          }\r\n        \r\n        }\r\n      },4500+(i*500))\r\n      } \r\n   \r\n    }\r\n  }\r\n\r\nconst callbackCreateArray = (reelIdx, reel) => {\r\n  spinResults.push(reel);\r\n  spinResultsIdx.push(reelIdx);\r\n  blurResults();\r\n}\r\n\r\nuseEffect(()=>{\r\n// \"timer\" will be undefined again after the next re-render\r\n  return () => clearTimeout(timer);\r\n},[])\r\n\r\nconst callBackLooser = () => {\r\n  refWinning.current.innerHTML=\"Hahaha You've lost !!! &#10040;&#10040;&#10040;&#10040;&#10040; HaHaHa You've lost !!!\";\r\n  playLoosing();\r\n}\r\n\r\nconst highLightWinningLines = (jackpot) =>{\r\n  if(jackpot){\r\n    refWinning.current.innerHTML=\"YOU WON! &#127775; JACKPOT &#127775; YOU WON!\";\r\n  }else{\r\n    refWinning.current.innerHTML=\"YOU WON! &#127775;&#127775;&#127775;&#127775;&#127775; YOU WON!\";\r\n  }\r\n  for(let i=0; i<winningResults.length;i++){\r\n    let lineNr=winningResults[i]\r\n\r\n\r\n//    for(let j=0; j<Constants.LINES[i].length;j++){\r\n//  setTimeout(()=>{\r\n  for(let j=0; j<Constants.LINES[lineNr].length;j++){\r\n       let indexI=(Constants.LINES[lineNr])[j][0];\r\n       let indexJ=(Constants.LINES[lineNr])[j][1];\r\n\r\n      let imagePoz=(spinResultsIdx[indexI])[indexJ];\r\n      // setTimeout(()=>{\r\n      //   refLights.current.childNodes[j].childNodes[0].childNodes[imagePoz].attributes[3].value=\"opacity: 0.3\";\r\n      // },6000+(j*400))\r\n        setTimeout(()=>{\r\n          playWinBet();\r\n          refLights.current.childNodes[j].childNodes[0].childNodes[imagePoz].attributes[3].value=\"opacity: 1\";\r\n          setTimeout(()=>{\r\n            refLights.current.childNodes[j].childNodes[0].childNodes[imagePoz].attributes[3].value=\"opacity: 0.3\";\r\n          },2000)\r\n        },3000+(i*3000))\r\n     \r\n    } \r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nconst callbackWinningResults =(winningLines, jackpot) =>{\r\n  winningResults=winningLines;\r\n  highLightWinningLines(jackpot);\r\n}\r\n\r\n  const renderReels = () => {\r\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\r\n      return <Reel reel={el} key={idx} index={idx} gameOn={gameOn} createArray={callbackCreateArray}/>;\r\n    });\r\n    \r\n    return <>{reelList}</>;\r\n  };  \r\n\r\n const calbackZeroGame = ()=>{\r\n  zeroGame=false;\r\n } \r\n\r\n  const callBackSpinReel = () => {\r\n      refWinning.current.innerHTML=\" &#127775;&#127775;&#127775; Jackpot: <span>100</span>  &#127775;&#127775;&#127775;\"\r\n      play();\r\n      setGameOn(gameOn+1);  \r\n  }; \r\n\r\n  return (\r\n    <div className=\"main__reelset\">\r\n    <div className=\"jackpot\" ref={refWinning}>\r\n   <h2> &#127775;&#127775;&#127775; Jackpot: <span>100</span>  &#127775;&#127775;&#127775;</h2>\r\n  </div>\r\n      <div className=\"container\" >\r\n        <div className=\"playContainer\">\r\n          <div className=\"reelSet\"  ref={refLights}>\r\n            {renderReels()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Controller spinReel={callBackSpinReel} zeroGame={calbackZeroGame} myResults={spinResults} myResultsIdx={spinResultsIdx} game={gameOn} winningLinesCallBack={callbackWinningResults} looserCallBack={callBackLooser}/> \r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ReelSet;\r\n\r\n/**\r\n * \r\n * div =0 , spinResultsIdx[0]\r\nMy winning line is 0,0, 1,0, 2,0, 3,0, 4,0\r\nMy winning line is 0,1,1,1,2,1,3,1,4,1\r\nMy winning line is 0,2,1,2,2,2,3,2,4,2\r\nMy winning line is 0,0,1,1,2,2,3,1,4,0\r\nMy winning line is 0,2,1,1,2,0,3,1,4,2\r\nMy winning line is 0,0,1,2,2,0,3,2,4,0\r\nMy winning line is 0,2,1,0,2,2,3,0,4,2\r\nMy winning line is 0,1,1,0,2,1,3,0,4,1\r\nMy winning line is 0,0,1,1,2,0,3,1,4,0\r\nMy winning line is 0,1,1,2,2,1,3,2,4,1\r\nMy winning line is 0,2,1,1,2,2,3,1,4,2\r\nMy winning line is 0,0,1,1,2,1,3,1,4,0\r\n * \r\n */","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\controller\\Controller.jsx",["138","139"],[],"import React,{useState, useRef} from 'react';\r\nimport ScoreBet from '../scorebet/ScoreBet';\r\nimport './controller.css'\r\n\r\nconst Controller = (props) =>{\r\n    const [spinning, setSpinning] = useState(false);\r\n    let bet=2;\r\n    let score=2;\r\n    let refScore = useRef();\r\n    let btnDisable=false;\r\n\r\n    const setBetCallBack=(myBet)=>{\r\n        bet=myBet;\r\n    }\r\n\r\n    const setScoreCallBack = (myScore) =>{\r\n        score=myScore;\r\n    }\r\n    \r\n    const callbackSpin =()=>{\r\n        if(bet===0){\r\n          window.confirm(\"Please place a bet to play !\");\r\n        }else{\r\n            \r\n            if(!spinning){\r\n              setSpinning(true);\r\n              props.spinReel();\r\n             }\r\n            setTimeout(()=>{\r\n              setSpinning(false);\r\n          },10000)\r\n        }\r\n    }\r\n\r\n    return(\r\n      <>\r\n        <div className=\"controls\" ref={refScore}>\r\n        <div\r\n          className={!spinning ? \"spin spinning\" : \"spin\"}\r\n          onClick={() => {\r\n            callbackSpin();\r\n          }}\r\n          disabled={spinning} >\r\n          {spinning ? \"Spinning...\" : \"SPIN\"}\r\n        </div>\r\n        <ScoreBet block={spinning} resultsArray={props.myResults} resultsArrayIdx={props.myResultsIdx} callBackSetBet={setBetCallBack} callbackSetScore={setScoreCallBack} game={props.game} winningLinesCallBack={props.winningLinesCallBack} looserCallBack={props.looserCallBack}/>    \r\n      </div>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default Controller;","F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\youtubeembeded\\ExportYoutubeVideo.jsx",[],[],"F:\\Games\\PFPRacerNFTProject\\slotmachinereact\\src\\components\\youtubeembeded\\YoutubeEmbed.jsx",[],[],[],{"ruleId":"140","severity":1,"message":"141","line":1,"column":24,"nodeType":"142","messageId":"143","endLine":1,"endColumn":33},{"ruleId":"140","severity":1,"message":"144","line":2,"column":9,"nodeType":"142","messageId":"143","endLine":2,"endColumn":15},{"ruleId":"140","severity":1,"message":"145","line":5,"column":10,"nodeType":"142","messageId":"143","endLine":5,"endColumn":16},{"ruleId":"140","severity":1,"message":"146","line":13,"column":10,"nodeType":"142","messageId":"143","endLine":13,"endColumn":18},{"ruleId":"140","severity":1,"message":"147","line":14,"column":10,"nodeType":"142","messageId":"143","endLine":14,"endColumn":23},{"ruleId":"140","severity":1,"message":"148","line":14,"column":25,"nodeType":"142","messageId":"143","endLine":14,"endColumn":41},{"ruleId":"140","severity":1,"message":"149","line":15,"column":9,"nodeType":"142","messageId":"143","endLine":15,"endColumn":17},{"ruleId":"140","severity":1,"message":"150","line":43,"column":10,"nodeType":"142","messageId":"143","endLine":43,"endColumn":25},{"ruleId":"140","severity":1,"message":"151","line":8,"column":5,"nodeType":"142","messageId":"143","endLine":8,"endColumn":19},{"ruleId":"140","severity":1,"message":"152","line":17,"column":5,"nodeType":"142","messageId":"143","endLine":17,"endColumn":10},{"ruleId":"140","severity":1,"message":"153","line":40,"column":11,"nodeType":"142","messageId":"143","endLine":40,"endColumn":19},{"ruleId":"140","severity":1,"message":"154","line":43,"column":11,"nodeType":"142","messageId":"143","endLine":43,"endColumn":20},{"ruleId":"140","severity":1,"message":"155","line":51,"column":11,"nodeType":"142","messageId":"143","endLine":51,"endColumn":22},{"ruleId":"140","severity":1,"message":"156","line":365,"column":17,"nodeType":"142","messageId":"143","endLine":365,"endColumn":25},{"ruleId":"140","severity":1,"message":"157","line":368,"column":15,"nodeType":"142","messageId":"143","endLine":368,"endColumn":23},{"ruleId":"140","severity":1,"message":"158","line":8,"column":12,"nodeType":"142","messageId":"143","endLine":8,"endColumn":19},{"ruleId":"140","severity":1,"message":"159","line":8,"column":21,"nodeType":"142","messageId":"143","endLine":8,"endColumn":31},{"ruleId":"140","severity":1,"message":"160","line":9,"column":12,"nodeType":"142","messageId":"143","endLine":9,"endColumn":16},{"ruleId":"140","severity":1,"message":"161","line":9,"column":18,"nodeType":"142","messageId":"143","endLine":9,"endColumn":25},{"ruleId":"140","severity":1,"message":"156","line":42,"column":15,"nodeType":"142","messageId":"143","endLine":42,"endColumn":23},{"ruleId":"140","severity":1,"message":"162","line":9,"column":12,"nodeType":"142","messageId":"143","endLine":9,"endColumn":22},{"ruleId":"140","severity":1,"message":"163","line":9,"column":24,"nodeType":"142","messageId":"143","endLine":9,"endColumn":37},{"ruleId":"140","severity":1,"message":"146","line":10,"column":12,"nodeType":"142","messageId":"143","endLine":10,"endColumn":20},{"ruleId":"140","severity":1,"message":"164","line":10,"column":22,"nodeType":"142","messageId":"143","endLine":10,"endColumn":33},{"ruleId":"165","severity":1,"message":"166","line":103,"column":9,"nodeType":"167","endLine":103,"endColumn":18,"suggestions":"168"},{"ruleId":"140","severity":1,"message":"169","line":5,"column":5,"nodeType":"142","messageId":"143","endLine":5,"endColumn":15},{"ruleId":"170","severity":1,"message":"171","line":80,"column":65,"nodeType":"172","messageId":"173","endLine":80,"endColumn":66},{"ruleId":"170","severity":1,"message":"171","line":80,"column":76,"nodeType":"172","messageId":"173","endLine":80,"endColumn":77},{"ruleId":"170","severity":1,"message":"171","line":80,"column":132,"nodeType":"172","messageId":"173","endLine":80,"endColumn":133},{"ruleId":"165","severity":1,"message":"174","line":112,"column":7,"nodeType":"167","endLine":112,"endColumn":19,"suggestions":"175"},{"ruleId":"165","severity":1,"message":"174","line":116,"column":8,"nodeType":"167","endLine":116,"endColumn":20,"suggestions":"176"},{"ruleId":"140","severity":1,"message":"177","line":14,"column":7,"nodeType":"142","messageId":"143","endLine":14,"endColumn":15},{"ruleId":"140","severity":1,"message":"178","line":8,"column":9,"nodeType":"142","messageId":"143","endLine":8,"endColumn":14},{"ruleId":"140","severity":1,"message":"179","line":10,"column":9,"nodeType":"142","messageId":"143","endLine":10,"endColumn":19},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'ethers' is defined but never used.","'assert' is defined but never used.","'showList' is assigned a value but never used.","'widthCarousel' is assigned a value but never used.","'setWidthCarousel' is assigned a value but never used.","'carousel' is assigned a value but never used.","'defaultAbiCoder' is defined but never used.","'generatedReels' is assigned a value but never used.","'fnScr' is assigned a value but never used.","'audioBtn' is assigned a value but never used.","'audioSpin' is assigned a value but never used.","'handleScore' is assigned a value but never used.","'gasPrice' is assigned a value but never used.","'contract' is assigned a value but never used.","'rolling' is assigned a value but never used.","'setRolling' is assigned a value but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'connecting' is assigned a value but never used.","'setConnecting' is assigned a value but never used.","'setShowList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkConnection' and 'welcomeWallMessage'. Either include them or remove the dependency array.","ArrayExpression",["180"],"'mintAmount' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'howManyNFTsAreLeft'. Either include it or remove the dependency array.",["181"],["182"],"'zeroGame' is assigned a value but never used.","'score' is assigned a value but never used.","'btnDisable' is assigned a value but never used.",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"185","fix":"187"},"Update the dependencies array to be: [account, checkConnection, welcomeWallMessage]",{"range":"188","text":"189"},"Update the dependencies array to be: [howManyNFTsAreLeft, mintAmount]",{"range":"190","text":"191"},{"range":"192","text":"191"},[3756,3765],"[account, checkConnection, welcomeWallMessage]",[3768,3780],"[howManyNFTsAreLeft, mintAmount]",[3843,3855]]