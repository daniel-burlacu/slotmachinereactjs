{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\ReelSet.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport Constants from \"../Constants\";\nimport Reel from \"./Reel\";\nimport './assets/css/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ReelSet = props => {\n  _s();\n\n  const [width, setWidth] = useState();\n  const [height, setHeight] = useState();\n  const [bet, setBet] = useRef();\n  const [score, setScore] = useRef(2);\n  const reels = [];\n  const reelsInMotion = null;\n  const spinResults = [];\n  const winningLines = [];\n  const strike = false;\n  const LINES = Constants.LINES;\n  const scr = 2;\n  const countWin = 0;\n  const symbolSellection = [];\n\n  const randomBetween = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const audioUrlWin = require(\"../assets/sounds/coinsHandling.wav\");\n\n  const audioWin = Audio(\"../assets/sounds/coinsHandling.wav\");\n\n  const audioUrlWinBonus = require(\"../assets/sounds/winningBonus.wav\");\n\n  const audioWinBonus = Audio(\"../assets/sounds/winningBonus.wav\");\n\n  const audioUrlBtn = require(\"../assets/sounds/buttonPress.wav\");\n\n  const audioBtn = Audio(\"../assets/sounds/buttonPress.wav\");\n\n  const audioUrlSpin = require(\"../assets/sounds/spinningSlotMachine.wav\");\n\n  const audioSpin = Audio(\"../assets/sounds/spinningSlotMachine.wav\"); //    evaluateResults = () => {\n  //        winningLines = [];\n  //        console.log(spinResults);\n  //    }\n\n  const drawScore = (lineNumberType, fool) => {\n    let newScore = 0;\n\n    if (fool) {\n      lineNumberType = 18;\n    }\n\n    switch (lineNumberType) {\n      case 0:\n        // top line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 1:\n        // middle line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 2:\n        // bottom line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 3:\n        // V shape starting bottom left\n        //        audioWin.play();\n        newScore = 0.2;\n        break;\n\n      case 4:\n        // V shape starting bottom right\n        //        audioWin.play();\n        newScore = 0.2;\n        break;\n\n      case 5:\n        // W shape starting top left\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 6:\n        // M shape starting bottom left\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 7:\n        // M shape on top half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 8:\n        // W shape on top half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 9:\n        //W shape on bottom half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 10:\n        // M shape on bottom half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 11:\n        // U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 12:\n        // inverse U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 13:\n        // U shape on bottom half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 14:\n        // inverse U shape on bottom half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 15:\n        // inverse U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 16:\n        // Z shape from top left\n        //        audioWin.play();\n        newScore = 0.4;\n        break;\n\n      case 17:\n        // Z shape from bottom left\n        //        audioWin.play();\n        newScore = 0.4;\n        break;\n\n      case 18:\n        // Z shape from bottom left\n        //        audioWinBonus.play();\n        newScore = 100;\n        break;\n\n      default:\n        newScore = 0;\n    }\n\n    console.log(\"My score is:\" + newScore);\n    setMyScore(newScore);\n    return;\n  };\n\n  const setScoreState = () => {\n    console.log(\"My scr is:\" + scr);\n    setScore(scr);\n  };\n\n  const checkLinesElements = symbol => {\n    countWin++;\n    let symNr = 0;\n    let fool = 0;\n\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      fool = 0;\n      symNr = 0;\n\n      for (let j = 0; j < Constants.LINES[i].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === 'D') {\n          fool++;\n        }\n\n        if (symbol === spinResults[indexI][indexJ]) {\n          symNr++;\n        }\n      }\n\n      if (fool + symNr === 5 && fool < 4) {\n        winningLines.push(i);\n      }\n    }\n\n    winningLines = uniq(winningLines);\n  };\n\n  const uniq = a => {\n    return a.sort().filter(function (item, pos, ary) {\n      return !pos || item !== ary[pos - 1];\n    });\n  };\n\n  const checkElements = () => {\n    let fool = 0;\n\n    for (let k = 0; k < 3; k++) {\n      fool = 0;\n\n      for (let i = 0; i < spinResults.length; i++) {\n        let symb = \"\";\n\n        for (let j = k; j < spinResults[i].length; j++) {\n          if (spinResults[i][j] !== 'D') {\n            symb = spinResults[i][j];\n            j = spinResults[i].length;\n          } else {\n            fool++;\n            j = spinResults[i].length;\n          }\n        }\n\n        if (fool < 4 && symb !== \"\") {\n          symbolSellection.push(symb);\n        }\n      }\n    }\n\n    for (let i = 0; i < symbolSellection.length; i++) {\n      checkLinesElements(symbolSellection[i]);\n    }\n  };\n\n  const evaluateResults = () => {\n    checkFourFools();\n    checkElements();\n    highLightWinningLines(0);\n\n    if (winningLines.length > 0) {\n      console.log(\"We have winning line !!!\");\n\n      for (let i = 0; i < winningLines.length; i++) {\n        drawScore(winningLines[i], false);\n      }\n    } else {\n      console.log(\"We have no winning lines !!!\");\n\n      if (scr - bet >= 0.2) {\n        scr = Math.round((scr - bet) * 100) / 100;\n        setScoreState();\n\n        if (scr < bet) {\n          setBetZero();\n        }\n      } else if (scr - bet === 0) {\n        setBetZero();\n        scr = 0;\n        setScoreState();\n      }\n    } //winningLines=[];\n\n  };\n\n  const checkFourFools = () => {\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      let fool = 0;\n\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n      }\n\n      if (fool === 4) {\n        winningLines.push(i);\n        drawScore(i, false);\n      }\n    }\n  };\n\n  const checkFiveFools = () => {\n    let fl = false;\n\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      let fool = 0;\n\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n      }\n\n      if (fool === 5) {\n        fl = true;\n        winningLines.push(i);\n        drawScore(i, true);\n        highLightWinningLines(0);\n        break;\n      }\n    }\n\n    return fl;\n  };\n\n  const checkWin = () => {\n    let fool = checkFiveFools();\n\n    if (!fool) {\n      evaluateResults();\n    } //  setScoreState();\n\n  };\n\n  const highLightWinningLines = currentIndex => {\n    if (!winningLines.length) {\n      return;\n    }\n\n    if (currentIndex > 0) {\n      //turn off the light on the previous line\n      Constants.LINES[winningLines[currentIndex - 1]].map(el => {\n        return reels[el[0]].highLightAtIndex(el[1], false);\n      });\n    }\n\n    if (currentIndex > winningLines.length - 1) {\n      return;\n    }\n\n    Constants.LINES[winningLines[currentIndex]].map(el => {\n      return reels[el[0]].highLightAtIndex(el[1], true), reels[el[0]].shakeAtIndex(el[1]);\n    });\n    setTimeout(() => {\n      highLightWinningLines(currentIndex + 1);\n    }, 800);\n  };\n\n  const spin = () => {\n    winningLines = [];\n    reelsInMotion = Constants.REELS;\n\n    for (let i = 0; i < Constants.REELS; i++) {\n      reels[i].scrollByOffSet(randomBetween((Constants.REELS_REPEAT - 6) * reels[i].symbols.length, (Constants.REELS_REPEAT - 5) * reels[i].symbols.length), (reelIndex, results) => {\n        reelsInMotion -= 1;\n        spinResults[reelIndex] = results;\n\n        if (reelsInMotion === 0) {\n          checkWin();\n          console.log(\"We have finished rolling\"); //  setScoreState();\n        }\n      });\n    }\n  };\n\n  const onLayout = e => {\n    setWidth(1200);\n    setHeight(800);\n  };\n\n  const renderReels = () => {\n    let reelWidth = width / Constants.REELS;\n    console.log(\"My reelWidth is: \" + reelWidth);\n    console.log(\"My hight is: \" + height);\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\n      return /*#__PURE__*/_jsxDEV(Reel, {\n        width: reelWidth,\n        height: height,\n        index: idx,\n        refs: ref => {\n          reels[idx] = ref;\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: reelList\n    }, void 0, false);\n  };\n\n  const setMyScore = e => {\n    console.log(\"We are in setMyScore: \" + e);\n    let sc = 0;\n\n    if (bet > 0 && e > 0) {\n      console.log(\"Calculating:\" + scr + \"+(\" + bet + \"*\" + e + \")\");\n      scr = scr + (e + bet * e);\n      scr = Math.round(scr * 100) / 100;\n    } else if (bet > 0 && e === 0) {\n      scr = scr - (e + bet * e);\n      console.log(\"Calculating:\" + sc + \"-(\" + bet + \"*\" + e + \")\");\n      scr = Math.round(scr * 100) / 100;\n    } else if (bet === 0 && e > 0) {\n      console.log(\"Calculating: \" + scr + \" + \" + e);\n      scr = Math.round((scr + e) * 100) / 100;\n    } //setBetZero();\n\n\n    setScoreState(scr);\n  };\n\n  const setBetZero = () => {\n    setBet(0);\n  }; // to trigger roolling and maintain state\n\n\n  const setWithdrawal = wdrl => {\n    console.log(\"We are withdrawling !!!\");\n  };\n\n  const increaseBet = () => {\n    if (bet < scr - 0.2 && scr !== 0) {\n      console.log(\"Bet is set !\");\n      setBet(Math.round((bet + 0.2) * 100) / 100);\n    } else setBet(scr);\n  };\n\n  const decreaseBet = () => {\n    if (bet >= 0.2 && score !== 0) {\n      setBet(Math.round((bet - 0.2) * 100) / 100);\n    } else if (bet === scr && score !== 0) {\n      setBet(Math.round((score - 0.2) * 100) / 100);\n    }\n  }; // let score = onScore();\n  //  console.log(\"My render score is: \"+score);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"slot\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"jackpot\",\n      children: [\"Jackpot: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"jp\",\n        children: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reelSet\",\n          children: width && height && renderReels()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: !rolling ? \"roll rolling\" : \"roll\",\n        onClick: () => {\n          spin(); // reelSet.spin();\n          //    console.log(\"My reelset score is:\"+reelSet.onScore());\n          //  setMyScore(onScore());\n\n          console.log(\"executing now\");\n        },\n        disabled: rolling,\n        children: rolling ? \"Rolling...\" : \"ROLL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: !withdrawal ? \"roll rolling\" : \"roll\",\n        onClick: () => {},\n        disabled: withdrawal,\n        children: withdrawal ? \"Withdrawaling...\" : \"Withdrawal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"setBet\",\n        onClick: increaseBet,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: !bet ? \"bet rolling\" : \"bet\",\n        children: [\"Bet:\", bet]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"setBet\",\n        onClick: decreaseBet,\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Score:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"score\",\n          children: score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 399,\n    columnNumber: 7\n  }, this);\n};\n\n_s(ReelSet, \"igNkimEUCIpJkEhqr1PWNiqivYI=\");\n\n_c = ReelSet;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReelSet\");","map":{"version":3,"names":["React","useState","useRef","Constants","Reel","ReelSet","props","width","setWidth","height","setHeight","bet","setBet","score","setScore","reels","reelsInMotion","spinResults","winningLines","strike","LINES","scr","countWin","symbolSellection","randomBetween","min","max","Math","floor","random","audioUrlWin","require","audioWin","Audio","audioUrlWinBonus","audioWinBonus","audioUrlBtn","audioBtn","audioUrlSpin","audioSpin","drawScore","lineNumberType","fool","newScore","console","log","setMyScore","setScoreState","checkLinesElements","symbol","symNr","i","length","j","indexI","indexJ","push","uniq","a","sort","filter","item","pos","ary","checkElements","k","symb","evaluateResults","checkFourFools","highLightWinningLines","round","setBetZero","checkFiveFools","fl","checkWin","currentIndex","map","el","highLightAtIndex","shakeAtIndex","setTimeout","spin","REELS","scrollByOffSet","REELS_REPEAT","symbols","reelIndex","results","onLayout","e","renderReels","reelWidth","reelList","Array","apply","idx","ref","sc","setWithdrawal","wdrl","increaseBet","decreaseBet","rolling","withdrawal"],"sources":["F:/Games/slotmachinereact/src/components/ReelSet.js"],"sourcesContent":["import React, { useState,useRef } from \"react\";\r\nimport Constants from \"../Constants\";\r\nimport Reel from \"./Reel\";\r\nimport './assets/css/App.css';\r\n\r\nconst ReelSet = (props)=> {\r\n\r\n  const [width, setWidth] = useState();\r\n  const [height, setHeight] = useState();\r\n  const [bet, setBet] = useRef();\r\n  const [score, setScore] = useRef(2);\r\n\r\n  const reels = [];\r\n  const reelsInMotion = null;\r\n  const spinResults = [];\r\n  const winningLines = [];\r\n  const strike = false;\r\n  const LINES = Constants.LINES;\r\n  const scr = 2;\r\n  const countWin = 0;\r\n  const symbolSellection = [];\r\n\r\n const randomBetween = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\nconst  audioUrlWin = require(\"../assets/sounds/coinsHandling.wav\");\r\nconst  audioWin = Audio(\"../assets/sounds/coinsHandling.wav\");\r\n\r\nconst  audioUrlWinBonus = require(\"../assets/sounds/winningBonus.wav\");\r\nconst  audioWinBonus =  Audio(\"../assets/sounds/winningBonus.wav\");\r\n\r\nconst  audioUrlBtn = require(\"../assets/sounds/buttonPress.wav\");\r\nconst  audioBtn =  Audio(\"../assets/sounds/buttonPress.wav\");\r\n\r\nconst  audioUrlSpin = require(\"../assets/sounds/spinningSlotMachine.wav\");\r\nconst  audioSpin =  Audio(\"../assets/sounds/spinningSlotMachine.wav\");\r\n\r\n  //    evaluateResults = () => {\r\n  //        winningLines = [];\r\n  //        console.log(spinResults);\r\n  //    }\r\n\r\nconst drawScore = (lineNumberType, fool) => {\r\n    let newScore = 0;\r\n    if (fool) {\r\n      lineNumberType = 18;\r\n    }\r\n    switch (lineNumberType) {\r\n      case 0: // top line\r\n//        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 1: // middle line\r\n//        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 2: // bottom line\r\n//        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 3: // V shape starting bottom left\r\n//        audioWin.play();\r\n        newScore = 0.2;\r\n        break;\r\n      case 4: // V shape starting bottom right\r\n//        audioWin.play();\r\n        newScore = 0.2;\r\n        break;\r\n      case 5: // W shape starting top left\r\n//        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 6: // M shape starting bottom left\r\n//        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 7: // M shape on top half\r\n//        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 8: // W shape on top half\r\n//        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 9: //W shape on bottom half\r\n//        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 10: // M shape on bottom half\r\n//        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 11: // U shape on top half\r\n//        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 12: // inverse U shape on top half\r\n//        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 13: // U shape on bottom half\r\n//        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 14: // inverse U shape on bottom half\r\n//        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 15: // inverse U shape on top half\r\n//        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 16: // Z shape from top left\r\n//        audioWin.play();\r\n        newScore = 0.4;\r\n        break;\r\n      case 17: // Z shape from bottom left\r\n//        audioWin.play();\r\n        newScore = 0.4;\r\n        break;\r\n      case 18: // Z shape from bottom left\r\n//        audioWinBonus.play();\r\n        newScore = 100;\r\n        break;\r\n      default:\r\n        newScore=0;\r\n    }\r\n\r\n    console.log(\"My score is:\"+newScore);\r\n    setMyScore(newScore);\r\n    return;\r\n  };\r\n\r\nconst  setScoreState = () => {\r\n    console.log(\"My scr is:\"+scr);\r\n    setScore(scr);\r\n  };\r\n  \r\nconst checkLinesElements=(symbol)=>{\r\n    countWin++;\r\n    let symNr=0;\r\n    let fool=0;\r\n    for(let i=0;i<Constants.LINES.length;i++){\r\n        fool=0;\r\n        symNr=0;\r\n        for(let j=0; j<Constants.LINES[i].length;j++){\r\n            let indexI = Constants.LINES[i][j][0];\r\n            let indexJ = Constants.LINES[i][j][1];\r\n\r\n            if(spinResults[indexI][indexJ]==='D'){\r\n                fool++;\r\n            }\r\n            if(symbol===spinResults[indexI][indexJ]){\r\n                symNr++;\r\n            }\r\n        }  \r\n        if(fool+symNr===5&&fool<4){\r\n            winningLines.push(i);\r\n        }\r\n    }\r\n    winningLines=uniq(winningLines);\r\n  }\r\n\r\nconst uniq=(a)=> {\r\n    return a.sort().filter(function(item, pos, ary) {\r\n        return !pos || item !== ary[pos - 1];\r\n    });\r\n}\r\n\r\n\r\nconst checkElements=()=>{\r\n      let fool=0;\r\n    for(let k=0; k<3; k++){\r\n      fool=0;\r\n      for(let i=0;i<spinResults.length;i++){\r\n          let symb =\"\";\r\n          for(let j=k; j<spinResults[i].length;j++){\r\n              if(spinResults[i][j]!=='D'){\r\n                  symb=spinResults[i][j];\r\n                  j=spinResults[i].length;\r\n              }else{\r\n                fool++;\r\n                j=spinResults[i].length;\r\n              }\r\n          }\r\n         if(fool<4&&symb!==\"\"){\r\n          symbolSellection.push(symb); \r\n        }\r\n      } \r\n    } \r\n    for(let i=0;i<symbolSellection.length;i++){\r\n        checkLinesElements(symbolSellection[i]);\r\n    }\r\n    \r\n  }\r\n\r\nconst evaluateResults = () => {\r\n    checkFourFools();\r\n    checkElements();\r\n    highLightWinningLines(0);\r\n    if(winningLines.length>0){\r\n      console.log(\"We have winning line !!!\");\r\n      for(let i=0; i< winningLines.length;i++){\r\n          drawScore(winningLines[i],false);\r\n    }\r\n  }else{\r\n    console.log(\"We have no winning lines !!!\");\r\n    if((scr - bet)>=0.2){\r\n      scr= Math.round((scr - bet) * 100) / 100;\r\n      setScoreState();\r\n      if(scr < bet){\r\n        setBetZero();\r\n      }\r\n    }else if((scr - bet)===0){\r\n      setBetZero();\r\n      scr=0;\r\n      setScoreState();\r\n    }\r\n    \r\n  }\r\n    //winningLines=[];\r\n  };\r\n\r\nconst checkFourFools = () => {\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      let fool = 0;\r\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n        \r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n                fool++;\r\n        }\r\n      }\r\n      if (fool === 4) {\r\n        winningLines.push(i);\r\n        drawScore(i,false);\r\n      } \r\n    }\r\n  };\r\n\r\nconst checkFiveFools = () => {\r\n    let fl = false;\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      let fool = 0;\r\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n          fool++;\r\n        }\r\n      }\r\n      if (fool === 5) {\r\n        fl = true;\r\n        winningLines.push(i);\r\n        drawScore(i,true);\r\n        highLightWinningLines(0);\r\n        break;\r\n      }\r\n    }\r\n    return fl;\r\n  };\r\n\r\nconst checkWin = () => {\r\n    let fool = checkFiveFools();\r\n    if (!fool) {\r\n      evaluateResults();\r\n    }\r\n  //  setScoreState();\r\n  };\r\n  \r\nconst highLightWinningLines = (currentIndex) => {\r\n    if (!winningLines.length) {\r\n      return;\r\n    }\r\n    if (currentIndex > 0) {\r\n      //turn off the light on the previous line\r\n      Constants.LINES[winningLines[currentIndex - 1]].map((el) => {\r\n        return reels[el[0]].highLightAtIndex(el[1], false);\r\n      });\r\n    }\r\n    if (currentIndex > winningLines.length - 1) {\r\n      return;\r\n    }\r\n\r\n    Constants.LINES[winningLines[currentIndex]].map((el) => {\r\n      return (\r\n        reels[el[0]].highLightAtIndex(el[1], true),\r\n        reels[el[0]].shakeAtIndex(el[1])\r\n      );\r\n    });\r\n    setTimeout(() => {\r\n      highLightWinningLines(currentIndex + 1);\r\n    }, 800);\r\n  };\r\n\r\nconst spin =() => {\r\n    winningLines = [];\r\n    reelsInMotion = Constants.REELS;\r\n    for (let i = 0; i < Constants.REELS; i++) {\r\n      reels[i].scrollByOffSet(\r\n        randomBetween(\r\n          (Constants.REELS_REPEAT - 6) * reels[i].symbols.length,\r\n          (Constants.REELS_REPEAT - 5) * reels[i].symbols.length\r\n        ),\r\n        (reelIndex, results) => {\r\n          reelsInMotion -= 1;\r\n          spinResults[reelIndex] = results;\r\n\r\n          if (reelsInMotion === 0) {\r\n            checkWin();\r\n            console.log(\"We have finished rolling\");\r\n          //  setScoreState();\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\nconst onLayout = (e) => {\r\n    setWidth(1200);\r\n    setHeight(800)\r\n  };\r\n\r\nconst  renderReels = () => {\r\n    let reelWidth = width / Constants.REELS;\r\n    console.log(\"My reelWidth is: \"+ reelWidth);\r\n    console.log(\"My hight is: \"+height);\r\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\r\n      return (\r\n        <Reel\r\n          width={reelWidth}\r\n          height={height}\r\n          key={idx}\r\n          index={idx}\r\n          refs={(ref) => {\r\n            reels[idx] = ref;\r\n          }}\r\n        />\r\n      );\r\n    });\r\n\r\n    return <>{reelList}</>;\r\n  };\r\n\r\n\r\n const setMyScore = (e) => {\r\n    console.log(\"We are in setMyScore: \" + e);\r\n    let sc = 0;\r\n    if (bet > 0 && e > 0) {\r\n      console.log(\"Calculating:\" + scr + \"+(\" + bet + \"*\" + e + \")\");\r\n      scr = scr + (e+(bet * e));\r\n      scr = Math.round(scr * 100) / 100;\r\n    } else if (bet > 0 && e === 0) {\r\n      scr= scr -(e+(bet * e));\r\n      console.log(\"Calculating:\" + sc + \"-(\" + bet + \"*\" + e + \")\");\r\n      scr = Math.round(scr * 100) / 100;\r\n    } else if (bet === 0 && e > 0) {\r\n      console.log(\"Calculating: \" + scr + \" + \"+ e);\r\n      scr= Math.round((scr+e) * 100)/100;\r\n    }\r\n\r\n    //setBetZero();\r\n    setScoreState(scr);\r\n  };\r\n\r\nconst  setBetZero = () => {\r\n    setBet(0);\r\n  };\r\n\r\n  // to trigger roolling and maintain state\r\n \r\n const setWithdrawal = (wdrl) => {\r\n    console.log(\"We are withdrawling !!!\");\r\n  };\r\n\r\nconst increaseBet = () => {\r\n    if (bet < scr - 0.2 && scr !== 0) {\r\n      console.log(\"Bet is set !\");\r\n      setBet( Math.round((bet + 0.2) * 100) / 100);\r\n    } else\r\n      setBet( scr);\r\n  };\r\n\r\nconst  decreaseBet = () => {\r\n    if (bet >= 0.2 && score !== 0) {\r\n      setBet(Math.round((bet - 0.2) * 100) / 100);\r\n    } else if (bet === scr && score !== 0) {\r\n      setBet(Math.round((score - 0.2) * 100) / 100);\r\n    }\r\n  };\r\n  \r\n\r\n  // let score = onScore();\r\n  //  console.log(\"My render score is: \"+score);\r\n    return (\r\n\r\n      <div id=\"slot\">\r\n      <div id=\"jackpot\">\r\n        Jackpot: <span id=\"jp\">100</span>\r\n      </div>\r\n      <div className=\"container\">\r\n        <div className=\"playContainer\">\r\n          <div className=\"reelSet\"> \r\n                  {width && height && renderReels()}\r\n           </div>\r\n        </div>\r\n      </div>\r\n      <div id=\"controls\">\r\n    <div className={!rolling ? \"roll rolling\" : \"roll\"}\r\n          onClick={() => {\r\n      spin();\r\n      // reelSet.spin();\r\n      //    console.log(\"My reelset score is:\"+reelSet.onScore());\r\n  //  setMyScore(onScore());\r\n\r\n      console.log(\"executing now\");\r\n    }}\r\n    disabled={rolling}\r\n  >\r\n    {rolling ? \"Rolling...\" : \"ROLL\"}\r\n  </div>\r\n  <div\r\n    className={!withdrawal ? \"roll rolling\" : \"roll\"}\r\n    onClick={() => {}}\r\n    disabled={withdrawal}\r\n  >\r\n    {withdrawal ? \"Withdrawaling...\" : \"Withdrawal\"}\r\n  </div>\r\n  <button\r\n    id=\"setBet\"\r\n    onClick={increaseBet}\r\n  >\r\n    +\r\n  </button>\r\n  <div className={!bet ? \"bet rolling\" : \"bet\"}>\r\n    Bet:{bet}\r\n  </div>\r\n  <button\r\n    id=\"setBet\"\r\n    onClick={decreaseBet}\r\n  >\r\n    -\r\n  </button>\r\n  <label>\r\n    Score:<span id=\"score\">{score}</span>\r\n  </label>\r\n</div>\r\n\r\n    </div>\r\n    );\r\n  }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}