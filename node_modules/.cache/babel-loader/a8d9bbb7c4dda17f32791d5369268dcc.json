{"ast":null,"code":"const ethUtil = require('ethereumjs-util');\n\nconst assert = require('./assert.js');\n\nmodule.exports = {\n  bufferToQuantityHex: bufferToQuantityHex,\n  intToQuantityHex: intToQuantityHex,\n  quantityHexToInt: quantityHexToInt\n};\n/*\n * As per https://github.com/ethereum/wiki/wiki/JSON-RPC#hex-value-encoding\n * Quantities should be represented by the most compact hex representation possible\n * This means that no leading zeroes are allowed. There helpers make it easy\n * to convert to and from integers and their compact hex representation\n */\n\nfunction bufferToQuantityHex(buffer) {\n  // special case for zero\n  if (buffer.length === 1 && buffer[0] === 0) {\n    return '0x0';\n  }\n\n  buffer = ethUtil.toBuffer(buffer);\n  const hex = buffer.toString('hex');\n  const trimmed = ethUtil.unpad(hex);\n  return ethUtil.addHexPrefix(trimmed);\n}\n\nfunction intToQuantityHex(n) {\n  assert(typeof n === 'number' && n === Math.floor(n), 'intToQuantityHex arg must be an integer');\n  var nHex = ethUtil.toBuffer(n).toString('hex');\n\n  if (nHex[0] === '0') {\n    nHex = nHex.substring(1);\n  }\n\n  return ethUtil.addHexPrefix(nHex);\n}\n\nfunction quantityHexToInt(prefixedQuantityHex) {\n  assert(typeof prefixedQuantityHex === 'string', 'arg to quantityHexToInt must be a string');\n  var quantityHex = ethUtil.stripHexPrefix(prefixedQuantityHex);\n  var isEven = quantityHex.length % 2 === 0;\n\n  if (!isEven) {\n    quantityHex = '0' + quantityHex;\n  }\n\n  var buf = Buffer.from(quantityHex, 'hex');\n  return ethUtil.bufferToInt(buf);\n}","map":{"version":3,"names":["ethUtil","require","assert","module","exports","bufferToQuantityHex","intToQuantityHex","quantityHexToInt","buffer","length","toBuffer","hex","toString","trimmed","unpad","addHexPrefix","n","Math","floor","nHex","substring","prefixedQuantityHex","quantityHex","stripHexPrefix","isEven","buf","Buffer","from","bufferToInt"],"sources":["F:/Games/slotmachinereact/node_modules/ganache-core/node_modules/web3-provider-engine/util/rpc-hex-encoding.js"],"sourcesContent":["const ethUtil = require('ethereumjs-util')\nconst assert = require('./assert.js')\n\nmodule.exports = {\n  bufferToQuantityHex: bufferToQuantityHex,\n  intToQuantityHex: intToQuantityHex,\n  quantityHexToInt: quantityHexToInt,\n}\n\n/*\n * As per https://github.com/ethereum/wiki/wiki/JSON-RPC#hex-value-encoding\n * Quantities should be represented by the most compact hex representation possible\n * This means that no leading zeroes are allowed. There helpers make it easy\n * to convert to and from integers and their compact hex representation\n */\n\nfunction bufferToQuantityHex (buffer) {\n  // special case for zero\n  if (buffer.length === 1 && buffer[0] === 0) {\n    return '0x0'\n  }\n  buffer = ethUtil.toBuffer(buffer)\n  const hex = buffer.toString('hex')\n  const trimmed = ethUtil.unpad(hex)\n  return ethUtil.addHexPrefix(trimmed)\n}\n\nfunction intToQuantityHex (n) {\n  assert(typeof n === 'number' && n === Math.floor(n), 'intToQuantityHex arg must be an integer')\n  var nHex = ethUtil.toBuffer(n).toString('hex')\n  if (nHex[0] === '0') {\n    nHex = nHex.substring(1)\n  }\n  return ethUtil.addHexPrefix(nHex)\n}\n\nfunction quantityHexToInt (prefixedQuantityHex) {\n  assert(typeof prefixedQuantityHex === 'string', 'arg to quantityHexToInt must be a string')\n  var quantityHex = ethUtil.stripHexPrefix(prefixedQuantityHex)\n  var isEven = quantityHex.length % 2 === 0\n  if (!isEven) {\n    quantityHex = '0' + quantityHex\n  }\n  var buf = Buffer.from(quantityHex, 'hex')\n  return ethUtil.bufferToInt(buf)\n}\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP,GAAiB;EACfC,mBAAmB,EAAEA,mBADN;EAEfC,gBAAgB,EAAEA,gBAFH;EAGfC,gBAAgB,EAAEA;AAHH,CAAjB;AAMA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASF,mBAAT,CAA8BG,MAA9B,EAAsC;EACpC;EACA,IAAIA,MAAM,CAACC,MAAP,KAAkB,CAAlB,IAAuBD,MAAM,CAAC,CAAD,CAAN,KAAc,CAAzC,EAA4C;IAC1C,OAAO,KAAP;EACD;;EACDA,MAAM,GAAGR,OAAO,CAACU,QAAR,CAAiBF,MAAjB,CAAT;EACA,MAAMG,GAAG,GAAGH,MAAM,CAACI,QAAP,CAAgB,KAAhB,CAAZ;EACA,MAAMC,OAAO,GAAGb,OAAO,CAACc,KAAR,CAAcH,GAAd,CAAhB;EACA,OAAOX,OAAO,CAACe,YAAR,CAAqBF,OAArB,CAAP;AACD;;AAED,SAASP,gBAAT,CAA2BU,CAA3B,EAA8B;EAC5Bd,MAAM,CAAC,OAAOc,CAAP,KAAa,QAAb,IAAyBA,CAAC,KAAKC,IAAI,CAACC,KAAL,CAAWF,CAAX,CAAhC,EAA+C,yCAA/C,CAAN;EACA,IAAIG,IAAI,GAAGnB,OAAO,CAACU,QAAR,CAAiBM,CAAjB,EAAoBJ,QAApB,CAA6B,KAA7B,CAAX;;EACA,IAAIO,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;IACnBA,IAAI,GAAGA,IAAI,CAACC,SAAL,CAAe,CAAf,CAAP;EACD;;EACD,OAAOpB,OAAO,CAACe,YAAR,CAAqBI,IAArB,CAAP;AACD;;AAED,SAASZ,gBAAT,CAA2Bc,mBAA3B,EAAgD;EAC9CnB,MAAM,CAAC,OAAOmB,mBAAP,KAA+B,QAAhC,EAA0C,0CAA1C,CAAN;EACA,IAAIC,WAAW,GAAGtB,OAAO,CAACuB,cAAR,CAAuBF,mBAAvB,CAAlB;EACA,IAAIG,MAAM,GAAGF,WAAW,CAACb,MAAZ,GAAqB,CAArB,KAA2B,CAAxC;;EACA,IAAI,CAACe,MAAL,EAAa;IACXF,WAAW,GAAG,MAAMA,WAApB;EACD;;EACD,IAAIG,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYL,WAAZ,EAAyB,KAAzB,CAAV;EACA,OAAOtB,OAAO,CAAC4B,WAAR,CAAoBH,GAApB,CAAP;AACD"},"metadata":{},"sourceType":"script"}