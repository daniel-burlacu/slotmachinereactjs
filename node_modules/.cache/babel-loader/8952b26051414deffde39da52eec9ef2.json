{"ast":null,"code":"import _defineProperty from \"F:/Games/slotmachinereact/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"F:/Games/slotmachinereact/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useRef as e, useEffect as n, useLayoutEffect as t } from \"react\";\nimport { Subject as r } from \"rxjs\";\nimport o from \"screenfull\";\nimport { jsx as i } from \"react/jsx-runtime\";\nimport { useSpring as s, animated as u } from \"react-spring\";\n\nfunction c() {\n  var t = e(new r());\n  return {\n    useListenToCustomEvent: function useListenToCustomEvent(e) {\n      n(function () {\n        var n = t.current.subscribe(e);\n        return function () {\n          return n.unsubscribe();\n        };\n      }, [e]);\n    },\n    emitObservable: function emitObservable(e) {\n      t.current.next(e);\n    }\n  };\n}\n\nvar l = \"undefined\" != typeof window ? t : n;\n\nfunction f(n) {\n  var t = e(!1);\n  l(function () {\n    if (!t.current) {\n      var _e = n();\n\n      return t.current = !0, function () {\n        _e && _e();\n      };\n    }\n  }, []);\n}\n\nfunction a(_ref) {\n  var n = _ref.mainCarouselWrapperRef,\n      t = _ref.emitObservable,\n      r = _ref.handleResize;\n  var i = e(!1);\n\n  function s(e) {\n    i.current = e;\n  }\n\n  return f(function () {\n    function e() {\n      document.fullscreenElement && (s(!0), t({\n        eventName: \"onFullscreenChange\",\n        isFullscreen: !0\n      }), r && r()), document.fullscreenElement || (s(!1), t({\n        eventName: \"onFullscreenChange\",\n        isFullscreen: !1\n      }), r && r());\n    }\n\n    if (o.isEnabled) return o.on(\"change\", e), function () {\n      o.isEnabled && o.off(\"change\", e);\n    };\n  }), {\n    enterFullscreen: function enterFullscreen(e) {\n      o.isEnabled && o.request(e || n.current);\n    },\n    exitFullscreen: function exitFullscreen() {\n      o.isEnabled && o.exit();\n    },\n    getIsFullscreen: function getIsFullscreen() {\n      return i.current;\n    }\n  };\n}\n\nfunction m(_ref2) {\n  var n = _ref2.items,\n      t = _ref2.withThumbs,\n      _ref2$thumbsSlideAxis = _ref2.thumbsSlideAxis,\n      r = _ref2$thumbsSlideAxis === void 0 ? \"x\" : _ref2$thumbsSlideAxis,\n      o = _ref2.springConfig,\n      c = _ref2.prepareThumbsData,\n      _ref2$getFluidWrapper = _ref2.getFluidWrapperScrollValue,\n      l = _ref2$getFluidWrapper === void 0 ? function () {\n    return 0;\n  } : _ref2$getFluidWrapper,\n      _ref2$getSlideValue = _ref2.getSlideValue,\n      a = _ref2$getSlideValue === void 0 ? function () {\n    return 0;\n  } : _ref2$getSlideValue,\n      m = _ref2.slideType;\n\n  var h = e(null),\n      _s = s(function () {\n    return {\n      x: 0,\n      y: 0,\n      config: o,\n      onChange: function onChange(_ref3) {\n        var e = _ref3.value;\n        h.current && \"fluid\" === m && (h.current[\"x\" === r ? \"scrollLeft\" : \"scrollTop\"] = Math.abs(e[r]));\n      }\n    };\n  }),\n      _s2 = _slicedToArray(_s, 2),\n      p = _s2[0],\n      d = _s2[1];\n\n  function b() {\n    return h.current[\"x\" === r ? \"scrollLeft\" : \"scrollTop\"];\n  }\n\n  function g() {\n    var e;\n    return Math.round(Number(null === (e = h.current) || void 0 === e ? void 0 : e[\"x\" === r ? \"scrollWidth\" : \"scrollHeight\"]) - h.current.getBoundingClientRect()[\"x\" === r ? \"width\" : \"height\"]);\n  }\n\n  function x() {\n    var e = Math.round(l() / a());\n    return g() / e;\n  }\n\n  f(function () {\n    if (t && !h.current) throw new Error(\"The thumbs wrapper is not defined. If you've passed a Functional component, be sure to wrap your component in forwardRef.\");\n  });\n  return {\n    thumbsFragment: t ? i(u.div, Object.assign({\n      ref: h,\n      className: \"use-spring-carousel-thumbs-wrapper\",\n      onWheel: function onWheel() {\n        p[r].stop();\n      },\n      style: Object.assign({\n        display: \"flex\",\n        flex: 1,\n        position: \"relative\",\n        width: \"100%\",\n        height: \"100%\",\n        flexDirection: \"x\" === r ? \"row\" : \"column\"\n      }, \"x\" === r ? {\n        overflowX: \"auto\"\n      } : {\n        overflowY: \"auto\",\n        maxHeight: \"100%\"\n      })\n    }, {\n      children: function () {\n        function e(e) {\n          return e.map(function (e) {\n            return {\n              id: e.id,\n              renderThumb: e.renderThumb\n            };\n          });\n        }\n\n        return c ? c(e(n)) : e(n);\n      }().map(function (_ref4) {\n        var e = _ref4.id,\n            n = _ref4.renderThumb;\n        var t = \"thumb-\".concat(e);\n        return i(\"div\", Object.assign({\n          id: t,\n          className: \"thumb-item\"\n        }, {\n          children: n\n        }), t);\n      })\n    })) : null,\n    handleThumbsScroll: function handleThumbsScroll(e, t) {\n      if (\"fluid\" === m) {\n        var _e2 = g();\n\n        if (\"next\" === t) {\n          var _n = b() + x();\n\n          d.start({\n            from: _defineProperty({}, r, b()),\n            to: _defineProperty({}, r, _n > _e2 ? _e2 : _n)\n          });\n        }\n\n        if (\"prev\" === t) {\n          var _e3 = b() - x();\n\n          d.start({\n            from: _defineProperty({}, r, b()),\n            to: _defineProperty({}, r, _e3 < 0 ? 0 : _e3)\n          });\n        }\n      } else {\n        var _o = h.current.querySelector(\"#thumb-\".concat(n[e].id));\n\n        if (_o) {\n          var _i = h.current,\n              _s3 = \"x\" === r ? \"offsetWidth\" : \"offsetHeight\",\n              _u = \"x\" === r ? \"scrollLeft\" : \"scrollTop\",\n              _c = function (_ref5) {\n            var e = _ref5.thumbNode,\n                n = _ref5.offsetDirection,\n                t = _ref5.offsetDimension;\n            return e[n] + e[t] / 2;\n          }({\n            thumbNode: _o,\n            offsetDimension: _s3,\n            offsetDirection: \"x\" === r ? \"offsetLeft\" : \"offsetTop\"\n          }),\n              _l = function (_ref6) {\n            var e = _ref6.thumbWrapper,\n                n = _ref6.offsetDimension;\n            return e[n] / 2;\n          }({\n            thumbWrapper: _i,\n            offsetDimension: _s3\n          }),\n              _f = function (_ref7) {\n            var e = _ref7.thumbWrapper,\n                n = _ref7.scrollDirection;\n            return e[n];\n          }({\n            thumbWrapper: _i,\n            scrollDirection: _u\n          }),\n              _a = function (_ref8) {\n            var t = _ref8.thumbWrapper,\n                o = _ref8.thumbOffsetPosition,\n                i = _ref8.thumbScrollDimension,\n                s = _ref8.offsetDimension;\n            var u = \"x\" === r ? \"scrollWidth\" : \"scrollHeight\";\n            return e === n.length - 1 || o - i > t[u] - t[s] ? t[u] - t[s] : 0 === e ? 0 : o - i;\n          }({\n            thumbWrapper: _i,\n            thumbOffsetPosition: _c,\n            thumbScrollDimension: _l,\n            offsetDimension: _s3\n          });\n\n          d.start({\n            from: _defineProperty({}, r, _f),\n            to: _defineProperty({}, r, \"prev\" === t && _a < 0 ? 0 : _a),\n            onChange: function onChange(_ref9) {\n              var e = _ref9.value;\n              \"x\" === r ? h.current.scrollLeft = e.x : h.current.scrollTop = e.y;\n            }\n          });\n        }\n      }\n    }\n  };\n}\n\nexport { c as a, a as b, m as c, f as d, l as u };","map":{"version":3,"mappings":"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","names":["useCustomEventsModule","eventsObserverRef","useRef","Subject","useListenToCustomEvent","fn","useEffect","subscribe","current","unsubscribe","emitObservable","data","next","useIsomorphicLayoutEffect","window","useLayoutEffect","useIsomorphicMount","callback","isMounted","clean","useFullscreenModule","handleResize","mainCarouselWrapperRef","isFullscreen","setIsFullscreen","_isFullscreen","handleFullscreenChange","document","fullscreenElement","eventName","screenfull","isEnabled","on","off","enterFullscreen","elementRef","request","exitFullscreen","exit","getIsFullscreen","useThumbsModule","slideType","items","withThumbs","thumbsSlideAxis","springConfig","prepareThumbsData","getFluidWrapperScrollValue","getSlideValue","internalThumbsWrapperRef","useSpring","x","y","config","onChange","value","Math","abs","thumbListStyles","setThumbListStyles","getCurrentThumbScrollValue","getThumbsTotalScrollableValue","round","Number","getBoundingClientRect","getThumbSlideValue","thumbSlideTotal","Error","thumbsFragment","_jsx","animated","div","ref","className","onWheel","stop","style","display","flex","position","width","height","flexDirection","overflowX","overflowY","maxHeight","children","getPreparedItems","_items","map","i","id","renderThumb","handlePrepareThumbsData","thumbId","handleThumbsScroll","activeItem","actionType","totalScrollableValue","nextValue","start","from","to","thumbNode","querySelector","thumbWrapper","offsetDimension","scrollDirection","thumbOffsetPosition","offsetDirection","getThumbOffsetPosition","thumbScrollDimension","getThumbScrollDimension","fromValue","getScrollFromValue","toValue","scrollDimensionProperty","length","getScrollToValue","scrollLeft","scrollTop"],"sources":["F:\\Games\\slotmachinereact\\node_modules\\react-spring-carousel\\src\\modules\\useCustomEventsModule.tsx","F:\\Games\\slotmachinereact\\node_modules\\react-spring-carousel\\src\\utils.ts","F:\\Games\\slotmachinereact\\node_modules\\react-spring-carousel\\src\\modules\\useFullscreenModule.tsx","F:\\Games\\slotmachinereact\\node_modules\\react-spring-carousel\\src\\modules\\useThumbsModule.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\nimport { Subject } from 'rxjs'\nimport {\n  UseSpringCarouselEventsObservableProps,\n  UseTransitionCarouselEventsObservableProps,\n  ObservableCallbackFn,\n  EmitObservableFn,\n} from '../types'\n\nexport function useCustomEventsModule<T>() {\n  const eventsObserverRef = useRef(\n    new Subject<\n      T extends 'use-spring'\n        ? UseSpringCarouselEventsObservableProps\n        : UseTransitionCarouselEventsObservableProps\n    >(),\n  )\n\n  function useListenToCustomEvent(fn: ObservableCallbackFn<T>) {\n    useEffect(() => {\n      const subscribe = eventsObserverRef.current.subscribe(fn)\n      return () => subscribe.unsubscribe()\n    }, [fn])\n  }\n\n  const emitObservable: EmitObservableFn<T> = data => {\n    eventsObserverRef.current.next(data)\n  }\n\n  return {\n    useListenToCustomEvent,\n    emitObservable,\n  }\n}\n","import { useRef, useLayoutEffect, useEffect } from 'react'\n\ntype Callback = () => void | (() => void)\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect\n\nfunction useIsomorphicMount(callback: Callback) {\n  const isMounted = useRef(false)\n\n  useIsomorphicLayoutEffect(() => {\n    if (!isMounted.current) {\n      const clean = callback()\n      isMounted.current = true\n\n      return () => {\n        clean && clean()\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n}\n\nexport { useIsomorphicLayoutEffect, useIsomorphicMount }\n","import { useRef, MutableRefObject } from 'react'\nimport screenfull from 'screenfull'\nimport { EmitObservableFn } from '../types'\nimport { useIsomorphicMount } from '../utils'\n\ntype FullscreenModule<T> = {\n  mainCarouselWrapperRef: MutableRefObject<HTMLDivElement | null>\n  emitObservable: EmitObservableFn<T>\n  handleResize?(): void\n}\n\nexport function useFullscreenModule<T>({\n  mainCarouselWrapperRef,\n  emitObservable,\n  handleResize,\n}: FullscreenModule<T>) {\n  const isFullscreen = useRef(false)\n\n  useIsomorphicMount(() => {\n    function handleFullscreenChange() {\n      if (document.fullscreenElement) {\n        setIsFullscreen(true)\n        emitObservable({\n          eventName: 'onFullscreenChange',\n          isFullscreen: true,\n        })\n\n        handleResize && handleResize()\n      }\n\n      if (!document.fullscreenElement) {\n        setIsFullscreen(false)\n        emitObservable({\n          eventName: 'onFullscreenChange',\n          isFullscreen: false,\n        })\n        handleResize && handleResize()\n      }\n    }\n\n    if (screenfull.isEnabled) {\n      screenfull.on('change', handleFullscreenChange)\n      return () => {\n        if (screenfull.isEnabled) {\n          screenfull.off('change', handleFullscreenChange)\n        }\n      }\n    }\n  })\n\n  function setIsFullscreen(_isFullscreen: boolean) {\n    isFullscreen.current = _isFullscreen\n  }\n\n  function getIsFullscreen() {\n    return isFullscreen.current\n  }\n\n  function enterFullscreen(elementRef?: HTMLElement) {\n    if (screenfull.isEnabled) {\n      screenfull.request((elementRef || mainCarouselWrapperRef.current) as Element)\n    }\n  }\n\n  function exitFullscreen() {\n    screenfull.isEnabled && screenfull.exit()\n  }\n\n  return {\n    enterFullscreen,\n    exitFullscreen,\n    getIsFullscreen,\n  }\n}\n","import { useRef } from 'react'\nimport { useSpring, SpringConfig, animated } from 'react-spring'\nimport { useIsomorphicMount } from 'src/utils'\nimport { UseSpringCarouselProps, SlideActionType } from '../types'\nimport { ReactSpringCarouselItemWithThumbs } from '../types/useSpringCarousel'\nimport { PrepareThumbsData } from '../types/index'\n\ntype OffsetDimension = 'offsetWidth' | 'offsetHeight'\ntype OffsetDirection = 'offsetLeft' | 'offsetTop'\ntype ScrollDirection = 'scrollLeft' | 'scrollTop'\n\ntype Props = {\n  items: ReactSpringCarouselItemWithThumbs[]\n  withThumbs: boolean\n  slideType: UseSpringCarouselProps['slideType']\n  thumbsSlideAxis: UseSpringCarouselProps['thumbsSlideAxis']\n  springConfig: SpringConfig\n  prepareThumbsData?: UseSpringCarouselProps['prepareThumbsData']\n  getFluidWrapperScrollValue?(): number\n  getSlideValue?(): number\n}\n\nexport function useThumbsModule({\n  items,\n  withThumbs,\n  thumbsSlideAxis = 'x',\n  springConfig,\n  prepareThumbsData,\n  getFluidWrapperScrollValue = () => 0,\n  getSlideValue = () => 0,\n  slideType,\n}: Props) {\n  const internalThumbsWrapperRef = useRef<HTMLDivElement | null>(null)\n  const [thumbListStyles, setThumbListStyles] = useSpring(() => ({\n    x: 0,\n    y: 0,\n    config: springConfig,\n    onChange: ({ value }) => {\n      if (internalThumbsWrapperRef.current && slideType === 'fluid') {\n        internalThumbsWrapperRef.current[\n          thumbsSlideAxis === 'x' ? 'scrollLeft' : 'scrollTop'\n        ] = Math.abs(value[thumbsSlideAxis])\n      }\n    },\n  }))\n\n  useIsomorphicMount(() => {\n    if (withThumbs && !internalThumbsWrapperRef.current) {\n      throw new Error(\n        \"The thumbs wrapper is not defined. If you've passed a Functional component, be sure to wrap your component in forwardRef.\",\n      )\n    }\n  })\n\n  function getCurrentThumbScrollValue() {\n    return internalThumbsWrapperRef.current![\n      thumbsSlideAxis === 'x' ? 'scrollLeft' : 'scrollTop'\n    ]\n  }\n  function getThumbsTotalScrollableValue() {\n    return Math.round(\n      Number(\n        internalThumbsWrapperRef.current?.[\n          thumbsSlideAxis === 'x' ? 'scrollWidth' : 'scrollHeight'\n        ],\n      ) -\n        internalThumbsWrapperRef.current!.getBoundingClientRect()[\n          thumbsSlideAxis === 'x' ? 'width' : 'height'\n        ],\n    )\n  }\n\n  function getThumbSlideValue() {\n    const thumbSlideTotal = Math.round(getFluidWrapperScrollValue() / getSlideValue())\n    const totalScrollableValue = getThumbsTotalScrollableValue()\n    return totalScrollableValue / thumbSlideTotal\n  }\n\n  function handleThumbsScroll(activeItem: number, actionType?: SlideActionType) {\n    if (slideType === 'fluid') {\n      const totalScrollableValue = getThumbsTotalScrollableValue()\n\n      if (actionType === 'next') {\n        const nextValue = getCurrentThumbScrollValue() + getThumbSlideValue()\n        setThumbListStyles.start({\n          from: {\n            [thumbsSlideAxis]: getCurrentThumbScrollValue(),\n          },\n          to: {\n            [thumbsSlideAxis]:\n              nextValue > totalScrollableValue ? totalScrollableValue : nextValue,\n          },\n        })\n      }\n      if (actionType === 'prev') {\n        const nextValue = getCurrentThumbScrollValue() - getThumbSlideValue()\n        setThumbListStyles.start({\n          from: {\n            [thumbsSlideAxis]: getCurrentThumbScrollValue(),\n          },\n          to: {\n            [thumbsSlideAxis]: nextValue < 0 ? 0 : nextValue,\n          },\n        })\n      }\n    } else {\n      function getOffsetDirection() {\n        return thumbsSlideAxis === 'x' ? 'offsetLeft' : 'offsetTop'\n      }\n      function getOffsetDimension() {\n        return thumbsSlideAxis === 'x' ? 'offsetWidth' : 'offsetHeight'\n      }\n      function getScrollDirecton() {\n        return thumbsSlideAxis === 'x' ? 'scrollLeft' : 'scrollTop'\n      }\n      function getThumbNode() {\n        return internalThumbsWrapperRef.current!.querySelector(\n          `#thumb-${items[activeItem].id}`,\n        ) as HTMLElement\n      }\n      function getThumbOffsetPosition({\n        thumbNode,\n        offsetDirection,\n        offsetDimension,\n      }: {\n        thumbNode: HTMLElement\n        offsetDirection: OffsetDirection\n        offsetDimension: OffsetDimension\n      }) {\n        return thumbNode[offsetDirection] + thumbNode[offsetDimension] / 2\n      }\n      function getThumbScrollDimension({\n        thumbWrapper,\n        offsetDimension,\n      }: {\n        thumbWrapper: HTMLDivElement\n        offsetDimension: OffsetDimension\n      }) {\n        return thumbWrapper[offsetDimension] / 2\n      }\n      function getScrollFromValue({\n        thumbWrapper,\n        scrollDirection,\n      }: {\n        thumbWrapper: HTMLDivElement\n        scrollDirection: ScrollDirection\n      }) {\n        return thumbWrapper[scrollDirection]\n      }\n      function getScrollToValue({\n        thumbWrapper,\n        thumbOffsetPosition,\n        thumbScrollDimension,\n        offsetDimension,\n      }: {\n        thumbWrapper: HTMLDivElement\n        thumbOffsetPosition: number\n        thumbScrollDimension: number\n        offsetDimension: OffsetDimension\n      }) {\n        const scrollDimensionProperty =\n          thumbsSlideAxis === 'x' ? 'scrollWidth' : 'scrollHeight'\n\n        if (\n          activeItem === items.length - 1 ||\n          thumbOffsetPosition - thumbScrollDimension >\n            thumbWrapper[scrollDimensionProperty] - thumbWrapper[offsetDimension]\n        ) {\n          return thumbWrapper[scrollDimensionProperty] - thumbWrapper[offsetDimension]\n        }\n        if (activeItem === 0) {\n          return 0\n        }\n\n        return thumbOffsetPosition - thumbScrollDimension\n      }\n\n      const thumbNode = getThumbNode()\n\n      if (thumbNode) {\n        const thumbWrapper = internalThumbsWrapperRef.current!\n        const offsetDirection = getOffsetDirection()\n        const offsetDimension = getOffsetDimension()\n        const scrollDirection = getScrollDirecton()\n        const thumbOffsetPosition = getThumbOffsetPosition({\n          thumbNode,\n          offsetDimension,\n          offsetDirection,\n        })\n        const thumbScrollDimension = getThumbScrollDimension({\n          thumbWrapper,\n          offsetDimension,\n        })\n\n        const fromValue = getScrollFromValue({\n          thumbWrapper,\n          scrollDirection,\n        })\n        const toValue = getScrollToValue({\n          thumbWrapper,\n          thumbOffsetPosition,\n          thumbScrollDimension,\n          offsetDimension,\n        })\n\n        setThumbListStyles.start({\n          from: {\n            [thumbsSlideAxis]: fromValue,\n          },\n          to: {\n            [thumbsSlideAxis]: actionType === 'prev' && toValue < 0 ? 0 : toValue,\n          },\n          onChange: ({ value }) => {\n            if (thumbsSlideAxis === 'x') {\n              internalThumbsWrapperRef!.current!.scrollLeft = value.x\n            } else {\n              internalThumbsWrapperRef!.current!.scrollTop = value.y\n            }\n          },\n        })\n      }\n    }\n  }\n  function handlePrepareThumbsData() {\n    function getPreparedItems(\n      _items: ReturnType<PrepareThumbsData>,\n    ): ReturnType<PrepareThumbsData> {\n      return _items.map(i => ({\n        id: i.id,\n        renderThumb: i.renderThumb,\n      }))\n    }\n\n    if (prepareThumbsData) {\n      return prepareThumbsData(getPreparedItems(items))\n    }\n    return getPreparedItems(items)\n  }\n\n  const thumbsFragment = withThumbs ? (\n    <animated.div\n      ref={internalThumbsWrapperRef}\n      className=\"use-spring-carousel-thumbs-wrapper\"\n      onWheel={() => {\n        thumbListStyles[thumbsSlideAxis].stop()\n      }}\n      style={{\n        display: 'flex',\n        flex: 1,\n        position: 'relative',\n        width: '100%',\n        height: '100%',\n        flexDirection: thumbsSlideAxis === 'x' ? 'row' : 'column',\n        ...(thumbsSlideAxis === 'x'\n          ? { overflowX: 'auto' }\n          : {\n              overflowY: 'auto',\n              maxHeight: '100%',\n            }),\n      }}\n    >\n      {handlePrepareThumbsData().map(({ id, renderThumb }) => {\n        const thumbId = `thumb-${id}`\n        return (\n          <div key={thumbId} id={thumbId} className=\"thumb-item\">\n            {renderThumb}\n          </div>\n        )\n      })}\n    </animated.div>\n  ) : null\n\n  return {\n    thumbsFragment,\n    handleThumbsScroll,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}