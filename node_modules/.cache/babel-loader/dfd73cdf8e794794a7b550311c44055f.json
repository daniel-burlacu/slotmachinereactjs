{"ast":null,"code":"// var to = require(\"../utils/to\");\nvar Transaction = require(\"../utils/transaction\");\n\nvar Common = require(\"ethereumjs-common\").default;\n\nvar ethUtil = require(\"ethereumjs-util\");\n\nconst decode = function (json, done) {\n  const options = {\n    hash: json.hash,\n    nonce: json.nonce,\n    value: json.value,\n    to: json.to,\n    from: json.from,\n    gasLimit: json.gas || json.gasLimit,\n    gasPrice: json.gasPrice,\n    data: json.data,\n    v: json.v,\n    r: json.r,\n    s: json.s\n  };\n  const sigV = ethUtil.bufferToInt(options.v);\n  let chainId = Math.floor((sigV - 35) / 2);\n\n  if (chainId < 0) {\n    chainId = 0;\n  }\n\n  const commonOptions = {\n    name: \"ganache\",\n    chainId,\n    networkId: 1,\n    comment: \"Local test network\"\n  };\n  let hardfork = \"muirGlacier\";\n\n  if (json._options) {\n    hardfork = json._options.hardfork;\n    commonOptions.chainId = json._options.chainId;\n    commonOptions.networkId = json._options.networkId;\n  }\n\n  const common = Common.forCustomChain(\"mainnet\", // TODO needs to match chain id\n  commonOptions, hardfork); // databases generated before ganache-core@2.3.2 didn't have a `_type` and\n  // and were always fake signed. So if _type is undefined it is \"fake\" (even\n  // if we have a valid signature that can generate the tx's `from`).\n\n  const type = json._type === undefined ? Transaction.types.fake : json._type;\n  const tx = Transaction.fromJSON(options, type, common); // Commenting this out because we don't want to throw if the json.hash we\n  // put in is different that the tx.hash() calculation we now have. There\n  // may have been bug fixes to the way transactions are hashed in future\n  // versions of ganache-core, but we still want tobe able to read in\n  // transactions from previously saved databases!\n  // if (to.hex(tx.hash()) !== json.hash) {\n  //   const e = new Error(\n  //     \"DB consistency check: Decoded transaction hash \" +\n  //       \"didn't match encoded hash. Expected: \" +\n  //       json.hash +\n  //       \"; actual: \" +\n  //       to.hex(tx.hash())\n  //   );\n  //   return done(e);\n  // }\n\n  done(null, tx);\n};\n\nconst encode = function (tx, done) {\n  const encoded = tx.encode();\n  done(null, encoded);\n};\n\nmodule.exports = {\n  encode,\n  decode\n};","map":{"version":3,"names":["Transaction","require","Common","default","ethUtil","decode","json","done","options","hash","nonce","value","to","from","gasLimit","gas","gasPrice","data","v","r","s","sigV","bufferToInt","chainId","Math","floor","commonOptions","name","networkId","comment","hardfork","_options","common","forCustomChain","type","_type","undefined","types","fake","tx","fromJSON","encode","encoded","module","exports"],"sources":["F:/Games/slotmachinereact/node_modules/ganache-core/lib/database/txserializer.js"],"sourcesContent":["// var to = require(\"../utils/to\");\nvar Transaction = require(\"../utils/transaction\");\nvar Common = require(\"ethereumjs-common\").default;\nvar ethUtil = require(\"ethereumjs-util\");\n\nconst decode = function(json, done) {\n  const options = {\n    hash: json.hash,\n    nonce: json.nonce,\n    value: json.value,\n    to: json.to,\n    from: json.from,\n    gasLimit: json.gas || json.gasLimit,\n    gasPrice: json.gasPrice,\n    data: json.data,\n    v: json.v,\n    r: json.r,\n    s: json.s\n  };\n\n  const sigV = ethUtil.bufferToInt(options.v);\n  let chainId = Math.floor((sigV - 35) / 2);\n  if (chainId < 0) {\n    chainId = 0;\n  }\n\n  const commonOptions = {\n    name: \"ganache\",\n    chainId,\n    networkId: 1,\n    comment: \"Local test network\"\n  };\n\n  let hardfork = \"muirGlacier\";\n  if (json._options) {\n    hardfork = json._options.hardfork;\n    commonOptions.chainId = json._options.chainId;\n    commonOptions.networkId = json._options.networkId;\n  }\n\n  const common = Common.forCustomChain(\n    \"mainnet\", // TODO needs to match chain id\n    commonOptions,\n    hardfork\n  );\n  // databases generated before ganache-core@2.3.2 didn't have a `_type` and\n  // and were always fake signed. So if _type is undefined it is \"fake\" (even\n  // if we have a valid signature that can generate the tx's `from`).\n  const type = json._type === undefined ? Transaction.types.fake : json._type;\n  const tx = Transaction.fromJSON(options, type, common);\n\n  // Commenting this out because we don't want to throw if the json.hash we\n  // put in is different that the tx.hash() calculation we now have. There\n  // may have been bug fixes to the way transactions are hashed in future\n  // versions of ganache-core, but we still want tobe able to read in\n  // transactions from previously saved databases!\n  // if (to.hex(tx.hash()) !== json.hash) {\n  //   const e = new Error(\n  //     \"DB consistency check: Decoded transaction hash \" +\n  //       \"didn't match encoded hash. Expected: \" +\n  //       json.hash +\n  //       \"; actual: \" +\n  //       to.hex(tx.hash())\n  //   );\n  //   return done(e);\n  // }\n\n  done(null, tx);\n};\n\nconst encode = function(tx, done) {\n  const encoded = tx.encode();\n  done(null, encoded);\n};\n\nmodule.exports = {\n  encode,\n  decode\n};\n"],"mappings":"AAAA;AACA,IAAIA,WAAW,GAAGC,OAAO,CAAC,sBAAD,CAAzB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,mBAAD,CAAP,CAA6BE,OAA1C;;AACA,IAAIC,OAAO,GAAGH,OAAO,CAAC,iBAAD,CAArB;;AAEA,MAAMI,MAAM,GAAG,UAASC,IAAT,EAAeC,IAAf,EAAqB;EAClC,MAAMC,OAAO,GAAG;IACdC,IAAI,EAAEH,IAAI,CAACG,IADG;IAEdC,KAAK,EAAEJ,IAAI,CAACI,KAFE;IAGdC,KAAK,EAAEL,IAAI,CAACK,KAHE;IAIdC,EAAE,EAAEN,IAAI,CAACM,EAJK;IAKdC,IAAI,EAAEP,IAAI,CAACO,IALG;IAMdC,QAAQ,EAAER,IAAI,CAACS,GAAL,IAAYT,IAAI,CAACQ,QANb;IAOdE,QAAQ,EAAEV,IAAI,CAACU,QAPD;IAQdC,IAAI,EAAEX,IAAI,CAACW,IARG;IASdC,CAAC,EAAEZ,IAAI,CAACY,CATM;IAUdC,CAAC,EAAEb,IAAI,CAACa,CAVM;IAWdC,CAAC,EAAEd,IAAI,CAACc;EAXM,CAAhB;EAcA,MAAMC,IAAI,GAAGjB,OAAO,CAACkB,WAAR,CAAoBd,OAAO,CAACU,CAA5B,CAAb;EACA,IAAIK,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,IAAI,GAAG,EAAR,IAAc,CAAzB,CAAd;;EACA,IAAIE,OAAO,GAAG,CAAd,EAAiB;IACfA,OAAO,GAAG,CAAV;EACD;;EAED,MAAMG,aAAa,GAAG;IACpBC,IAAI,EAAE,SADc;IAEpBJ,OAFoB;IAGpBK,SAAS,EAAE,CAHS;IAIpBC,OAAO,EAAE;EAJW,CAAtB;EAOA,IAAIC,QAAQ,GAAG,aAAf;;EACA,IAAIxB,IAAI,CAACyB,QAAT,EAAmB;IACjBD,QAAQ,GAAGxB,IAAI,CAACyB,QAAL,CAAcD,QAAzB;IACAJ,aAAa,CAACH,OAAd,GAAwBjB,IAAI,CAACyB,QAAL,CAAcR,OAAtC;IACAG,aAAa,CAACE,SAAd,GAA0BtB,IAAI,CAACyB,QAAL,CAAcH,SAAxC;EACD;;EAED,MAAMI,MAAM,GAAG9B,MAAM,CAAC+B,cAAP,CACb,SADa,EACF;EACXP,aAFa,EAGbI,QAHa,CAAf,CAnCkC,CAwClC;EACA;EACA;;EACA,MAAMI,IAAI,GAAG5B,IAAI,CAAC6B,KAAL,KAAeC,SAAf,GAA2BpC,WAAW,CAACqC,KAAZ,CAAkBC,IAA7C,GAAoDhC,IAAI,CAAC6B,KAAtE;EACA,MAAMI,EAAE,GAAGvC,WAAW,CAACwC,QAAZ,CAAqBhC,OAArB,EAA8B0B,IAA9B,EAAoCF,MAApC,CAAX,CA5CkC,CA8ClC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAzB,IAAI,CAAC,IAAD,EAAOgC,EAAP,CAAJ;AACD,CA/DD;;AAiEA,MAAME,MAAM,GAAG,UAASF,EAAT,EAAahC,IAAb,EAAmB;EAChC,MAAMmC,OAAO,GAAGH,EAAE,CAACE,MAAH,EAAhB;EACAlC,IAAI,CAAC,IAAD,EAAOmC,OAAP,CAAJ;AACD,CAHD;;AAKAC,MAAM,CAACC,OAAP,GAAiB;EACfH,MADe;EAEfpC;AAFe,CAAjB"},"metadata":{},"sourceType":"script"}