{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\Mint.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport '../assets/css/App.css';\nimport { ethers } from \"ethers\";\nimport PFPRacerNFT from '../artifacts/contracts/PFPRacerNFT.sol/abi.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Mint = () => {\n  _s();\n\n  const [mintAmount, setMintAmount] = useState(0);\n  const [leftToMint, setLeftToMint] = useState(0);\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(\"\");\n  const url = \"https://vast-ridge-99820.herokuapp.com\";\n  const contractAddr = \"0x26CD56EeeF4999E6E27030158ec038dd19B8b3cA\";\n\n  const howManyNFTsAreLeft = async () => {\n    let totalNFT = \"\";\n    let mintedNFT = \"\";\n\n    try {\n      totalNFT = await contract.getMaxSupply();\n    } catch (err) {\n      console.log(\"My getMaxSupply() error is:\" + err);\n    }\n\n    console.log(\"totalNFT IS: \" + totalNFT);\n    mintedNFT = await contract.getContractNFTBalance();\n    console.log(\"My totalNFT's in howManyNFTsAreLeft is : \" + totalNFT);\n    console.log(\"My total mintedNFT is\" + mintedNFT);\n    let nftLeftToMint = totalNFT - mintedNFT;\n    setLeftToMint(nftLeftToMint);\n    console.log(\"Total NFT's left to mint \" + nftLeftToMint);\n    return nftLeftToMint;\n  };\n\n  const insertWalletIntoDB = async () => {\n    const dataToSend = JSON.stringify({\n      \"wallet\": account,\n      \"txtype\": \"mint\",\n      \"amount\": mintAmount\n    });\n    console.log(\"My insertwalletintodb dataToSend is: \" + dataToSend);\n    const link = url + \"/api/insertWallet\";\n    await fetch(link, {\n      //  await fetch('http://localhost:3333/api/insertWallet', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: dataToSend\n    });\n  };\n\n  const handleSubmit = async () => {\n    let transaction = \"\";\n    let errorTx = false;\n    let contractPaused = await contract.paused();\n\n    if (!contractPaused) {\n      if (mintAmount > 0 && mintAmount < 1001) {\n        try {\n          const {\n            ethereum\n          } = window;\n\n          if (ethereum) {\n            let cost = await contract.cost();\n            cost = cost * mintAmount;\n            console.log(\"Price is: \" + cost);\n\n            try {\n              transaction = await contract.mint(mintAmount, {\n                value: cost\n              });\n            } catch (err) {\n              errorTx = true;\n              alert(\"Transaction failed, please try again later ! Transaction has been reverted ! \");\n            }\n\n            if (!errorTx) {\n              alert(\"Minted !! You can see transaction here:\" + \"<a href=\" + `https://mumbai.polygonscan.com/tx/${transaction.hash}` + \">Transaction</a>\"); // await axios.get(`https://mumbai.polygonscan.com/tx/${transaction.hash}`)\n              // .then(resp => {\n              //     response=resp.data;\n              //     console.log(\"My resonse data in get is: \"+response);\n              // });\n\n              insertWalletIntoDB();\n              await howManyNFTsAreLeft();\n              setMintAmount(0);\n            }\n          } else {\n            console.log(\"Ethereum object does not exist !\");\n          }\n        } catch (err) {\n          console.log(\"This is myerror\" + err);\n        }\n      } else {\n        if (mintAmount === 0) {\n          alert(\"You need to mint at least 1 NFT\");\n        } else if (mintAmount > 1000) {\n          alert(\"Holly Molly what do you wanna do ? Hold your horses and leave some for the others too!!! \");\n        } else {\n          alert(\"Number only !!!\");\n        }\n      }\n    } else {\n      alert(\"Contract is PAUSED, you can't mint at this moment, please try again later\");\n    }\n  };\n\n  const initConnection = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const newSigner = provider.getSigner();\n      setAccount(accounts[0]);\n      setContract(new ethers.Contract(contractAddr, PFPRacerNFT.abi, newSigner));\n      howManyNFTsAreLeft();\n    } else {\n      console.log(\"Please install metamask\");\n    }\n  };\n\n  useEffect(() => {\n    initConnection();\n\n    if (account !== \"\") {}\n  }, [mintAmount]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"div-form\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label-mint\",\n          children: [\"NFT's left to mint:\", /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"p-welcomeMint\",\n            children: leftToMint\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 14\n          }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: [\"Mint Amount:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: mintAmount,\n            onChange: e => setMintAmount(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label-mint\",\n          children: \"Price per/NFT is 10 Matic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"form-submit-button\",\n      onClick: () => {\n        handleSubmit(mintAmount);\n      },\n      children: \"Mint\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Mint, \"2NxL0YD5Fy3u1mh01P8EL2o2/I4=\");\n\n_c = Mint;\nexport default Mint;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"names":["React","useEffect","useState","useRef","ethers","PFPRacerNFT","Mint","mintAmount","setMintAmount","leftToMint","setLeftToMint","account","setAccount","contract","setContract","url","contractAddr","howManyNFTsAreLeft","totalNFT","mintedNFT","getMaxSupply","err","console","log","getContractNFTBalance","nftLeftToMint","insertWalletIntoDB","dataToSend","JSON","stringify","link","fetch","method","headers","body","handleSubmit","transaction","errorTx","contractPaused","paused","ethereum","window","cost","mint","value","alert","hash","initConnection","accounts","request","provider","providers","Web3Provider","newSigner","getSigner","Contract","abi","e","target"],"sources":["F:/Games/slotmachinereact/src/components/Mint.js"],"sourcesContent":["import  React, { useEffect, useState, useRef } from \"react\";\r\nimport '../assets/css/App.css';\r\nimport {ethers} from \"ethers\";\r\nimport PFPRacerNFT from '../artifacts/contracts/PFPRacerNFT.sol/abi.json';\r\n\r\nconst Mint = () =>{\r\n    const [mintAmount, setMintAmount] = useState(0);\r\n    const [leftToMint, setLeftToMint] = useState(0);\r\n    const [account, setAccount] = useState(\"\");\r\n    const [contract, setContract] = useState(\"\");\r\n    const url=\"https://vast-ridge-99820.herokuapp.com\";\r\n    const contractAddr = \"0x26CD56EeeF4999E6E27030158ec038dd19B8b3cA\";\r\n\r\n    const howManyNFTsAreLeft = async () =>{\r\n      let totalNFT=\"\";\r\n      let mintedNFT=\"\";\r\n      try{\r\n        totalNFT = await contract.getMaxSupply();\r\n        }catch(err){\r\n          console.log(\"My getMaxSupply() error is:\"+err);\r\n        }\r\n      console.log(\"totalNFT IS: \"+totalNFT);\r\n      mintedNFT= await contract.getContractNFTBalance(); \r\n      \r\n        console.log(\"My totalNFT's in howManyNFTsAreLeft is : \"+totalNFT);\r\n        console.log(\"My total mintedNFT is\"+mintedNFT);\r\n        let nftLeftToMint = totalNFT - mintedNFT;\r\n        setLeftToMint(nftLeftToMint);\r\n        console.log(\"Total NFT's left to mint \"+nftLeftToMint);\r\n        return nftLeftToMint;\r\n      }\r\n\r\n      const insertWalletIntoDB = async()=>{\r\n\r\n        const dataToSend = JSON.stringify({ \"wallet\": account,\r\n                                            \"txtype\":\"mint\",\r\n                                            \"amount\":mintAmount,\r\n                                             });\r\n       \r\n       console.log(\"My insertwalletintodb dataToSend is: \"+dataToSend);\r\n          const link = url+\"/api/insertWallet\";\r\n          await fetch(link,{\r\n      //  await fetch('http://localhost:3333/api/insertWallet', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: dataToSend\r\n        })\r\n    \r\n      }\r\n\r\nconst handleSubmit= async() =>{\r\n  let transaction = \"\";\r\n  let errorTx= false;\r\n  let contractPaused = await contract.paused();\r\n  if(!contractPaused){\r\n    if(mintAmount>0&&mintAmount<1001){\r\n        try{\r\n            const{ethereum}=window;\r\n\r\n            if(ethereum){\r\n   \r\n                let cost = await contract.cost();\r\n                cost = cost*mintAmount;\r\n                console.log(\"Price is: \"+cost);\r\n              try{\r\n                transaction = await contract.mint(mintAmount, {value: cost});\r\n              }catch(err){\r\n                errorTx=true;\r\n                alert(\"Transaction failed, please try again later ! Transaction has been reverted ! \");\r\n              }\r\n              if(!errorTx){\r\n                alert(\"Minted !! You can see transaction here:\" +\"<a href=\"+`https://mumbai.polygonscan.com/tx/${transaction.hash}`+\">Transaction</a>\");\r\n            \r\n                // await axios.get(`https://mumbai.polygonscan.com/tx/${transaction.hash}`)\r\n                // .then(resp => {\r\n                //     response=resp.data;\r\n                //     console.log(\"My resonse data in get is: \"+response);\r\n                // });\r\n                insertWalletIntoDB();\r\n                await howManyNFTsAreLeft();\r\n                setMintAmount(0);\r\n              }\r\n             } else{\r\n                console.log(\"Ethereum object does not exist !\");\r\n             }   \r\n        }\r\n        catch(err){\r\n            console.log(\"This is myerror\"+err);\r\n        }\r\n     \r\n\r\n    }else{\r\n      if(mintAmount===0){\r\n        alert(\"You need to mint at least 1 NFT\");\r\n      }else if(mintAmount >1000){\r\n        alert(\"Holly Molly what do you wanna do ? Hold your horses and leave some for the others too!!! \");\r\n      }else{\r\n        alert(\"Number only !!!\")\r\n      }\r\n    }\r\n\r\n}else{\r\n  alert(\"Contract is PAUSED, you can't mint at this moment, please try again later\");\r\n}\r\n}\r\n\r\nconst initConnection = async () =>{\r\n  if(typeof window.ethereum !== \"undefined\"){\r\n    const accounts = await window.ethereum.request({\r\n      method: \"eth_requestAccounts\",\r\n    });\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const newSigner = provider.getSigner();\r\n    setAccount(accounts[0]);\r\n    setContract(\r\n      new ethers.Contract(\r\n        contractAddr,\r\n        PFPRacerNFT.abi,\r\n        newSigner\r\n      )\r\n    )\r\n    howManyNFTsAreLeft();\r\n  }else{\r\n    console.log(\"Please install metamask\");\r\n  }\r\n}\r\n    useEffect(()=>{\r\n      initConnection();\r\n      if(account!==\"\"){\r\n        \r\n      }\r\n    },[mintAmount])\r\n\r\n      return (\r\n        <>\r\n        <div className=\"div-form\">\r\n        <form className=\"form\">\r\n        <label className=\"label-mint\">\r\n             NFT's left to mint:\r\n             <p className=\"p-welcomeMint\">{leftToMint}</p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n        </label>\r\n          <label className=\"form-label\">\r\n            Mint Amount:\r\n            <input\r\n              type=\"text\"\r\n              value={mintAmount}\r\n              onChange={e => setMintAmount(e.target.value)}\r\n            />\r\n          </label>\r\n          <label className=\"label-mint\">\r\n            Price per/NFT is 10 Matic\r\n            </label>\r\n        </form>\r\n        </div>\r\n     <button className=\"form-submit-button\" onClick={()=>{handleSubmit(mintAmount)}}>Mint</button>\r\n     </>\r\n      );\r\n}\r\n\r\nexport default Mint;"],"mappings":"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"},"metadata":{},"sourceType":"module"}