{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst fs = __importStar(require(\"fs\"));\n\nconst util_1 = require(\"util\");\n\nconst readFileAsync = util_1.promisify(fs.readFile);\nconst debug = debug_1.default(\"resolverengine:fsparser\");\n\nfunction FsParser() {\n  return path => __awaiter(this, void 0, void 0, function* () {\n    try {\n      return (yield readFileAsync(path, \"utf-8\")).toString();\n    } catch (e) {\n      debug(`Error returned when trying to parse \"${path}\", returning null`, e);\n      return null;\n    }\n  });\n}\n\nexports.FsParser = FsParser;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AAEA,MAAMA,aAAa,GAAGC,iBAAUC,EAAE,CAACC,QAAb,CAAtB;AAEA,MAAMC,KAAK,GAAGC,gBAAM,yBAAN,CAAd;;AAEA,SAAgBC,QAAhB,GAAwB;EACtB,OAAcC,IAAP,IAA+CC;IACpD,IAAI;MACF,OAAO,CAAC,MAAMR,aAAa,CAACO,IAAD,EAAO,OAAP,CAApB,EAAqCE,QAArC,EAAP;IACD,CAFD,CAEE,OAAOC,CAAP,EAAU;MACVN,KAAK,CAAC,wCAAwCG,IAAI,mBAA7C,EAAkEG,CAAlE,CAAL;MACA,OAAO,IAAP;IACD;EACF,CAPqD,CAAtD;AAQD;;AATDC","names":["readFileAsync","util_1","fs","readFile","debug","debug_1","FsParser","path","__awaiter","toString","e","exports"],"sources":["F:\\Games\\slotmachinereact\\node_modules\\@resolver-engine\\fs\\src\\parsers\\fsparser.ts"],"sourcesContent":["import { SubParser } from \"@resolver-engine/core\";\nimport Debug from \"debug\";\nimport * as fs from \"fs\";\nimport { promisify } from \"util\";\n\nconst readFileAsync = promisify(fs.readFile);\n\nconst debug = Debug(\"resolverengine:fsparser\");\n\nexport function FsParser(): SubParser<string> {\n  return async (path: string): Promise<string | null> => {\n    try {\n      return (await readFileAsync(path, \"utf-8\")).toString();\n    } catch (e) {\n      debug(`Error returned when trying to parse \"${path}\", returning null`, e);\n      return null;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script"}