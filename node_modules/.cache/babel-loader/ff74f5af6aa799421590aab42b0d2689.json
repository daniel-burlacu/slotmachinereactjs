{"ast":null,"code":"const utils = require(\"ethereumjs-util\");\n\nmodule.exports = {\n  buffer: function (val) {\n    let data;\n\n    if (typeof val === \"string\") {\n      // strings need to be treated as hex, so we have to prep them:\n      data = val.indexOf(\"0x\") === 0 ? val.slice(2) : val;\n      data = data.length % 2 === 1 ? `0${data}` : data;\n      data = Buffer.from(data, \"hex\");\n    } else if (Buffer.isBuffer(val)) {\n      // no need to copy the Buffer to a new Buffer, so we just use the Buffer\n      // exactly as it was given to us:\n      data = val;\n    } else {\n      // all other types get the Buffer treatment and built-in type checking:\n      data = Buffer.from(val);\n    }\n\n    return data;\n  },\n  // Note: Do not use to.hex() when you really mean utils.addHexPrefix().\n  hex: function (val) {\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") === 0) {\n        return val.trim();\n      } else {\n        val = new utils.BN(val);\n      }\n    }\n\n    if (typeof val === \"boolean\") {\n      val = val ? 1 : 0;\n    }\n\n    if (typeof val === \"number\") {\n      val = utils.intToHex(val);\n    } else if (val == null) {\n      return \"0x\";\n    } else if (typeof val === \"object\") {\n      // Support Buffer, BigInteger and BN library\n      // Hint: BN is used in ethereumjs\n      val = val.toString(\"hex\");\n    }\n\n    return utils.addHexPrefix(val);\n  },\n  _rpcQuantityHexString: function (val) {\n    val = this.hex(val); // remove all zeroes leading zeros, `0+`, from the hex-encoded value\n    // This doesn't remove the last 0 which would be captured by `(.+?)`\n\n    val = val.replace(/^(?:0x)(?:0+(.+?))?$/, \"0x$1\");\n    return val;\n  },\n  rpcQuantityHexString: function (val) {\n    val = this._rpcQuantityHexString(val); // RPC Quantities must represent `0` as `0x0`\n\n    if (val === \"0x\") {\n      val = \"0x0\";\n    }\n\n    return val;\n  },\n  rpcQuantityBuffer: function (val) {\n    val = this._rpcQuantityHexString(val);\n\n    if (val === \"0x0\") {\n      val = \"0x\";\n    }\n\n    return utils.rlp.encode(val);\n  },\n  rpcDataHexString: function (val, length) {\n    if (typeof length === \"number\") {\n      val = this.hex(val).replace(\"0x\", \"\");\n      val = new Array(length - val.length).fill(\"0\").join(\"\") + val;\n    } else {\n      if (val.length === 0) {\n        return \"0x\";\n      }\n\n      val = this.hex(val).replace(\"0x\", \"\");\n\n      if (val.length % 2 !== 0) {\n        val = \"0\" + val;\n      }\n    }\n\n    return \"0x\" + val;\n  },\n  nullableRpcDataHexString: function (val, length) {\n    if (val === null) {\n      return null;\n    } else {\n      const rpcDataHex = this.rpcDataHexString(val, length);\n      return rpcDataHex === \"0x\" ? null : rpcDataHex;\n    }\n  },\n  nullableRpcQuantityHexString: function (val, length) {\n    if (val === null) {\n      return null;\n    } else {\n      const rpcQuantityHex = this._rpcQuantityHexString(val, length);\n\n      return rpcQuantityHex === \"0x\" ? null : rpcQuantityHex;\n    }\n  },\n  hexWithZeroPadding: function (val) {\n    val = this.hex(val);\n    const digits = val.replace(\"0x\", \"\");\n\n    if (digits.length & 0x1) {\n      return \"0x0\" + digits;\n    }\n\n    return val;\n  },\n  number: function (val) {\n    if (typeof val === \"number\") {\n      return val;\n    }\n\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") !== 0) {\n        return parseInt(val, 10);\n      }\n    }\n\n    var bufVal = utils.toBuffer(val);\n    return utils.bufferToInt(bufVal);\n  },\n  rpcError: function (id, code, msg) {\n    return JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: id,\n      error: {\n        code: code,\n        message: msg\n      }\n    });\n  }\n};","map":{"version":3,"names":["utils","require","module","exports","buffer","val","data","indexOf","slice","length","Buffer","from","isBuffer","hex","trim","BN","intToHex","toString","addHexPrefix","_rpcQuantityHexString","replace","rpcQuantityHexString","rpcQuantityBuffer","rlp","encode","rpcDataHexString","Array","fill","join","nullableRpcDataHexString","rpcDataHex","nullableRpcQuantityHexString","rpcQuantityHex","hexWithZeroPadding","digits","number","parseInt","bufVal","toBuffer","bufferToInt","rpcError","id","code","msg","JSON","stringify","jsonrpc","error","message"],"sources":["F:/Games/slotmachinereact/node_modules/ganache-core/lib/utils/to.js"],"sourcesContent":["const utils = require(\"ethereumjs-util\");\n\nmodule.exports = {\n  buffer: function(val) {\n    let data;\n    if (typeof val === \"string\") {\n      // strings need to be treated as hex, so we have to prep them:\n      data = val.indexOf(\"0x\") === 0 ? val.slice(2) : val;\n      data = data.length % 2 === 1 ? `0${data}` : data;\n      data = Buffer.from(data, \"hex\");\n    } else if (Buffer.isBuffer(val)) {\n      // no need to copy the Buffer to a new Buffer, so we just use the Buffer\n      // exactly as it was given to us:\n      data = val;\n    } else {\n      // all other types get the Buffer treatment and built-in type checking:\n      data = Buffer.from(val);\n    }\n    return data;\n  },\n  // Note: Do not use to.hex() when you really mean utils.addHexPrefix().\n  hex: function(val) {\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") === 0) {\n        return val.trim();\n      } else {\n        val = new utils.BN(val);\n      }\n    }\n\n    if (typeof val === \"boolean\") {\n      val = val ? 1 : 0;\n    }\n\n    if (typeof val === \"number\") {\n      val = utils.intToHex(val);\n    } else if (val == null) {\n      return \"0x\";\n    } else if (typeof val === \"object\") {\n      // Support Buffer, BigInteger and BN library\n      // Hint: BN is used in ethereumjs\n      val = val.toString(\"hex\");\n    }\n\n    return utils.addHexPrefix(val);\n  },\n\n  _rpcQuantityHexString: function(val) {\n    val = this.hex(val);\n    // remove all zeroes leading zeros, `0+`, from the hex-encoded value\n    // This doesn't remove the last 0 which would be captured by `(.+?)`\n    val = val.replace(/^(?:0x)(?:0+(.+?))?$/, \"0x$1\");\n    return val;\n  },\n\n  rpcQuantityHexString: function(val) {\n    val = this._rpcQuantityHexString(val);\n\n    // RPC Quantities must represent `0` as `0x0`\n    if (val === \"0x\") {\n      val = \"0x0\";\n    }\n\n    return val;\n  },\n\n  rpcQuantityBuffer: function(val) {\n    val = this._rpcQuantityHexString(val);\n\n    if (val === \"0x0\") {\n      val = \"0x\";\n    }\n\n    return utils.rlp.encode(val);\n  },\n\n  rpcDataHexString: function(val, length) {\n    if (typeof length === \"number\") {\n      val = this.hex(val).replace(\"0x\", \"\");\n\n      val = new Array(length - val.length).fill(\"0\").join(\"\") + val;\n    } else {\n      if (val.length === 0) {\n        return \"0x\";\n      }\n      val = this.hex(val).replace(\"0x\", \"\");\n\n      if (val.length % 2 !== 0) {\n        val = \"0\" + val;\n      }\n    }\n    return \"0x\" + val;\n  },\n\n  nullableRpcDataHexString: function(val, length) {\n    if (val === null) {\n      return null;\n    } else {\n      const rpcDataHex = this.rpcDataHexString(val, length);\n      return rpcDataHex === \"0x\" ? null : rpcDataHex;\n    }\n  },\n\n  nullableRpcQuantityHexString: function(val, length) {\n    if (val === null) {\n      return null;\n    } else {\n      const rpcQuantityHex = this._rpcQuantityHexString(val, length);\n      return rpcQuantityHex === \"0x\" ? null : rpcQuantityHex;\n    }\n  },\n\n  hexWithZeroPadding: function(val) {\n    val = this.hex(val);\n    const digits = val.replace(\"0x\", \"\");\n    if (digits.length & 0x1) {\n      return \"0x0\" + digits;\n    }\n    return val;\n  },\n\n  number: function(val) {\n    if (typeof val === \"number\") {\n      return val;\n    }\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") !== 0) {\n        return parseInt(val, 10);\n      }\n    }\n    var bufVal = utils.toBuffer(val);\n    return utils.bufferToInt(bufVal);\n  },\n\n  rpcError: function(id, code, msg) {\n    return JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: id,\n      error: {\n        code: code,\n        message: msg\n      }\n    });\n  }\n};\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,iBAAD,CAArB;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACfC,MAAM,EAAE,UAASC,GAAT,EAAc;IACpB,IAAIC,IAAJ;;IACA,IAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;MAC3B;MACAC,IAAI,GAAGD,GAAG,CAACE,OAAJ,CAAY,IAAZ,MAAsB,CAAtB,GAA0BF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAA1B,GAAyCH,GAAhD;MACAC,IAAI,GAAGA,IAAI,CAACG,MAAL,GAAc,CAAd,KAAoB,CAApB,GAAyB,IAAGH,IAAK,EAAjC,GAAqCA,IAA5C;MACAA,IAAI,GAAGI,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkB,KAAlB,CAAP;IACD,CALD,MAKO,IAAII,MAAM,CAACE,QAAP,CAAgBP,GAAhB,CAAJ,EAA0B;MAC/B;MACA;MACAC,IAAI,GAAGD,GAAP;IACD,CAJM,MAIA;MACL;MACAC,IAAI,GAAGI,MAAM,CAACC,IAAP,CAAYN,GAAZ,CAAP;IACD;;IACD,OAAOC,IAAP;EACD,CAjBc;EAkBf;EACAO,GAAG,EAAE,UAASR,GAAT,EAAc;IACjB,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;MAC3B,IAAIA,GAAG,CAACE,OAAJ,CAAY,IAAZ,MAAsB,CAA1B,EAA6B;QAC3B,OAAOF,GAAG,CAACS,IAAJ,EAAP;MACD,CAFD,MAEO;QACLT,GAAG,GAAG,IAAIL,KAAK,CAACe,EAAV,CAAaV,GAAb,CAAN;MACD;IACF;;IAED,IAAI,OAAOA,GAAP,KAAe,SAAnB,EAA8B;MAC5BA,GAAG,GAAGA,GAAG,GAAG,CAAH,GAAO,CAAhB;IACD;;IAED,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;MAC3BA,GAAG,GAAGL,KAAK,CAACgB,QAAN,CAAeX,GAAf,CAAN;IACD,CAFD,MAEO,IAAIA,GAAG,IAAI,IAAX,EAAiB;MACtB,OAAO,IAAP;IACD,CAFM,MAEA,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;MAClC;MACA;MACAA,GAAG,GAAGA,GAAG,CAACY,QAAJ,CAAa,KAAb,CAAN;IACD;;IAED,OAAOjB,KAAK,CAACkB,YAAN,CAAmBb,GAAnB,CAAP;EACD,CA3Cc;EA6Cfc,qBAAqB,EAAE,UAASd,GAAT,EAAc;IACnCA,GAAG,GAAG,KAAKQ,GAAL,CAASR,GAAT,CAAN,CADmC,CAEnC;IACA;;IACAA,GAAG,GAAGA,GAAG,CAACe,OAAJ,CAAY,sBAAZ,EAAoC,MAApC,CAAN;IACA,OAAOf,GAAP;EACD,CAnDc;EAqDfgB,oBAAoB,EAAE,UAAShB,GAAT,EAAc;IAClCA,GAAG,GAAG,KAAKc,qBAAL,CAA2Bd,GAA3B,CAAN,CADkC,CAGlC;;IACA,IAAIA,GAAG,KAAK,IAAZ,EAAkB;MAChBA,GAAG,GAAG,KAAN;IACD;;IAED,OAAOA,GAAP;EACD,CA9Dc;EAgEfiB,iBAAiB,EAAE,UAASjB,GAAT,EAAc;IAC/BA,GAAG,GAAG,KAAKc,qBAAL,CAA2Bd,GAA3B,CAAN;;IAEA,IAAIA,GAAG,KAAK,KAAZ,EAAmB;MACjBA,GAAG,GAAG,IAAN;IACD;;IAED,OAAOL,KAAK,CAACuB,GAAN,CAAUC,MAAV,CAAiBnB,GAAjB,CAAP;EACD,CAxEc;EA0EfoB,gBAAgB,EAAE,UAASpB,GAAT,EAAcI,MAAd,EAAsB;IACtC,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;MAC9BJ,GAAG,GAAG,KAAKQ,GAAL,CAASR,GAAT,EAAce,OAAd,CAAsB,IAAtB,EAA4B,EAA5B,CAAN;MAEAf,GAAG,GAAG,IAAIqB,KAAJ,CAAUjB,MAAM,GAAGJ,GAAG,CAACI,MAAvB,EAA+BkB,IAA/B,CAAoC,GAApC,EAAyCC,IAAzC,CAA8C,EAA9C,IAAoDvB,GAA1D;IACD,CAJD,MAIO;MACL,IAAIA,GAAG,CAACI,MAAJ,KAAe,CAAnB,EAAsB;QACpB,OAAO,IAAP;MACD;;MACDJ,GAAG,GAAG,KAAKQ,GAAL,CAASR,GAAT,EAAce,OAAd,CAAsB,IAAtB,EAA4B,EAA5B,CAAN;;MAEA,IAAIf,GAAG,CAACI,MAAJ,GAAa,CAAb,KAAmB,CAAvB,EAA0B;QACxBJ,GAAG,GAAG,MAAMA,GAAZ;MACD;IACF;;IACD,OAAO,OAAOA,GAAd;EACD,CA1Fc;EA4FfwB,wBAAwB,EAAE,UAASxB,GAAT,EAAcI,MAAd,EAAsB;IAC9C,IAAIJ,GAAG,KAAK,IAAZ,EAAkB;MAChB,OAAO,IAAP;IACD,CAFD,MAEO;MACL,MAAMyB,UAAU,GAAG,KAAKL,gBAAL,CAAsBpB,GAAtB,EAA2BI,MAA3B,CAAnB;MACA,OAAOqB,UAAU,KAAK,IAAf,GAAsB,IAAtB,GAA6BA,UAApC;IACD;EACF,CAnGc;EAqGfC,4BAA4B,EAAE,UAAS1B,GAAT,EAAcI,MAAd,EAAsB;IAClD,IAAIJ,GAAG,KAAK,IAAZ,EAAkB;MAChB,OAAO,IAAP;IACD,CAFD,MAEO;MACL,MAAM2B,cAAc,GAAG,KAAKb,qBAAL,CAA2Bd,GAA3B,EAAgCI,MAAhC,CAAvB;;MACA,OAAOuB,cAAc,KAAK,IAAnB,GAA0B,IAA1B,GAAiCA,cAAxC;IACD;EACF,CA5Gc;EA8GfC,kBAAkB,EAAE,UAAS5B,GAAT,EAAc;IAChCA,GAAG,GAAG,KAAKQ,GAAL,CAASR,GAAT,CAAN;IACA,MAAM6B,MAAM,GAAG7B,GAAG,CAACe,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,CAAf;;IACA,IAAIc,MAAM,CAACzB,MAAP,GAAgB,GAApB,EAAyB;MACvB,OAAO,QAAQyB,MAAf;IACD;;IACD,OAAO7B,GAAP;EACD,CArHc;EAuHf8B,MAAM,EAAE,UAAS9B,GAAT,EAAc;IACpB,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;MAC3B,OAAOA,GAAP;IACD;;IACD,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;MAC3B,IAAIA,GAAG,CAACE,OAAJ,CAAY,IAAZ,MAAsB,CAA1B,EAA6B;QAC3B,OAAO6B,QAAQ,CAAC/B,GAAD,EAAM,EAAN,CAAf;MACD;IACF;;IACD,IAAIgC,MAAM,GAAGrC,KAAK,CAACsC,QAAN,CAAejC,GAAf,CAAb;IACA,OAAOL,KAAK,CAACuC,WAAN,CAAkBF,MAAlB,CAAP;EACD,CAlIc;EAoIfG,QAAQ,EAAE,UAASC,EAAT,EAAaC,IAAb,EAAmBC,GAAnB,EAAwB;IAChC,OAAOC,IAAI,CAACC,SAAL,CAAe;MACpBC,OAAO,EAAE,KADW;MAEpBL,EAAE,EAAEA,EAFgB;MAGpBM,KAAK,EAAE;QACLL,IAAI,EAAEA,IADD;QAELM,OAAO,EAAEL;MAFJ;IAHa,CAAf,CAAP;EAQD;AA7Ic,CAAjB"},"metadata":{},"sourceType":"script"}