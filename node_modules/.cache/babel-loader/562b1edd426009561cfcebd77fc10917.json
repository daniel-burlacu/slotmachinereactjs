{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\ReelSet.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Constants from \"../Constants\";\nimport \"../assets/css/App.css\";\nimport Reel from \"./Reel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ReelSet = props => {\n  //  const [spinReel, setSpinReel] = useState(false)\n  let spinResults = [];\n  let bet = 0;\n  let score = 2;\n  let scr = 0;\n  const winningLines = [];\n  let reels = [];\n  let countWin = 0;\n  let symbolSellection = [];\n\n  const getRandomNr = () => {\n    let randomNr = 0;\n\n    if (props.startGame > 0) {\n      randomNr = -(Math.floor(Math.random() * 42) * 242);\n    }\n\n    return randomNr;\n  };\n\n  const renderReels = () => {\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\n      return /*#__PURE__*/_jsxDEV(Reel, {\n        reel: el,\n        index: idx,\n        gameOn: getRandomNr(),\n        ref: ref => {\n          reels[idx] = ref;\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 14\n      }, this);\n    });\n    spinReel();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: reelList\n    }, void 0, false);\n  };\n\n  console.log(\"My spin results are \" + reels.length);\n\n  const drawScore = (lineNumberType, fool) => {\n    let newScore = 0;\n\n    if (fool) {\n      lineNumberType = 18;\n    }\n\n    switch (lineNumberType) {\n      case 0:\n        // top line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 1:\n        // middle line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 2:\n        // bottom line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 3:\n        // V shape starting bottom left\n        //        audioWin.play();\n        newScore = 0.2;\n        break;\n\n      case 4:\n        // V shape starting bottom right\n        //        audioWin.play();\n        newScore = 0.2;\n        break;\n\n      case 5:\n        // W shape starting top left\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 6:\n        // M shape starting bottom left\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 7:\n        // M shape on top half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 8:\n        // W shape on top half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 9:\n        //W shape on bottom half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 10:\n        // M shape on bottom half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 11:\n        // U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 12:\n        // inverse U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 13:\n        // U shape on bottom half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 14:\n        // inverse U shape on bottom half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 15:\n        // inverse U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 16:\n        // Z shape from top left\n        //        audioWin.play();\n        newScore = 0.4;\n        break;\n\n      case 17:\n        // Z shape from bottom left\n        //        audioWin.play();\n        newScore = 0.4;\n        break;\n\n      case 18:\n        // Z shape from bottom left\n        //        audioWinBonus.play();\n        newScore = 100;\n        break;\n\n      default:\n        newScore = 0;\n    }\n\n    console.log(\"My score is:\" + newScore);\n    setScore(newScore);\n    return;\n  };\n\n  const spinReel = () => {\n    if (props.gameOn > 0) {\n      for (let i = 0; i < Constants.REELS; i++) {\n        checkWin();\n        console.log(\"We have finished rolling\");\n      }\n    }\n  };\n\n  const setScoreState = () => {\n    console.log(\"My scr is:\" + scr);\n    score = scr;\n  };\n\n  const checkLinesElements = symbol => {\n    countWin++;\n    let symNr = 0;\n    let fool = 0;\n\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      fool = 0;\n      symNr = 0;\n\n      for (let j = 0; j < Constants.LINES[i].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === 'D') {\n          fool++;\n        }\n\n        if (symbol === spinResults[indexI][indexJ]) {\n          symNr++;\n        }\n      }\n\n      if (fool + symNr === 5 && fool < 4) {\n        winningLines.push(i);\n      }\n    }\n\n    winningLines = uniq(winningLines);\n  };\n\n  const uniq = a => {\n    return a.sort().filter(function (item, pos, ary) {\n      return !pos || item !== ary[pos - 1];\n    });\n  };\n\n  const checkElements = () => {\n    let fool = 0;\n\n    for (let k = 0; k < 3; k++) {\n      fool = 0;\n\n      for (let i = 0; i < spinResults.length; i++) {\n        let symb = \"\";\n\n        for (let j = k; j < spinResults[i].length; j++) {\n          if (spinResults[i][j] !== 'D') {\n            symb = spinResults[i][j];\n            j = spinResults[i].length;\n          } else {\n            fool++;\n            j = spinResults[i].length;\n          }\n        }\n\n        if (fool < 4 && symb !== \"\") {\n          symbolSellection.push(symb);\n        }\n      }\n    }\n\n    for (let i = 0; i < symbolSellection.length; i++) {\n      checkLinesElements(symbolSellection[i]);\n    }\n  };\n\n  const setBetZero = () => {\n    bet = 0;\n  };\n\n  const setScore = e => {\n    console.log(\"We are in setScore: \" + e);\n    let sc = 0;\n\n    if (bet > 0 && e > 0) {\n      console.log(\"Calculating:\" + scr + \"+(\" + bet + \"*\" + e + \")\");\n      scr = scr + (e + bet * e);\n      scr = Math.round(scr * 100) / 100;\n    } else if (bet > 0 && e === 0) {\n      scr = scr - (e + bet * e);\n      console.log(\"Calculating:\" + sc + \"-(\" + bet + \"*\" + e + \")\");\n      scr = Math.round(scr * 100) / 100;\n    } else if (bet === 0 && e > 0) {\n      console.log(\"Calculating: \" + scr + \" + \" + e);\n      scr = Math.round((scr + e) * 100) / 100;\n    } //setBetZero();\n\n\n    setScoreState(scr);\n  };\n\n  const checkFourFools = () => {\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      let fool = 0;\n\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n      }\n\n      if (fool === 4) {\n        winningLines.push(i);\n        drawScore(i, false);\n      }\n    }\n  };\n\n  const evaluateResults = () => {\n    checkFourFools();\n    checkElements(); //highLightWinningLines(0);\n\n    if (winningLines.length > 0) {\n      console.log(\"We have winning line !!!\");\n\n      for (let i = 0; i < winningLines.length; i++) {\n        drawScore(winningLines[i], false);\n      }\n    } else {\n      console.log(\"We have no winning lines !!!\");\n\n      if (scr - bet >= 0.2) {\n        scr = Math.round((scr - bet) * 100) / 100;\n        setScoreState();\n\n        if (scr < bet) {\n          setBetZero();\n        }\n      } else if (scr - bet === 0) {\n        setBetZero();\n        scr = 0;\n        setScoreState();\n      }\n    } //winningLines=[];\n\n  };\n\n  const checkFiveFools = () => {\n    let fl = false;\n\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      let fool = 0;\n\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n      }\n\n      if (fool === 5) {\n        fl = true;\n        winningLines.push(i); //  drawScore(i,true);\n        //  highLightWinningLines(0);\n\n        break;\n      }\n    }\n\n    return fl;\n  };\n\n  const checkWin = () => {\n    let fool = checkFiveFools();\n\n    if (!fool) {\n      evaluateResults();\n    } //  setScoreState();\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"jackpot\",\n      children: [\"Jackpot: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reelSet\",\n          children: renderReels()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c = ReelSet;\nexport default ReelSet;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReelSet\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Constants","Reel","ReelSet","props","spinResults","bet","score","scr","winningLines","reels","countWin","symbolSellection","getRandomNr","randomNr","startGame","Math","floor","random","renderReels","reelList","Array","apply","REELS","map","el","idx","ref","spinReel","console","log","length","drawScore","lineNumberType","fool","newScore","setScore","gameOn","i","checkWin","setScoreState","checkLinesElements","symbol","symNr","LINES","j","indexI","indexJ","push","uniq","a","sort","filter","item","pos","ary","checkElements","k","symb","setBetZero","e","sc","round","checkFourFools","evaluateResults","checkFiveFools","fl"],"sources":["F:/Games/slotmachinereact/src/components/ReelSet.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport Constants from \"../Constants\";\r\nimport \"../assets/css/App.css\";\r\nimport Reel from \"./Reel\";\r\n\r\nconst ReelSet = (props) => {\r\n  //  const [spinReel, setSpinReel] = useState(false)\r\n  let spinResults = [];\r\n  let bet =0;\r\n  let score=2;\r\n  let scr=0;\r\n  const winningLines = [];\r\n  let reels= [];\r\n  let countWin=0;\r\n  let symbolSellection = [];\r\n\r\n  const getRandomNr = () => {\r\n    let randomNr = 0;\r\n    if (props.startGame > 0) {\r\n      randomNr = -(Math.floor(Math.random() * 42) * 242);\r\n    }\r\n    return randomNr;\r\n  };\r\n  \r\n  const renderReels = () => {\r\n      let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\r\n      return <Reel reel={el} key={idx} index={idx} gameOn={getRandomNr()} ref={(ref) => {\r\n       reels[idx] = ref}}/>;\r\n    });\r\n    spinReel();\r\n    return <>{reelList}</>;\r\n  };\r\n\r\n  console.log(\"My spin results are \"+ reels.length);\r\n  \r\nconst drawScore = (lineNumberType, fool) => {\r\n    let newScore = 0;\r\n    if (fool) {\r\n      lineNumberType = 18;\r\n    }\r\n    switch (lineNumberType) {\r\n      case 0: // top line\r\n//        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 1: // middle line\r\n//        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 2: // bottom line\r\n//        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 3: // V shape starting bottom left\r\n//        audioWin.play();\r\n        newScore = 0.2;\r\n        break;\r\n      case 4: // V shape starting bottom right\r\n//        audioWin.play();\r\n        newScore = 0.2;\r\n        break;\r\n      case 5: // W shape starting top left\r\n//        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 6: // M shape starting bottom left\r\n//        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 7: // M shape on top half\r\n//        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 8: // W shape on top half\r\n//        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 9: //W shape on bottom half\r\n//        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 10: // M shape on bottom half\r\n//        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 11: // U shape on top half\r\n//        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 12: // inverse U shape on top half\r\n//        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 13: // U shape on bottom half\r\n//        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 14: // inverse U shape on bottom half\r\n//        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 15: // inverse U shape on top half\r\n//        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 16: // Z shape from top left\r\n//        audioWin.play();\r\n        newScore = 0.4;\r\n        break;\r\n      case 17: // Z shape from bottom left\r\n//        audioWin.play();\r\n        newScore = 0.4;\r\n        break;\r\n      case 18: // Z shape from bottom left\r\n//        audioWinBonus.play();\r\n        newScore = 100;\r\n        break;\r\n      default:\r\n        newScore=0;\r\n    }\r\n\r\n    console.log(\"My score is:\"+newScore);\r\n    setScore(newScore);\r\n    return;\r\n  };\r\n\r\n  const spinReel  = () =>{\r\n    if(props.gameOn>0){\r\n      for (let i = 0; i < Constants.REELS; i++) {\r\n        checkWin();\r\n        console.log(\"We have finished rolling\");\r\n    }\r\n  }  \r\n}\r\n\r\nconst  setScoreState = () => {\r\n    console.log(\"My scr is:\"+scr);\r\n    score=scr;\r\n  };\r\n  \r\nconst checkLinesElements=(symbol)=>{\r\n    countWin++;\r\n    let symNr=0;\r\n    let fool=0;\r\n    for(let i=0;i<Constants.LINES.length;i++){\r\n        fool=0;\r\n        symNr=0;\r\n        for(let j=0; j<Constants.LINES[i].length;j++){\r\n            let indexI = Constants.LINES[i][j][0];\r\n            let indexJ = Constants.LINES[i][j][1];\r\n\r\n            if(spinResults[indexI][indexJ]==='D'){\r\n                fool++;\r\n            }\r\n            if(symbol===spinResults[indexI][indexJ]){\r\n                symNr++;\r\n            }\r\n        }  \r\n        if(fool+symNr===5&&fool<4){\r\n            winningLines.push(i);\r\n        }\r\n    }\r\n    winningLines=uniq(winningLines);\r\n  }\r\n\r\nconst  uniq=(a)=> {\r\n    return a.sort().filter(function(item, pos, ary) {\r\n        return !pos || item !== ary[pos - 1];\r\n    });\r\n}\r\n\r\n\r\nconst checkElements=()=>{\r\n      let fool=0;\r\n    for(let k=0; k<3; k++){\r\n      fool=0;\r\n      for(let i=0;i<spinResults.length;i++){\r\n          let symb =\"\";\r\n          for(let j=k; j<spinResults[i].length;j++){\r\n              if(spinResults[i][j]!=='D'){\r\n                  symb=spinResults[i][j];\r\n                  j=spinResults[i].length;\r\n              }else{\r\n                fool++;\r\n                j=spinResults[i].length;\r\n              }\r\n          }\r\n         if(fool<4&&symb!==\"\"){\r\n         symbolSellection.push(symb); \r\n        }\r\n      } \r\n    } \r\n    for(let i=0;i<symbolSellection.length;i++){\r\n        checkLinesElements(symbolSellection[i]);\r\n    }\r\n    \r\n  }\r\n\r\nconst setBetZero = () => {\r\n    bet=0;\r\n  };\r\n\r\nconst  setScore = (e) => {\r\n    console.log(\"We are in setScore: \" + e);\r\n    let sc = 0;\r\n    if (bet > 0 && e > 0) {\r\n      console.log(\"Calculating:\" + scr + \"+(\" + bet + \"*\" + e + \")\");\r\n      scr = scr + (e+(bet * e));\r\n      scr = Math.round(scr * 100) / 100;\r\n    } else if (bet > 0 && e === 0) {\r\n      scr= scr -(e+(bet * e));\r\n      console.log(\"Calculating:\" + sc + \"-(\" + bet + \"*\" + e + \")\");\r\n      scr = Math.round(scr * 100) / 100;\r\n    } else if (bet === 0 && e > 0) {\r\n      console.log(\"Calculating: \" + scr + \" + \"+ e);\r\n      scr= Math.round((scr+e) * 100)/100;\r\n    }\r\n\r\n    //setBetZero();\r\n    setScoreState(scr);\r\n  };\r\nconst checkFourFools = () => {\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      let fool = 0;\r\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n        \r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n                fool++;\r\n        }\r\n      }\r\n      if (fool === 4) {\r\n        winningLines.push(i);\r\n        drawScore(i,false);\r\n      } \r\n    }\r\n  };\r\n\r\nconst evaluateResults = () => {\r\n  checkFourFools();\r\n  checkElements();\r\n  //highLightWinningLines(0);\r\n    if(winningLines.length>0){\r\n      console.log(\"We have winning line !!!\");\r\n      for(let i=0; i< winningLines.length;i++){\r\n          drawScore(winningLines[i],false);\r\n    }\r\n  }else{\r\n    console.log(\"We have no winning lines !!!\");\r\n    if((scr - bet)>=0.2){\r\n     scr= Math.round((scr - bet) * 100) / 100;\r\n      setScoreState();\r\n      if(scr < bet){\r\n        setBetZero();\r\n      }\r\n    }else if((scr - bet)===0){\r\n      setBetZero();\r\n      scr=0;\r\n      setScoreState();\r\n    }\r\n    \r\n  }\r\n    //winningLines=[];\r\n  };\r\nconst checkFiveFools = () => {\r\n    let fl = false;\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      let fool = 0;\r\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n          fool++;\r\n        }\r\n      }\r\n      if (fool === 5) {\r\n        fl = true;\r\n        winningLines.push(i);\r\n      //  drawScore(i,true);\r\n      //  highLightWinningLines(0);\r\n        break;\r\n      }\r\n    }\r\n    return fl;\r\n  };\r\n\r\n  const checkWin = () => {\r\n    let fool = checkFiveFools();\r\n    if (!fool) {\r\n      evaluateResults();\r\n    }\r\n  //  setScoreState();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div id=\"jackpot\">\r\n        Jackpot: <span>100</span>\r\n      </div>\r\n      <div className=\"container\">\r\n        <div className=\"playContainer\">\r\n          <div className=\"reelSet\" >{\r\n          renderReels() \r\n          }</div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReelSet;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}