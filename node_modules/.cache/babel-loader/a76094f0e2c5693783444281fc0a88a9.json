{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\ReelSet.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Constants from \"../Constants\";\nimport Reel from \"./Reel\";\nimport \"../assets/css/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ReelSet = props => {\n  _s();\n\n  const [width, setWidth] = useState();\n  const [height, setHeight] = useState();\n  const [bet, setBet] = useState();\n  const [score, setScore] = useState();\n  let reels = [];\n  let reelsInMotion = null;\n  let spinResults = [];\n  let winningLines = [];\n  let strike = false;\n  let LINES = Constants.LINES;\n  let scr = 2;\n  let countWin = 0;\n  let symbolSellection = [];\n\n  const randomBetween = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const doSomething = (reelIndex, results) => {\n    reelsInMotion -= 1;\n    spinResults[reelIndex] = results;\n\n    if (reelsInMotion === 0) {\n      //   checkWin();\n      console.log(\"We have finished rolling\"); //  setScoreState();\n    }\n  };\n\n  const spin = () => {\n    // winningLines = [];\n    let reelsInMotion = Constants.REELS;\n\n    for (let i = 0; i < Constants.REELS; i++) {\n      reels[i].scrollByOffSet(randomBetween((Constants.REELS_REPEAT - 6) * reels[i].symbols.length, (Constants.REELS_REPEAT - 5) * reels[i].symbols.length), (reelIndex, results) => {\n        reelsInMotion -= 1;\n        spinResults[reelIndex] = results;\n\n        if (reelsInMotion === 0) {\n          //  checkWin();\n          console.log(\"We have finished rolling\"); //  setScoreState();\n        }\n      });\n    }\n  };\n\n  const onLayout = e => {\n    setWidth(1200);\n    setHeight(800);\n  };\n\n  const renderReels = () => {\n    let reelWidth = width / Constants.REELS;\n    console.log(\"My reelWidth is: \" + reelWidth);\n    console.log(\"My hight is: \" + height);\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\n      return /*#__PURE__*/_jsxDEV(Reel, {\n        width: reelWidth,\n        height: height,\n        index: idx,\n        ref: ref => {\n          reels[idx] = ref;\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 4\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: reelList\n    }, void 0, false);\n  };\n};\n\n_s(ReelSet, \"7s3/OE1BS6yGgHnG1DAQLeSthQc=\");\n\n_c = ReelSet;\nexport default ReelSet;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReelSet\");","map":{"version":3,"names":["React","useEffect","useState","Constants","Reel","ReelSet","props","width","setWidth","height","setHeight","bet","setBet","score","setScore","reels","reelsInMotion","spinResults","winningLines","strike","LINES","scr","countWin","symbolSellection","randomBetween","min","max","Math","floor","random","doSomething","reelIndex","results","console","log","spin","REELS","i","scrollByOffSet","REELS_REPEAT","symbols","length","onLayout","e","renderReels","reelWidth","reelList","Array","apply","map","el","idx","ref"],"sources":["F:/Games/slotmachinereact/src/components/ReelSet.js"],"sourcesContent":["import React, { useEffect, useState} from \"react\";\r\nimport Constants from \"../Constants\";\r\nimport Reel from \"./Reel\";\r\nimport \"../assets/css/App.css\";\r\n\r\nconst ReelSet =(props) =>{\r\n\t\r\n\tconst [width, setWidth] = useState();\r\n\tconst [height, setHeight] = useState();\r\n\tconst [bet, setBet] = useState();\r\n\tconst [score, setScore]= useState();\r\n\t\r\n\tlet reels = [];\r\n\tlet reelsInMotion = null;\r\n    let spinResults = [];\r\n    let winningLines = [];\r\n    let strike = false;\r\n    let LINES = Constants.LINES;\r\n    let scr = 2;\r\n    let countWin = 0;\r\n    let symbolSellection = [];\r\n\t\r\n  const randomBetween = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  const doSomething = (reelIndex, results) => {\r\n    reelsInMotion -= 1;\r\n    spinResults[reelIndex] = results;\r\n\r\n    if (reelsInMotion === 0) {\r\n   //   checkWin();\r\n      console.log(\"We have finished rolling\");\r\n    //  setScoreState();\r\n    }\r\n  }\r\n\t\r\n  const spin =() => {\r\n    // winningLines = [];\r\n     let reelsInMotion = Constants.REELS;\r\n     for (let i = 0; i < Constants.REELS; i++) {\r\n       reels[i].scrollByOffSet(\r\n         randomBetween(\r\n           (Constants.REELS_REPEAT - 6) * reels[i].symbols.length,\r\n           (Constants.REELS_REPEAT - 5) * reels[i].symbols.length\r\n         ),\r\n         (reelIndex, results) => {\r\n          reelsInMotion -= 1;\r\n          spinResults[reelIndex] = results;\r\n\r\n          if (reelsInMotion === 0) {\r\n          //  checkWin();\r\n            console.log(\"We have finished rolling\");\r\n          //  setScoreState();\r\n          }\r\n        }\r\n       );\r\n     }\r\n   };\r\n\t\r\n\tconst onLayout = (e) => {\r\n\t\tsetWidth(1200);\r\n\t\tsetHeight(800);\r\n\t};\r\n\r\n\tconst renderReels = () => {\r\n\t\tlet reelWidth = width / Constants.REELS;\r\n\t\tconsole.log(\"My reelWidth is: \"+ reelWidth);\r\n\t\tconsole.log(\"My hight is: \"+height);\r\n\t\tlet reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\r\n\t\t  return (\r\n\t\t\t<Reel\r\n\t\t\t  width={reelWidth}\r\n\t\t\t  height={height}\r\n\t\t\t  key={idx}\r\n\t\t\t  index={idx}\r\n\t\t\t  ref={(ref) => {\r\n\t\t\t\treels[idx] = ref;\r\n\t\t\t  }}\r\n\t\t\t/>\r\n\t\t  );\r\n    });\r\n\r\n    return <>{reelList}</>;\r\n  };\r\n\t\r\n\t\r\n\r\n}\r\n\r\nexport default ReelSet;"],"mappings":"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"},"metadata":{},"sourceType":"module"}