{"ast":null,"code":"var inherits = require('inherits');\n\nvar AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN;\n\nvar AbstractIterator = require('abstract-leveldown').AbstractIterator;\n\nvar ltgt = require('ltgt');\n\nvar createRBT = require('functional-red-black-tree');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar globalStore = {}; // In Node, use global.setImmediate. In the browser, use a consistent\n// microtask library to give consistent microtask experience to all browsers\n\nvar setImmediate = require('./immediate');\n\nfunction gt(value) {\n  return ltgt.compare(value, this._end) > 0;\n}\n\nfunction gte(value) {\n  return ltgt.compare(value, this._end) >= 0;\n}\n\nfunction lt(value) {\n  return ltgt.compare(value, this._end) < 0;\n}\n\nfunction lte(value) {\n  return ltgt.compare(value, this._end) <= 0;\n}\n\nfunction MemIterator(db, options) {\n  AbstractIterator.call(this, db);\n  this._limit = options.limit;\n  if (this._limit === -1) this._limit = Infinity;\n  var tree = db._store[db._location];\n  this.keyAsBuffer = options.keyAsBuffer !== false;\n  this.valueAsBuffer = options.valueAsBuffer !== false;\n  this._reverse = options.reverse;\n  this._options = options;\n  this._done = 0;\n\n  if (!this._reverse) {\n    this._incr = 'next';\n    this._start = ltgt.lowerBound(options);\n    this._end = ltgt.upperBound(options);\n\n    if (typeof this._start === 'undefined') {\n      this._tree = tree.begin;\n    } else if (ltgt.lowerBoundInclusive(options)) {\n      this._tree = tree.ge(this._start);\n    } else {\n      this._tree = tree.gt(this._start);\n    }\n\n    if (this._end) {\n      if (ltgt.upperBoundInclusive(options)) {\n        this._test = lte;\n      } else {\n        this._test = lt;\n      }\n    }\n  } else {\n    this._incr = 'prev';\n    this._start = ltgt.upperBound(options);\n    this._end = ltgt.lowerBound(options);\n\n    if (typeof this._start === 'undefined') {\n      this._tree = tree.end;\n    } else if (ltgt.upperBoundInclusive(options)) {\n      this._tree = tree.le(this._start);\n    } else {\n      this._tree = tree.lt(this._start);\n    }\n\n    if (this._end) {\n      if (ltgt.lowerBoundInclusive(options)) {\n        this._test = gte;\n      } else {\n        this._test = gt;\n      }\n    }\n  }\n}\n\ninherits(MemIterator, AbstractIterator);\n\nMemIterator.prototype._next = function (callback) {\n  var key;\n  var value;\n  if (this._done++ >= this._limit) return setImmediate(callback);\n  if (!this._tree.valid) return setImmediate(callback);\n  key = this._tree.key;\n  value = this._tree.value;\n  if (!this._test(key)) return setImmediate(callback);\n  if (this.keyAsBuffer) key = Buffer.from(key);\n  if (this.valueAsBuffer) value = Buffer.from(value);\n\n  this._tree[this._incr]();\n\n  setImmediate(function callNext() {\n    callback(null, key, value);\n  });\n};\n\nMemIterator.prototype._test = function () {\n  return true;\n};\n\nfunction MemDOWN(location) {\n  if (!(this instanceof MemDOWN)) return new MemDOWN(location);\n  AbstractLevelDOWN.call(this, typeof location === 'string' ? location : '');\n  this._location = this.location ? '$' + this.location : '_tree';\n  this._store = this.location ? globalStore : this;\n  this._store[this._location] = this._store[this._location] || createRBT(ltgt.compare);\n}\n\nMemDOWN.clearGlobalStore = function (strict) {\n  if (strict) {\n    Object.keys(globalStore).forEach(function (key) {\n      delete globalStore[key];\n    });\n  } else {\n    globalStore = {};\n  }\n};\n\ninherits(MemDOWN, AbstractLevelDOWN);\n\nMemDOWN.prototype._open = function (options, callback) {\n  var self = this;\n  setImmediate(function callNext() {\n    callback(null, self);\n  });\n};\n\nMemDOWN.prototype._put = function (key, value, options, callback) {\n  if (typeof value === 'undefined' || value === null) value = '';\n\n  var iter = this._store[this._location].find(key);\n\n  if (iter.valid) {\n    this._store[this._location] = iter.update(value);\n  } else {\n    this._store[this._location] = this._store[this._location].insert(key, value);\n  }\n\n  setImmediate(callback);\n};\n\nMemDOWN.prototype._get = function (key, options, callback) {\n  var value = this._store[this._location].get(key);\n\n  if (typeof value === 'undefined') {\n    // 'NotFound' error, consistent with LevelDOWN API\n    return setImmediate(function callNext() {\n      callback(new Error('NotFound'));\n    });\n  }\n\n  if (options.asBuffer !== false && !this._isBuffer(value)) {\n    value = Buffer.from(String(value));\n  }\n\n  setImmediate(function callNext() {\n    callback(null, value);\n  });\n};\n\nMemDOWN.prototype._del = function (key, options, callback) {\n  this._store[this._location] = this._store[this._location].remove(key);\n  setImmediate(callback);\n};\n\nMemDOWN.prototype._batch = function (array, options, callback) {\n  var i = -1;\n  var key;\n  var value;\n  var iter;\n  var len = array.length;\n  var tree = this._store[this._location];\n\n  while (++i < len) {\n    if (!array[i]) continue;\n    key = this._isBuffer(array[i].key) ? array[i].key : String(array[i].key);\n    iter = tree.find(key);\n\n    if (array[i].type === 'put') {\n      value = this._isBuffer(array[i].value) ? array[i].value : String(array[i].value);\n      tree = iter.valid ? iter.update(value) : tree.insert(key, value);\n    } else {\n      tree = iter.remove();\n    }\n  }\n\n  this._store[this._location] = tree;\n  setImmediate(callback);\n};\n\nMemDOWN.prototype._iterator = function (options) {\n  return new MemIterator(this, options);\n};\n\nMemDOWN.prototype._isBuffer = function (obj) {\n  return Buffer.isBuffer(obj);\n};\n\nMemDOWN.destroy = function (name, callback) {\n  var key = '$' + name;\n\n  if (key in globalStore) {\n    delete globalStore[key];\n  }\n\n  setImmediate(callback);\n};\n\nmodule.exports = MemDOWN.default = MemDOWN;","map":{"version":3,"names":["inherits","require","AbstractLevelDOWN","AbstractIterator","ltgt","createRBT","Buffer","globalStore","setImmediate","gt","value","compare","_end","gte","lt","lte","MemIterator","db","options","call","_limit","limit","Infinity","tree","_store","_location","keyAsBuffer","valueAsBuffer","_reverse","reverse","_options","_done","_incr","_start","lowerBound","upperBound","_tree","begin","lowerBoundInclusive","ge","upperBoundInclusive","_test","end","le","prototype","_next","callback","key","valid","from","callNext","MemDOWN","location","clearGlobalStore","strict","Object","keys","forEach","_open","self","_put","iter","find","update","insert","_get","get","Error","asBuffer","_isBuffer","String","_del","remove","_batch","array","i","len","length","type","_iterator","obj","isBuffer","destroy","name","module","exports","default"],"sources":["F:/Games/slotmachinereact/node_modules/ganache-core/node_modules/ethereumjs-vm/node_modules/memdown/memdown.js"],"sourcesContent":["var inherits = require('inherits')\nvar AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN\nvar AbstractIterator = require('abstract-leveldown').AbstractIterator\nvar ltgt = require('ltgt')\nvar createRBT = require('functional-red-black-tree')\nvar Buffer = require('safe-buffer').Buffer\nvar globalStore = {}\n\n// In Node, use global.setImmediate. In the browser, use a consistent\n// microtask library to give consistent microtask experience to all browsers\nvar setImmediate = require('./immediate')\n\nfunction gt (value) {\n  return ltgt.compare(value, this._end) > 0\n}\n\nfunction gte (value) {\n  return ltgt.compare(value, this._end) >= 0\n}\n\nfunction lt (value) {\n  return ltgt.compare(value, this._end) < 0\n}\n\nfunction lte (value) {\n  return ltgt.compare(value, this._end) <= 0\n}\n\nfunction MemIterator (db, options) {\n  AbstractIterator.call(this, db)\n  this._limit = options.limit\n\n  if (this._limit === -1) this._limit = Infinity\n\n  var tree = db._store[db._location]\n\n  this.keyAsBuffer = options.keyAsBuffer !== false\n  this.valueAsBuffer = options.valueAsBuffer !== false\n  this._reverse = options.reverse\n  this._options = options\n  this._done = 0\n\n  if (!this._reverse) {\n    this._incr = 'next'\n    this._start = ltgt.lowerBound(options)\n    this._end = ltgt.upperBound(options)\n\n    if (typeof this._start === 'undefined') {\n      this._tree = tree.begin\n    } else if (ltgt.lowerBoundInclusive(options)) {\n      this._tree = tree.ge(this._start)\n    } else {\n      this._tree = tree.gt(this._start)\n    }\n\n    if (this._end) {\n      if (ltgt.upperBoundInclusive(options)) {\n        this._test = lte\n      } else {\n        this._test = lt\n      }\n    }\n  } else {\n    this._incr = 'prev'\n    this._start = ltgt.upperBound(options)\n    this._end = ltgt.lowerBound(options)\n\n    if (typeof this._start === 'undefined') {\n      this._tree = tree.end\n    } else if (ltgt.upperBoundInclusive(options)) {\n      this._tree = tree.le(this._start)\n    } else {\n      this._tree = tree.lt(this._start)\n    }\n\n    if (this._end) {\n      if (ltgt.lowerBoundInclusive(options)) {\n        this._test = gte\n      } else {\n        this._test = gt\n      }\n    }\n  }\n}\n\ninherits(MemIterator, AbstractIterator)\n\nMemIterator.prototype._next = function (callback) {\n  var key\n  var value\n\n  if (this._done++ >= this._limit) return setImmediate(callback)\n  if (!this._tree.valid) return setImmediate(callback)\n\n  key = this._tree.key\n  value = this._tree.value\n\n  if (!this._test(key)) return setImmediate(callback)\n\n  if (this.keyAsBuffer) key = Buffer.from(key)\n  if (this.valueAsBuffer) value = Buffer.from(value)\n\n  this._tree[this._incr]()\n\n  setImmediate(function callNext () {\n    callback(null, key, value)\n  })\n}\n\nMemIterator.prototype._test = function () {\n  return true\n}\n\nfunction MemDOWN (location) {\n  if (!(this instanceof MemDOWN)) return new MemDOWN(location)\n\n  AbstractLevelDOWN.call(this, typeof location === 'string' ? location : '')\n\n  this._location = this.location ? '$' + this.location : '_tree'\n  this._store = this.location ? globalStore : this\n  this._store[this._location] =\n    this._store[this._location] || createRBT(ltgt.compare)\n}\n\nMemDOWN.clearGlobalStore = function (strict) {\n  if (strict) {\n    Object.keys(globalStore).forEach(function (key) {\n      delete globalStore[key]\n    })\n  } else {\n    globalStore = {}\n  }\n}\n\ninherits(MemDOWN, AbstractLevelDOWN)\n\nMemDOWN.prototype._open = function (options, callback) {\n  var self = this\n  setImmediate(function callNext () {\n    callback(null, self)\n  })\n}\n\nMemDOWN.prototype._put = function (key, value, options, callback) {\n  if (typeof value === 'undefined' || value === null) value = ''\n\n  var iter = this._store[this._location].find(key)\n\n  if (iter.valid) {\n    this._store[this._location] = iter.update(value)\n  } else {\n    this._store[this._location] = this._store[this._location].insert(key, value)\n  }\n\n  setImmediate(callback)\n}\n\nMemDOWN.prototype._get = function (key, options, callback) {\n  var value = this._store[this._location].get(key)\n\n  if (typeof value === 'undefined') {\n    // 'NotFound' error, consistent with LevelDOWN API\n    return setImmediate(function callNext () {\n      callback(new Error('NotFound'))\n    })\n  }\n\n  if (options.asBuffer !== false && !this._isBuffer(value)) {\n    value = Buffer.from(String(value))\n  }\n\n  setImmediate(function callNext () {\n    callback(null, value)\n  })\n}\n\nMemDOWN.prototype._del = function (key, options, callback) {\n  this._store[this._location] = this._store[this._location].remove(key)\n  setImmediate(callback)\n}\n\nMemDOWN.prototype._batch = function (array, options, callback) {\n  var i = -1\n  var key\n  var value\n  var iter\n  var len = array.length\n  var tree = this._store[this._location]\n\n  while (++i < len) {\n    if (!array[i]) continue\n\n    key = this._isBuffer(array[i].key) ? array[i].key : String(array[i].key)\n    iter = tree.find(key)\n\n    if (array[i].type === 'put') {\n      value = this._isBuffer(array[i].value)\n        ? array[i].value\n        : String(array[i].value)\n      tree = iter.valid ? iter.update(value) : tree.insert(key, value)\n    } else {\n      tree = iter.remove()\n    }\n  }\n\n  this._store[this._location] = tree\n\n  setImmediate(callback)\n}\n\nMemDOWN.prototype._iterator = function (options) {\n  return new MemIterator(this, options)\n}\n\nMemDOWN.prototype._isBuffer = function (obj) {\n  return Buffer.isBuffer(obj)\n}\n\nMemDOWN.destroy = function (name, callback) {\n  var key = '$' + name\n\n  if (key in globalStore) {\n    delete globalStore[key]\n  }\n\n  setImmediate(callback)\n}\n\nmodule.exports = MemDOWN.default = MemDOWN\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}