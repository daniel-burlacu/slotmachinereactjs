{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport ReelSet from \"./components/ReelSet\";\nimport \"./assets/css/App.css\";\nimport Mint from \"./components/Mint\";\nimport PFPRacerNFT from './artifacts/contracts/PFPRacerNFT.sol/abi.json';\nimport { assert } from \"chai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [spin, setSpin] = useState(0);\n  const [connecting, setConnecting] = useState();\n  const [showList, setShowList] = useState(0);\n  const [welcomeMessage, setWelcomeMessage] = useState(\"\");\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(\"\");\n\n  const callbackSetSpin = spin => {\n    console.log(\"My App score is: \" + spin);\n    setSpin(spin);\n  };\n\n  const callBackShowWin = () => {\n    setShowList(1);\n  };\n\n  const welcomeWallMessage = () => {\n    if (welcomeMessage === \"\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"welcome\",\n        children: [\"Racer NFT Slot Machine\", /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Welcome player !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"welcome\",\n        children: welcomeMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this);\n    }\n  };\n\n  const checkConnection = async () => {\n    const accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n\n    if (accounts[0] !== undefined) {\n      setWelcomeMessage(\"Welcome player: \" + accounts + \" !\");\n    } else {\n      setWelcomeMessage(\"Racer NFT Reel Machine\" + account);\n    }\n  };\n\n  const connect = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      if (accounts[0] === undefined) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const newSigner = provider.getSigner();\n        setAccount(accounts[0]);\n        setContract(new ethers.Contract(\"0xEE8E55e5BE8fAB0aa31D23eeb0F976baB4C2E557\", PFPRacerNFT.abi, newSigner));\n        setWelcomeMessage(\"Welcome player: \" + account + \" !\");\n      } else {\n        assert(\"You already are connected to \" + account);\n      }\n    } else {\n      console.log(\"Please install metamask\");\n    }\n  };\n\n  useEffect(() => {\n    checkConnection();\n    console.log(\"My welcome message is \" + welcomeMessage);\n  }, [account]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n      children: welcomeWallMessage()\n    }, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: connect ? \"connect connecting\" : \"connect\",\n      onClick: () => {\n        connect();\n      },\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReelSet, {\n      runGame: spin,\n      spinCallback: callbackSetSpin,\n      showWinCallback: callBackShowWin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"ro/2A6T0kaAuqjBMkPhptjX6aR0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","ReelSet","Mint","PFPRacerNFT","assert","App","spin","setSpin","connecting","setConnecting","showList","setShowList","welcomeMessage","setWelcomeMessage","account","setAccount","contract","setContract","callbackSetSpin","console","log","callBackShowWin","welcomeWallMessage","checkConnection","accounts","window","ethereum","request","method","undefined","connect","provider","providers","Web3Provider","newSigner","getSigner","Contract","abi"],"sources":["F:/Games/slotmachinereact/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {ethers} from \"ethers\";\nimport ReelSet from \"./components/ReelSet\";\nimport \"./assets/css/App.css\";\nimport Mint from \"./components/Mint\";\nimport PFPRacerNFT from './artifacts/contracts/PFPRacerNFT.sol/abi.json'\nimport { assert } from \"chai\";\n\nconst App = () => {\n  const [spin, setSpin] = useState(0);\n  const [connecting, setConnecting] = useState();\n  const [showList, setShowList] = useState(0);\n  const [welcomeMessage, setWelcomeMessage] = useState(\"\");\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(\"\");\n\n  const callbackSetSpin = (spin) => {\n    console.log(\"My App score is: \" + spin);\n    setSpin(spin);\n  };\n\n  const callBackShowWin = () => {\n    setShowList(1);\n  };\n\n  const welcomeWallMessage = () => {\n    if(welcomeMessage===\"\"){\n      return (\n        <div class=\"welcome\">\n          Racer NFT Slot Machine\n          <p>Welcome player !</p>\n        </div>);\n  }else{\n    return(\n    <div class=\"welcome\">\n         {welcomeMessage}\n    </div>\n    );\n  }\n  }\n\n  const checkConnection = async() =>{\n\n    const accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\",\n    });\n\n    if(accounts[0]!==undefined){\n      setWelcomeMessage(\"Welcome player: \"+accounts+\" !\");\n    }else{\n      setWelcomeMessage(\"Racer NFT Reel Machine\"+account);\n    }\n  }\n\n  const connect = async () => {\n    if(typeof window.ethereum !== \"undefined\"){\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      if(accounts[0]===undefined){\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const newSigner = provider.getSigner();\n        setAccount(accounts[0]);\n        setContract(\n          new ethers.Contract(\n            \"0xEE8E55e5BE8fAB0aa31D23eeb0F976baB4C2E557\",\n            PFPRacerNFT.abi,\n            newSigner\n          )\n        )\n        setWelcomeMessage(\"Welcome player: \"+account+\" !\");\n     }else{\n      assert(\"You already are connected to \"+account);\n     }\n    }else{\n      console.log(\"Please install metamask\");\n    }\n  }\n\n  useEffect(()=>{\n    checkConnection();\n    console.log(\"My welcome message is \"+welcomeMessage);\n  },[account])\n\n  return (\n    <>\n      <>{welcomeWallMessage()}</>\n      <div\n          className={connect ? \"connect connecting\" : \"connect\"}\n          onClick={() => {\n            connect();\n          }}\n        >\n          Connect Wallet\n        </div>\n    \n      <ReelSet\n        runGame={spin}\n        spinCallback={callbackSetSpin}\n        showWinCallback={callBackShowWin}\n      />\n    </>\n  );\n};\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}