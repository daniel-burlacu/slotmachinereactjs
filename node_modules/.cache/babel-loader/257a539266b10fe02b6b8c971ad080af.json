{"ast":null,"code":"\"use strict\"; // We match any whitespace except line terminators because\n// Flow annotation comments cannot be split across lines. For example:\n//\n// (this /*\n// : any */).foo = 5;\n//\n// is not picked up by Flow (see https://github.com/facebook/flow/issues/7050), so\n// removing the newline would create a type annotation that the user did not intend\n// to create.\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar NON_LINE_TERMINATING_WHITE_SPACE = \"(?:(?=.)\\\\s)\";\nvar FLOW_SHORTHAND_ANNOTATION = new RegExp(\"^\".concat(NON_LINE_TERMINATING_WHITE_SPACE, \"*:\"));\nvar FLOW_ANNOTATION = new RegExp(\"^\".concat(NON_LINE_TERMINATING_WHITE_SPACE, \"*::\"));\n\nfunction hasFlowShorthandAnnotationComment(node) {\n  // https://flow.org/en/docs/types/comments/\n  // Syntax example: const r = new (window.Request /*: Class<Request> */)(\"\");\n  return node.extra && node.extra.parenthesized && node.trailingComments && node.trailingComments[0].value.match(FLOW_SHORTHAND_ANNOTATION);\n}\n\nfunction hasFlowAnnotationComment(comments) {\n  return comments && comments[0].value.match(FLOW_ANNOTATION);\n}\n\nfunction hasNode(node, fn) {\n  if (!node || _typeof(node) !== \"object\") {\n    return false;\n  }\n\n  if (Array.isArray(node)) {\n    return node.some(function (value) {\n      return hasNode(value, fn);\n    });\n  }\n\n  var result = fn(node);\n  return typeof result === \"boolean\" ? result : Object.keys(node).some(function (key) {\n    return hasNode(node[key], fn);\n  });\n}\n\nfunction hasNakedLeftSide(node) {\n  return node.type === \"AssignmentExpression\" || node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\" || node.type === \"NGPipeExpression\" || node.type === \"ConditionalExpression\" || node.type === \"CallExpression\" || node.type === \"OptionalCallExpression\" || node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\" || node.type === \"SequenceExpression\" || node.type === \"TaggedTemplateExpression\" || node.type === \"BindExpression\" || node.type === \"UpdateExpression\" && !node.prefix || node.type === \"TSAsExpression\" || node.type === \"TSNonNullExpression\";\n}\n\nfunction getLeftSide(node) {\n  if (node.expressions) {\n    return node.expressions[0];\n  }\n\n  return node.left || node.test || node.callee || node.object || node.tag || node.argument || node.expression;\n}\n\nfunction getLeftSidePathName(path, node) {\n  if (node.expressions) {\n    return [\"expressions\", 0];\n  }\n\n  if (node.left) {\n    return [\"left\"];\n  }\n\n  if (node.test) {\n    return [\"test\"];\n  }\n\n  if (node.object) {\n    return [\"object\"];\n  }\n\n  if (node.callee) {\n    return [\"callee\"];\n  }\n\n  if (node.tag) {\n    return [\"tag\"];\n  }\n\n  if (node.argument) {\n    return [\"argument\"];\n  }\n\n  if (node.expression) {\n    return [\"expression\"];\n  }\n\n  throw new Error(\"Unexpected node has no left side\", node);\n}\n\nmodule.exports = {\n  getLeftSide: getLeftSide,\n  getLeftSidePathName: getLeftSidePathName,\n  hasNakedLeftSide: hasNakedLeftSide,\n  hasNode: hasNode,\n  hasFlowShorthandAnnotationComment: hasFlowShorthandAnnotationComment,\n  hasFlowAnnotationComment: hasFlowAnnotationComment\n};","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","NON_LINE_TERMINATING_WHITE_SPACE","FLOW_SHORTHAND_ANNOTATION","RegExp","concat","FLOW_ANNOTATION","hasFlowShorthandAnnotationComment","node","extra","parenthesized","trailingComments","value","match","hasFlowAnnotationComment","comments","hasNode","fn","Array","isArray","some","result","Object","keys","key","hasNakedLeftSide","type","prefix","getLeftSide","expressions","left","test","callee","object","tag","argument","expression","getLeftSidePathName","path","Error","module","exports"],"sources":["F:/Games/slotmachinereact/node_modules/@miksu/prettier/lib/language-js/utils.js"],"sourcesContent":["\"use strict\"; // We match any whitespace except line terminators because\n// Flow annotation comments cannot be split across lines. For example:\n//\n// (this /*\n// : any */).foo = 5;\n//\n// is not picked up by Flow (see https://github.com/facebook/flow/issues/7050), so\n// removing the newline would create a type annotation that the user did not intend\n// to create.\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar NON_LINE_TERMINATING_WHITE_SPACE = \"(?:(?=.)\\\\s)\";\nvar FLOW_SHORTHAND_ANNOTATION = new RegExp(\"^\".concat(NON_LINE_TERMINATING_WHITE_SPACE, \"*:\"));\nvar FLOW_ANNOTATION = new RegExp(\"^\".concat(NON_LINE_TERMINATING_WHITE_SPACE, \"*::\"));\n\nfunction hasFlowShorthandAnnotationComment(node) {\n  // https://flow.org/en/docs/types/comments/\n  // Syntax example: const r = new (window.Request /*: Class<Request> */)(\"\");\n  return node.extra && node.extra.parenthesized && node.trailingComments && node.trailingComments[0].value.match(FLOW_SHORTHAND_ANNOTATION);\n}\n\nfunction hasFlowAnnotationComment(comments) {\n  return comments && comments[0].value.match(FLOW_ANNOTATION);\n}\n\nfunction hasNode(node, fn) {\n  if (!node || _typeof(node) !== \"object\") {\n    return false;\n  }\n\n  if (Array.isArray(node)) {\n    return node.some(function (value) {\n      return hasNode(value, fn);\n    });\n  }\n\n  var result = fn(node);\n  return typeof result === \"boolean\" ? result : Object.keys(node).some(function (key) {\n    return hasNode(node[key], fn);\n  });\n}\n\nfunction hasNakedLeftSide(node) {\n  return node.type === \"AssignmentExpression\" || node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\" || node.type === \"NGPipeExpression\" || node.type === \"ConditionalExpression\" || node.type === \"CallExpression\" || node.type === \"OptionalCallExpression\" || node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\" || node.type === \"SequenceExpression\" || node.type === \"TaggedTemplateExpression\" || node.type === \"BindExpression\" || node.type === \"UpdateExpression\" && !node.prefix || node.type === \"TSAsExpression\" || node.type === \"TSNonNullExpression\";\n}\n\nfunction getLeftSide(node) {\n  if (node.expressions) {\n    return node.expressions[0];\n  }\n\n  return node.left || node.test || node.callee || node.object || node.tag || node.argument || node.expression;\n}\n\nfunction getLeftSidePathName(path, node) {\n  if (node.expressions) {\n    return [\"expressions\", 0];\n  }\n\n  if (node.left) {\n    return [\"left\"];\n  }\n\n  if (node.test) {\n    return [\"test\"];\n  }\n\n  if (node.object) {\n    return [\"object\"];\n  }\n\n  if (node.callee) {\n    return [\"callee\"];\n  }\n\n  if (node.tag) {\n    return [\"tag\"];\n  }\n\n  if (node.argument) {\n    return [\"argument\"];\n  }\n\n  if (node.expression) {\n    return [\"expression\"];\n  }\n\n  throw new Error(\"Unexpected node has no left side\", node);\n}\n\nmodule.exports = {\n  getLeftSide: getLeftSide,\n  getLeftSidePathName: getLeftSidePathName,\n  hasNakedLeftSide: hasNakedLeftSide,\n  hasNode: hasNode,\n  hasFlowShorthandAnnotationComment: hasFlowShorthandAnnotationComment,\n  hasFlowAnnotationComment: hasFlowAnnotationComment\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}