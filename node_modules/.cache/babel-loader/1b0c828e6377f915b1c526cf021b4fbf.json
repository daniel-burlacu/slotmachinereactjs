{"ast":null,"code":"import _regeneratorRuntime from\"F:/Games/slotmachinereact/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"F:/Games/slotmachinereact/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"F:/Games/slotmachinereact/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useRef,useEffect,useState}from\"react\";import{ethers}from\"ethers\";import\"../assets/css/App.css\";import Mint from\".//Mint\";import PFPRacerNFT from'../artifacts/contracts/PFPRacerNFT.sol/abi.json';import{assert}from\"chai\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var WelcomeMessage=function WelcomeMessage(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),connecting=_useState2[0],setConnecting=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),showList=_useState4[0],setShowList=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),welcomeMessage=_useState6[0],setWelcomeMessage=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),account=_useState8[0],setAccount=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),contract=_useState10[0],setContract=_useState10[1];var contractAddr=\"0xDFe7ff7386e0C4321Bd1fc7d5f47887C91C7455B\";var welcomeWallMessage=function welcomeWallMessage(){if(welcomeMessage===\"\"){return/*#__PURE__*/_jsx(\"div\",{className:\"welcome\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"div-connect\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"h2-title\",children:\"Minting Racer NFT Slot Machine\"}),/*#__PURE__*/_jsx(\"button\",{className:connect?\"connect connecting\":\"connect\",onClick:function onClick(){checkConnection();},children:\"Connect to Metamask Wallet\"})]})});}else{return/*#__PURE__*/_jsxs(\"div\",{className:\"welcome\",children:[/*#__PURE__*/_jsx(Mint,{account:account,contract:contract}),/*#__PURE__*/_jsxs(\"h2\",{id:\"h2-connect\",children:[\"Welcome Player :\",/*#__PURE__*/_jsx(\"p\",{id:\"p-welcomeMessage\",children:welcomeMessage})]})]});}};var checkConnection=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var accounts,provider,newSigner,chainId;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(typeof window.ethereum!==\"undefined\")){_context.next=16;break;}_context.next=3;return window.ethereum.request({method:\"eth_requestAccounts\"});case 3:accounts=_context.sent;if(!(accounts[0]!==undefined)){_context.next=13;break;}provider=new ethers.providers.Web3Provider(window.ethereum);newSigner=provider.getSigner();_context.next=9;return newSigner.getChainId();case 9:chainId=_context.sent;if(chainId!==80001){alert(\"You are not connected the Correct network please switch to: chainID:137 RPC URL:https://matic-mumbai.chainstacklabs.com\");}else{setWelcomeMessage(accounts);setAccount(accounts[0]);setContract(new ethers.Contract(contractAddr,PFPRacerNFT.abi,newSigner));}_context.next=14;break;case 13:setWelcomeMessage(account);case 14:_context.next=17;break;case 16:alert(\"Metamask not installed !!! Please install metamask in order to place a mint or do a withdrawal !!!\");case 17:case\"end\":return _context.stop();}}},_callee);}));return function checkConnection(){return _ref.apply(this,arguments);};}();var connect=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var accounts,provider,newSigner;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(typeof window.ethereum!==\"undefined\")){_context2.next=7;break;}_context2.next=3;return window.ethereum.request({method:\"eth_requestAccounts\"});case 3:accounts=_context2.sent;if(accounts[0]===undefined){provider=new ethers.providers.Web3Provider(window.ethereum);newSigner=provider.getSigner();setAccount(accounts[0]);setContract(new ethers.Contract(contractAddr,PFPRacerNFT.abi,newSigner));setWelcomeMessage(\"Welcome player: \"+account+\" !\");}else{assert(\"You already are connected to \"+account);}_context2.next=8;break;case 7:alert(\"Metamask not installed !!! Please install metamask in order to place a mint or do a withdrawal !!!\");case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function connect(){return _ref2.apply(this,arguments);};}();useEffect(function(){checkConnection();welcomeWallMessage();},[account]);return/*#__PURE__*/_jsx(\"div\",{children:welcomeWallMessage()});};export default WelcomeMessage;","map":{"version":3,"names":["React","useRef","useEffect","useState","ethers","Mint","PFPRacerNFT","assert","WelcomeMessage","connecting","setConnecting","showList","setShowList","welcomeMessage","setWelcomeMessage","account","setAccount","contract","setContract","contractAddr","welcomeWallMessage","connect","checkConnection","window","ethereum","request","method","accounts","undefined","provider","providers","Web3Provider","newSigner","getSigner","getChainId","chainId","alert","Contract","abi"],"sources":["F:/Games/slotmachinereact/src/components/WelcomeMessage.js"],"sourcesContent":["import React, { useRef,useEffect, useState } from \"react\";\r\nimport {ethers} from \"ethers\";\r\nimport \"../assets/css/App.css\";\r\nimport Mint from \".//Mint\";\r\nimport PFPRacerNFT from '../artifacts/contracts/PFPRacerNFT.sol/abi.json'\r\nimport { assert } from \"chai\";\r\n\r\nconst WelcomeMessage = () =>{\r\n    const [connecting, setConnecting] = useState();\r\n    const [showList, setShowList] = useState(0);\r\n    const [welcomeMessage, setWelcomeMessage] = useState(\"\");\r\n    const [account, setAccount] = useState(\"\");\r\n    const [contract, setContract] = useState(\"\");\r\n    const contractAddr = \"0xDFe7ff7386e0C4321Bd1fc7d5f47887C91C7455B\";\r\n\r\n    const welcomeWallMessage = () => {\r\n        if(welcomeMessage===\"\"){\r\n          return (\r\n            <div className=\"welcome\">\r\n            <div className=\"div-connect\">   \r\n            <h2 className=\"h2-title\">Minting Racer NFT Slot Machine</h2>\r\n              <button\r\n                  className={connect ? \"connect connecting\" : \"connect\"}\r\n                  onClick={() => {checkConnection()}}\r\n              >Connect to Metamask Wallet</button>\r\n            </div> \r\n          </div>);\r\n      }else{\r\n    \r\n        return(\r\n        <div className=\"welcome\">\r\n          <Mint account={account} contract={contract} /> \r\n          <h2 id=\"h2-connect\">Welcome Player :\r\n            <p id=\"p-welcomeMessage\">{welcomeMessage}</p>\r\n            </h2>\r\n        </div>\r\n        );\r\n      }\r\n      }\r\n\r\n      const checkConnection = async() =>{\r\n        if(typeof window.ethereum !== \"undefined\"){\r\n            const accounts = await window.ethereum.request({\r\n              method: \"eth_requestAccounts\",\r\n            });\r\n    \r\n            if(accounts[0]!==undefined){\r\n            \r\n              const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n              const newSigner = provider.getSigner();\r\n\r\n              let chainId = await newSigner.getChainId();\r\n              if(chainId!==80001){\r\n                alert(\"You are not connected the Correct network please switch to: chainID:137 RPC URL:https://matic-mumbai.chainstacklabs.com\");\r\n              }else{\r\n                setWelcomeMessage(accounts);\r\n                setAccount(accounts[0]);\r\n                setContract(\r\n                  new ethers.Contract(\r\n                    contractAddr,\r\n                    PFPRacerNFT.abi,\r\n                    newSigner\r\n                  )\r\n                )\r\n              }\r\n            }else{\r\n              setWelcomeMessage(account);\r\n            }\r\n      }else{\r\n        alert(\"Metamask not installed !!! Please install metamask in order to place a mint or do a withdrawal !!!\");\r\n      }\r\n    }\r\n    \r\n    const connect = async () => {\r\n        if(typeof window.ethereum !== \"undefined\"){\r\n          const accounts = await window.ethereum.request({\r\n            method: \"eth_requestAccounts\",\r\n          });\r\n    \r\n          if(accounts[0]===undefined){\r\n            const provider =  new ethers.providers.Web3Provider(window.ethereum);\r\n            const newSigner =  provider.getSigner();\r\n            setAccount(accounts[0]);\r\n            setContract(\r\n              new ethers.Contract(\r\n                contractAddr,\r\n                PFPRacerNFT.abi,\r\n                newSigner\r\n              )\r\n            )\r\n            setWelcomeMessage(\"Welcome player: \"+account+\" !\");\r\n         }else{\r\n          assert(\"You already are connected to \"+account);\r\n         }\r\n        }else{\r\n          alert(\"Metamask not installed !!! Please install metamask in order to place a mint or do a withdrawal !!!\");\r\n        }\r\n      }\r\n\r\n      useEffect(()=>{\r\n        checkConnection();\r\n        welcomeWallMessage();\r\n      },[account])\r\n\r\n      return(\r\n        <div>{welcomeWallMessage()}</div>  \r\n      )\r\n\r\n}\r\n\r\nexport default WelcomeMessage;"],"mappings":"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"},"metadata":{},"sourceType":"module"}