{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\ReelSet.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Constants from \"../Constants\";\nimport \"../assets/css/App.css\";\nimport Reel from \"./Reel\";\nimport Controller from './Controller.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet timer;\n\nconst ReelSet = props => {\n  _s();\n\n  const [gameOn, setGameOn] = useState(0);\n  let zeroGame = 0;\n  let refLights = useRef();\n  let refWinning = useRef();\n  let message = \"\";\n  let spinResultsIdx = [];\n  let spinResults = [];\n  let winningResults = [];\n  let bet = 0;\n\n  const blurResults = () => {\n    if (spinResultsIdx.length === 5) {\n      for (let i = 0; i < 5; i++) {\n        setTimeout(() => {\n          for (let j = 0; j < spinResultsIdx.length; j++) {\n            for (let k = i; k < 5; k++) {\n              let imagePoz = spinResultsIdx[k][j];\n              refLights.current.childNodes[i].childNodes[0].childNodes[imagePoz].attributes[3].value = \"opacity: 0.3\";\n            }\n          }\n        }, 4500 + i * 500);\n      }\n    }\n  };\n\n  const callbackCreateArray = (reelIdx, reel) => {\n    spinResults.push(reel);\n    spinResultsIdx.push(reelIdx);\n    blurResults();\n  };\n\n  useEffect(() => {\n    // \"timer\" will be undefined again after the next re-render\n    return () => clearTimeout(timer);\n  }, []);\n\n  const callBackLooser = () => {\n    refWinning.current.innerHTML = \"Looser !!! ********************** Looser !!!\";\n  };\n\n  const highLightWinningLines = () => {\n    let image = 0;\n    refWinning.current.innerHTML = \"YOU WON! *********************** YOU WON!\";\n\n    for (let i = 0; i < winningResults.length; i++) {\n      let lineNr = winningResults[i];\n      console.log(\"Begining of the line: \" + Constants.LINES[lineNr]); //    for(let j=0; j<Constants.LINES[i].length;j++){\n\n      setTimeout(() => {\n        for (let j = 0; j < Constants.LINES[lineNr].length; j++) {\n          console.log(\"REEL NUMBER LightsOff\" + j);\n          let indexI = Constants.LINES[lineNr][j][0];\n          let indexJ = Constants.LINES[lineNr][j][1];\n          console.log(\"My highLightWinningLines winningLine is: \" + spinResultsIdx[indexI][indexJ]);\n          let imagePoz = spinResultsIdx[indexI][indexJ]; // setTimeout(()=>{\n          //   refLights.current.childNodes[j].childNodes[0].childNodes[imagePoz].attributes[3].value=\"opacity: 0.3\";\n          // },6000+(j*400))\n\n          refLights.current.childNodes[j].childNodes[0].childNodes[imagePoz].attributes[3].value = \"opacity: 1\";\n        }\n      }, 6000 + i * 2000); // for(let j=0; j<Constants.LINES[lineNr].length;j++){   \n      //   console.log(\"REEL NUMBER LightsOn\"+ j);\n      //    let indexI=(Constants.LINES[lineNr])[j][0];\n      //    let indexJ=(Constants.LINES[lineNr])[j][1];\n      //   let imagePoz=(spinResultsIdx[indexI])[indexJ];\n      //   console.log(\"My highLightWinningLines winningLine is: \"+(spinResultsIdx[indexI])[indexJ]);\n      // } \n\n      console.log(\"End of Line: \" + Constants.LINES[lineNr]);\n    }\n  };\n\n  const callbackWinningResults = winningLines => {\n    winningResults = winningLines;\n    highLightWinningLines();\n  };\n\n  const renderReels = () => {\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\n      return /*#__PURE__*/_jsxDEV(Reel, {\n        reel: el,\n        index: idx,\n        gameOn: gameOn,\n        createArray: callbackCreateArray\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 14\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: reelList\n    }, void 0, false);\n  };\n\n  const calbackZeroGame = () => {\n    zeroGame = false;\n  };\n\n  const callBackSpinReel = () => {\n    refWinning.current.innerHTML = \"Jackpot: <span>100</span>\";\n    setGameOn(gameOn + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"jackpot\",\n      ref: refWinning,\n      children: [\"Jackpot: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reelSet\",\n          ref: refLights,\n          children: renderReels()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controller, {\n      spinReel: callBackSpinReel,\n      zeroGame: calbackZeroGame,\n      myResults: spinResults,\n      myResultsIdx: spinResultsIdx,\n      game: gameOn,\n      winningLinesCallBack: callbackWinningResults,\n      looserCallBack: callBackLooser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ReelSet, \"opeIci7o6jop2cdbKTnLoC2Cfzw=\");\n\n_c = ReelSet;\nexport default ReelSet;\n/**\r\n * \r\n * div =0 , spinResultsIdx[0]\r\nMy winning line is 0,0, 1,0, 2,0, 3,0, 4,0\r\nMy winning line is 0,1,1,1,2,1,3,1,4,1\r\nMy winning line is 0,2,1,2,2,2,3,2,4,2\r\nMy winning line is 0,0,1,1,2,2,3,1,4,0\r\nMy winning line is 0,2,1,1,2,0,3,1,4,2\r\nMy winning line is 0,0,1,2,2,0,3,2,4,0\r\nMy winning line is 0,2,1,0,2,2,3,0,4,2\r\nMy winning line is 0,1,1,0,2,1,3,0,4,1\r\nMy winning line is 0,0,1,1,2,0,3,1,4,0\r\nMy winning line is 0,1,1,2,2,1,3,2,4,1\r\nMy winning line is 0,2,1,1,2,2,3,1,4,2\r\nMy winning line is 0,0,1,1,2,1,3,1,4,0\r\n * \r\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"ReelSet\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Constants","Reel","Controller","timer","ReelSet","props","gameOn","setGameOn","zeroGame","refLights","refWinning","message","spinResultsIdx","spinResults","winningResults","bet","blurResults","length","i","setTimeout","j","k","imagePoz","current","childNodes","attributes","value","callbackCreateArray","reelIdx","reel","push","clearTimeout","callBackLooser","innerHTML","highLightWinningLines","image","lineNr","console","log","LINES","indexI","indexJ","callbackWinningResults","winningLines","renderReels","reelList","Array","apply","REELS","map","el","idx","calbackZeroGame","callBackSpinReel"],"sources":["F:/Games/slotmachinereact/src/components/ReelSet.js"],"sourcesContent":["import React, { useEffect, useRef, useState} from \"react\";\r\nimport Constants from \"../Constants\";\r\nimport \"../assets/css/App.css\";\r\nimport Reel from \"./Reel\";\r\nimport  Controller from './Controller.js'\r\n\r\nlet timer;\r\n\r\nconst ReelSet = (props) => {\r\n  const [gameOn, setGameOn] = useState(0);\r\n  let zeroGame= 0;\r\n  let refLights = useRef();\r\n  let refWinning = useRef();\r\n  let message =\"\";\r\n\r\n  let spinResultsIdx = [];\r\n  let spinResults = [];\r\n  let winningResults=[];\r\n  let bet = 0;\r\n\r\n  const blurResults = () =>{    \r\n    if(spinResultsIdx.length===5){\r\n      for(let i=0; i<5;i++){\r\n        setTimeout(()=>{\r\n        for(let j=0; j<spinResultsIdx.length;j++){\r\n         \r\n          for(let k=i; k<5;k++){\r\n          let imagePoz=spinResultsIdx[k][j];\r\n            refLights.current.childNodes[i].childNodes[0].childNodes[imagePoz].attributes[3].value=\"opacity: 0.3\";\r\n          }\r\n        \r\n        }\r\n      },4500+(i*500))\r\n      } \r\n   \r\n    }\r\n  }\r\n\r\nconst callbackCreateArray = (reelIdx, reel) => {\r\n  spinResults.push(reel);\r\n  spinResultsIdx.push(reelIdx);\r\n  blurResults();\r\n}\r\n\r\nuseEffect(()=>{\r\n// \"timer\" will be undefined again after the next re-render\r\n  return () => clearTimeout(timer);\r\n},[])\r\n\r\nconst callBackLooser = () => {\r\n  refWinning.current.innerHTML=\"Looser !!! ********************** Looser !!!\";\r\n}\r\n\r\nconst highLightWinningLines = () =>{\r\n  let image=0;\r\n  refWinning.current.innerHTML=\"YOU WON! *********************** YOU WON!\";\r\n  for(let i=0; i<winningResults.length;i++){\r\n    let lineNr=winningResults[i]\r\n    console.log(\"Begining of the line: \"+Constants.LINES[lineNr]);\r\n    \r\n\r\n//    for(let j=0; j<Constants.LINES[i].length;j++){\r\n  setTimeout(()=>{\r\n  for(let j=0; j<Constants.LINES[lineNr].length;j++){\r\n       console.log(\"REEL NUMBER LightsOff\"+ j);\r\n       let indexI=(Constants.LINES[lineNr])[j][0];\r\n       let indexJ=(Constants.LINES[lineNr])[j][1];\r\n\r\n      console.log(\"My highLightWinningLines winningLine is: \"+(spinResultsIdx[indexI])[indexJ]);\r\n      let imagePoz=(spinResultsIdx[indexI])[indexJ];\r\n      // setTimeout(()=>{\r\n      //   refLights.current.childNodes[j].childNodes[0].childNodes[imagePoz].attributes[3].value=\"opacity: 0.3\";\r\n      // },6000+(j*400))\r\n      refLights.current.childNodes[j].childNodes[0].childNodes[imagePoz].attributes[3].value=\"opacity: 1\";\r\n    } \r\n\r\n  },6000+(i*2000))\r\n      // for(let j=0; j<Constants.LINES[lineNr].length;j++){   \r\n      //   console.log(\"REEL NUMBER LightsOn\"+ j);\r\n      //    let indexI=(Constants.LINES[lineNr])[j][0];\r\n      //    let indexJ=(Constants.LINES[lineNr])[j][1];\r\n  \r\n      //   let imagePoz=(spinResultsIdx[indexI])[indexJ];\r\n       \r\n        \r\n      //   console.log(\"My highLightWinningLines winningLine is: \"+(spinResultsIdx[indexI])[indexJ]);\r\n      // } \r\n \r\n     \r\n   \r\n      \r\n      console.log(\"End of Line: \"+Constants.LINES[lineNr]);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nconst callbackWinningResults =(winningLines) =>{\r\n  winningResults=winningLines;\r\n  highLightWinningLines();\r\n}\r\n\r\n  const renderReels = () => {\r\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\r\n      return <Reel reel={el} key={idx} index={idx} gameOn={gameOn} createArray={callbackCreateArray}/>;\r\n    });\r\n    \r\n    return <>{reelList}</>;\r\n  };  \r\n\r\n const calbackZeroGame = ()=>{\r\n  zeroGame=false;\r\n } \r\n\r\n  const callBackSpinReel = () => {\r\n      refWinning.current.innerHTML=\"Jackpot: <span>100</span>\"\r\n      setGameOn(gameOn+1);  \r\n  }; \r\n\r\n  return (\r\n    <>\r\n    <div id=\"jackpot\" ref={refWinning}>\r\n  Jackpot: <span>100</span>\r\n  </div>\r\n      <div className=\"container\" >\r\n        <div className=\"playContainer\">\r\n          <div className=\"reelSet\"  ref={refLights}>\r\n            {renderReels()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Controller spinReel={callBackSpinReel} zeroGame={calbackZeroGame} myResults={spinResults} myResultsIdx={spinResultsIdx} game={gameOn} winningLinesCallBack={callbackWinningResults} looserCallBack={callBackLooser}/>\r\n      </>\r\n  );\r\n};\r\n\r\nexport default ReelSet;\r\n\r\n/**\r\n * \r\n * div =0 , spinResultsIdx[0]\r\nMy winning line is 0,0, 1,0, 2,0, 3,0, 4,0\r\nMy winning line is 0,1,1,1,2,1,3,1,4,1\r\nMy winning line is 0,2,1,2,2,2,3,2,4,2\r\nMy winning line is 0,0,1,1,2,2,3,1,4,0\r\nMy winning line is 0,2,1,1,2,0,3,1,4,2\r\nMy winning line is 0,0,1,2,2,0,3,2,4,0\r\nMy winning line is 0,2,1,0,2,2,3,0,4,2\r\nMy winning line is 0,1,1,0,2,1,3,0,4,1\r\nMy winning line is 0,0,1,1,2,0,3,1,4,0\r\nMy winning line is 0,1,1,2,2,1,3,2,4,1\r\nMy winning line is 0,2,1,1,2,2,3,1,4,2\r\nMy winning line is 0,0,1,1,2,1,3,1,4,0\r\n * \r\n */"],"mappings":"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"},"metadata":{},"sourceType":"module"}