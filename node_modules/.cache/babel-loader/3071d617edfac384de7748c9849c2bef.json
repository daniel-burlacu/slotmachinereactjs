{"ast":null,"code":"/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n  var AssertionError = _chai.AssertionError,\n      flag = util.flag;\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion(obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function get() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function set(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function get() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function set(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n        actual: actual,\n        expected: expected,\n        showDiff: showDiff\n      };\n      var operator = util.getOperator(this, arguments);\n\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new AssertionError(msg, assertionErrorObjectProperties, config.includeStack ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n\n  Object.defineProperty(Assertion.prototype, '_obj', {\n    get: function get() {\n      return flag(this, 'object');\n    },\n    set: function set(val) {\n      flag(this, 'object', val);\n    }\n  });\n};","map":{"version":3,"names":["config","require","module","exports","_chai","util","AssertionError","flag","Assertion","obj","msg","ssfi","lockSsfi","proxify","Object","defineProperty","get","console","warn","includeStack","set","value","showDiff","addProperty","name","fn","prototype","addMethod","addChainableMethod","chainingBehavior","overwriteProperty","overwriteMethod","overwriteChainableMethod","assert","expr","negateMsg","expected","_actual","ok","test","arguments","undefined","getMessage","actual","getActual","assertionErrorObjectProperties","operator","getOperator","val"],"sources":["F:/Games/slotmachinereact/node_modules/chai/lib/chai/assertion.js"],"sourcesContent":["/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      };\n\n      var operator = util.getOperator(this, arguments);\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new AssertionError(\n        msg,\n        assertionErrorObjectProperties,\n        (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}