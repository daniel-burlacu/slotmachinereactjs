{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar rlp = require(\"rlp\");\n\nvar cache_1 = require(\"./cache\");\n\nvar util_1 = require(\"./util\");\n\nvar BN = require(\"bn.js\");\n\nvar level = require('level-mem');\n\nvar Block = require('ethereumjs-block');\n/**\n * Abstraction over a DB to facilitate storing/fetching blockchain-related\n * data, such as blocks and headers, indices, and the head block.\n * @hidden\n */\n\n\nvar DBManager =\n/** @class */\nfunction () {\n  function DBManager(db, common) {\n    this._db = db;\n    this._common = common;\n    this._cache = {\n      td: new cache_1.default({\n        max: 1024\n      }),\n      header: new cache_1.default({\n        max: 512\n      }),\n      body: new cache_1.default({\n        max: 256\n      }),\n      numberToHash: new cache_1.default({\n        max: 2048\n      }),\n      hashToNumber: new cache_1.default({\n        max: 2048\n      })\n    };\n  }\n  /**\n   * Fetches iterator heads from the db.\n   */\n\n\n  DBManager.prototype.getHeads = function () {\n    return this.get(util_1.headsKey, {\n      valueEncoding: 'json'\n    });\n  };\n  /**\n   * Fetches header of the head block.\n   */\n\n\n  DBManager.prototype.getHeadHeader = function () {\n    return this.get(util_1.headHeaderKey);\n  };\n  /**\n   * Fetches head block.\n   */\n\n\n  DBManager.prototype.getHeadBlock = function () {\n    return this.get(util_1.headBlockKey);\n  };\n  /**\n   * Fetches a block (header and body), given a block tag\n   * which can be either its hash or its number.\n   */\n\n\n  DBManager.prototype.getBlock = function (blockTag) {\n    return __awaiter(this, void 0, void 0, function () {\n      var number, hash, header, body, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // determine BlockTag type\n            if (typeof blockTag === 'number' && Number.isInteger(blockTag)) {\n              blockTag = new BN(blockTag);\n            }\n\n            if (!Buffer.isBuffer(blockTag)) return [3\n            /*break*/\n            , 2];\n            hash = blockTag;\n            return [4\n            /*yield*/\n            , this.hashToNumber(blockTag)];\n\n          case 1:\n            number = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 2:\n            if (!BN.isBN(blockTag)) return [3\n            /*break*/\n            , 4];\n            number = blockTag;\n            return [4\n            /*yield*/\n            , this.numberToHash(blockTag)];\n\n          case 3:\n            hash = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            throw new Error('Unknown blockTag type');\n\n          case 5:\n            return [4\n            /*yield*/\n            , this.getHeader(hash, number)];\n\n          case 6:\n            header = _a.sent().raw;\n            _a.label = 7;\n\n          case 7:\n            _a.trys.push([7, 9,, 10]);\n\n            return [4\n            /*yield*/\n            , this.getBody(hash, number)];\n\n          case 8:\n            body = _a.sent();\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            e_1 = _a.sent();\n            body = [[], []];\n            return [3\n            /*break*/\n            , 10];\n\n          case 10:\n            return [2\n            /*return*/\n            , new Block([header].concat(body), {\n              common: this._common\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Fetches body of a block given its hash and number.\n   */\n\n\n  DBManager.prototype.getBody = function (hash, number) {\n    return __awaiter(this, void 0, void 0, function () {\n      var key, _a, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            key = util_1.bodyKey(number, hash);\n            _b = (_a = rlp).decode;\n            return [4\n            /*yield*/\n            , this.get(key, {\n              cache: 'body'\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.apply(_a, [_c.sent()])];\n        }\n      });\n    });\n  };\n  /**\n   * Fetches header of a block given its hash and number.\n   */\n\n\n  DBManager.prototype.getHeader = function (hash, number) {\n    return __awaiter(this, void 0, void 0, function () {\n      var key, encodedHeader;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            key = util_1.headerKey(number, hash);\n            return [4\n            /*yield*/\n            , this.get(key, {\n              cache: 'header'\n            })];\n\n          case 1:\n            encodedHeader = _a.sent();\n            return [2\n            /*return*/\n            , new Block.Header(rlp.decode(encodedHeader), {\n              common: this._common\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Fetches total difficulty for a block given its hash and number.\n   */\n\n\n  DBManager.prototype.getTd = function (hash, number) {\n    return __awaiter(this, void 0, void 0, function () {\n      var key, td;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            key = util_1.tdKey(number, hash);\n            return [4\n            /*yield*/\n            , this.get(key, {\n              cache: 'td'\n            })];\n\n          case 1:\n            td = _a.sent();\n            return [2\n            /*return*/\n            , new BN(rlp.decode(td))];\n        }\n      });\n    });\n  };\n  /**\n   * Performs a block hash to block number lookup.\n   */\n\n\n  DBManager.prototype.hashToNumber = function (hash) {\n    return __awaiter(this, void 0, void 0, function () {\n      var key, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            key = util_1.hashToNumberKey(hash);\n            _a = BN.bind;\n            return [4\n            /*yield*/\n            , this.get(key, {\n              cache: 'hashToNumber'\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , new (_a.apply(BN, [void 0, _b.sent()]))()];\n        }\n      });\n    });\n  };\n  /**\n   * Performs a block number to block hash lookup.\n   */\n\n\n  DBManager.prototype.numberToHash = function (number) {\n    return __awaiter(this, void 0, void 0, function () {\n      var key;\n      return __generator(this, function (_a) {\n        if (number.ltn(0)) {\n          throw new level.errors.NotFoundError();\n        }\n\n        key = util_1.numberToHashKey(number);\n        return [2\n        /*return*/\n        , this.get(key, {\n          cache: 'numberToHash'\n        })];\n      });\n    });\n  };\n  /**\n   * Fetches a key from the db. If `opts.cache` is specified\n   * it first tries to load from cache, and on cache miss will\n   * try to put the fetched item on cache afterwards.\n   */\n\n\n  DBManager.prototype.get = function (key, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var dbOpts, value;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            dbOpts = {\n              keyEncoding: opts.keyEncoding || 'binary',\n              valueEncoding: opts.valueEncoding || 'binary'\n            };\n            if (!opts.cache) return [3\n            /*break*/\n            , 3];\n\n            if (!this._cache[opts.cache]) {\n              throw new Error(\"Invalid cache: \" + opts.cache);\n            }\n\n            value = this._cache[opts.cache].get(key);\n            if (!!value) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this._db.get(key, dbOpts)];\n\n          case 1:\n            value = _a.sent();\n\n            this._cache[opts.cache].set(key, value);\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , value];\n\n          case 3:\n            return [2\n            /*return*/\n            , this._db.get(key, dbOpts)];\n        }\n      });\n    });\n  };\n  /**\n   * Performs a batch operation on db.\n   */\n\n\n  DBManager.prototype.batch = function (ops) {\n    return this._db.batch(ops);\n  };\n\n  return DBManager;\n}();\n\nexports.default = DBManager;","map":{"version":3,"mappings":"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","names":["level","require","Block","db","common","_db","_common","_cache","td","cache_1","max","header","body","numberToHash","hashToNumber","DBManager","get","util_1","valueEncoding","blockTag","Number","isInteger","BN","Buffer","isBuffer","hash","number","_a","isBN","Error","getHeader","raw","getBody","concat","key","_b","decode","cache","_c","encodedHeader","Header","rlp","ltn","errors","NotFoundError","opts","dbOpts","keyEncoding","value","set","ops","batch"],"sources":["../src/dbManager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}