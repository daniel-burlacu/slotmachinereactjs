{"ast":null,"code":"const Common = require('ethereumjs-common').default;\n\nconst ethUtil = require('ethereumjs-util');\n\nconst {\n  Transaction\n} = require('ethereumjs-tx');\n\nconst Trie = require('merkle-patricia-tree');\n\nconst BN = ethUtil.BN;\nconst rlp = ethUtil.rlp;\n\nconst async = require('async');\n\nconst BlockHeader = require('./header');\n/**\n * Creates a new block object\n * @constructor the raw serialized or the deserialized block.\n * @param {Array|Buffer|Object} data\n * @param {Array} opts Options\n * @param {String|Number} opts.chain The chain for the block [default: 'mainnet']\n * @param {String} opts.hardfork Hardfork for the block [default: null, block number-based behaviour]\n * @param {Object} opts.common Alternatively pass a Common instance (ethereumjs-common) instead of setting chain/hardfork directly\n * @prop {Header} header the block's header\n * @prop {Array.<Header>} uncleList an array of uncle headers\n * @prop {Array.<Buffer>} raw an array of buffers containing the raw blocks.\n */\n\n\nvar Block = module.exports = function (data, opts) {\n  opts = opts || {};\n\n  if (opts.common) {\n    if (opts.chain) {\n      throw new Error('Instantiation with both opts.common and opts.chain parameter not allowed!');\n    }\n\n    this._common = opts.common;\n  } else {\n    let chain = opts.chain ? opts.chain : 'mainnet';\n    let hardfork = opts.hardfork ? opts.hardfork : null;\n    this._common = new Common(chain, hardfork);\n  }\n\n  this.transactions = [];\n  this.uncleHeaders = [];\n  this._inBlockChain = false;\n  this.txTrie = new Trie();\n  Object.defineProperty(this, 'raw', {\n    get: function () {\n      return this.serialize(false);\n    }\n  });\n  var rawTransactions, rawUncleHeaders; // defaults\n\n  if (!data) {\n    data = [[], [], []];\n  }\n\n  if (Buffer.isBuffer(data)) {\n    data = rlp.decode(data);\n  }\n\n  if (Array.isArray(data)) {\n    this.header = new BlockHeader(data[0], opts);\n    rawTransactions = data[1];\n    rawUncleHeaders = data[2];\n  } else {\n    this.header = new BlockHeader(data.header, opts);\n    rawTransactions = data.transactions || [];\n    rawUncleHeaders = data.uncleHeaders || [];\n  } // parse uncle headers\n\n\n  for (var i = 0; i < rawUncleHeaders.length; i++) {\n    this.uncleHeaders.push(new BlockHeader(rawUncleHeaders[i], opts));\n  } // parse transactions\n\n\n  for (i = 0; i < rawTransactions.length; i++) {\n    var tx = new Transaction(rawTransactions[i], opts);\n    tx._homestead = true;\n    this.transactions.push(tx);\n  }\n};\n\nBlock.Header = BlockHeader;\n/**\n * Produces a hash the RLP of the block\n * @method hash\n */\n\nBlock.prototype.hash = function () {\n  return this.header.hash();\n};\n/**\n * Determines if a given block is the genesis block\n * @method isGenisis\n * @return Boolean\n */\n\n\nBlock.prototype.isGenesis = function () {\n  return this.header.isGenesis();\n};\n/**\n * turns the block into the canonical genesis block\n * @method setGenesisParams\n */\n\n\nBlock.prototype.setGenesisParams = function () {\n  this.header.setGenesisParams();\n};\n/**\n * Produces a serialization of the block.\n * @method serialize\n * @param {Boolean} rlpEncode whether to rlp encode the block or not\n */\n\n\nBlock.prototype.serialize = function (rlpEncode) {\n  var raw = [this.header.raw, [], []]; // rlpEnode defaults to true\n\n  if (typeof rlpEncode === 'undefined') {\n    rlpEncode = true;\n  }\n\n  this.transactions.forEach(function (tx) {\n    raw[1].push(tx.raw);\n  });\n  this.uncleHeaders.forEach(function (uncle) {\n    raw[2].push(uncle.raw);\n  });\n  return rlpEncode ? rlp.encode(raw) : raw;\n};\n/**\n * Generate transaction trie. The tx trie must be generated before the transaction trie can\n * be validated with `validateTransactionTrie`\n * @method genTxTrie\n * @param {Function} cb the callback\n */\n\n\nBlock.prototype.genTxTrie = function (cb) {\n  var i = 0;\n  var self = this;\n  async.eachSeries(this.transactions, function (tx, done) {\n    self.txTrie.put(rlp.encode(i), tx.serialize(), done);\n    i++;\n  }, cb);\n};\n/**\n * Validates the transaction trie\n * @method validateTransactionTrie\n * @return {Boolean}\n */\n\n\nBlock.prototype.validateTransactionsTrie = function () {\n  var txT = this.header.transactionsTrie.toString('hex');\n\n  if (this.transactions.length) {\n    return txT === this.txTrie.root.toString('hex');\n  } else {\n    return txT === ethUtil.SHA3_RLP.toString('hex');\n  }\n};\n/**\n * Validates the transactions\n * @method validateTransactions\n * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean\n * @return {Boolean}\n */\n\n\nBlock.prototype.validateTransactions = function (stringError) {\n  var errors = [];\n  this.transactions.forEach(function (tx, i) {\n    var error = tx.validate(true);\n\n    if (error) {\n      errors.push(error + ' at tx ' + i);\n    }\n  });\n\n  if (stringError === undefined || stringError === false) {\n    return errors.length === 0;\n  } else {\n    return arrayToString(errors);\n  }\n};\n/**\n * Validates the entire block. Returns a string to the callback if block is invalid\n * @method validate\n * @param {BlockChain} blockChain the blockchain that this block wants to be part of\n * @param {Function} cb the callback which is given a `String` if the block is not valid\n */\n\n\nBlock.prototype.validate = function (blockChain, cb) {\n  var self = this;\n  var errors = [];\n  async.parallel([// validate uncles\n  self.validateUncles.bind(self, blockChain), // validate block\n  self.header.validate.bind(self.header, blockChain), // generate the transaction trie\n  self.genTxTrie.bind(self)], function (err) {\n    if (err) {\n      errors.push(err);\n    }\n\n    if (!self.validateTransactionsTrie()) {\n      errors.push('invalid transaction trie');\n    }\n\n    var txErrors = self.validateTransactions(true);\n\n    if (txErrors !== '') {\n      errors.push(txErrors);\n    }\n\n    if (!self.validateUnclesHash()) {\n      errors.push('invalid uncle hash');\n    }\n\n    cb(arrayToString(errors));\n  });\n};\n/**\n * Validates the uncle's hash\n * @method validateUncleHash\n * @return {Boolean}\n */\n\n\nBlock.prototype.validateUnclesHash = function () {\n  var raw = [];\n  this.uncleHeaders.forEach(function (uncle) {\n    raw.push(uncle.raw);\n  });\n  raw = rlp.encode(raw);\n  return ethUtil.sha3(raw).toString('hex') === this.header.uncleHash.toString('hex');\n};\n/**\n * Validates the uncles that are in the block if any. Returns a string to the callback if uncles are invalid\n * @method validateUncles\n * @param {Blockchain} blockChaina an instance of the Blockchain\n * @param {Function} cb the callback\n */\n\n\nBlock.prototype.validateUncles = function (blockChain, cb) {\n  if (this.isGenesis()) {\n    return cb();\n  }\n\n  var self = this;\n\n  if (self.uncleHeaders.length > 2) {\n    return cb('too many uncle headers');\n  }\n\n  var uncleHashes = self.uncleHeaders.map(function (header) {\n    return header.hash().toString('hex');\n  });\n\n  if (!(new Set(uncleHashes).size === uncleHashes.length)) {\n    return cb('duplicate uncles');\n  }\n\n  async.each(self.uncleHeaders, function (uncle, cb2) {\n    var height = new BN(self.header.number);\n    async.parallel([uncle.validate.bind(uncle, blockChain, height), // check to make sure the uncle is not already in the blockchain\n    function (cb3) {\n      blockChain.getDetails(uncle.hash(), function (err, blockInfo) {\n        // TODO: remove uncles from BC\n        if (blockInfo && blockInfo.isUncle) {\n          cb3(err || 'uncle already included');\n        } else {\n          cb3();\n        }\n      });\n    }], cb2);\n  }, cb);\n};\n/**\n * Converts the block toJSON\n * @method toJSON\n * @param {Bool} labeled whether to create an labeled object or an array\n * @return {Object}\n */\n\n\nBlock.prototype.toJSON = function (labeled) {\n  if (labeled) {\n    var obj = {\n      header: this.header.toJSON(true),\n      transactions: [],\n      uncleHeaders: []\n    };\n    this.transactions.forEach(function (tx) {\n      obj.transactions.push(tx.toJSON(labeled));\n    });\n    this.uncleHeaders.forEach(function (uh) {\n      obj.uncleHeaders.push(uh.toJSON());\n    });\n    return obj;\n  } else {\n    return ethUtil.baToJSON(this.raw);\n  }\n};\n\nfunction arrayToString(array) {\n  try {\n    return array.reduce(function (str, err) {\n      if (str) {\n        str += ' ';\n      }\n\n      return str + err;\n    });\n  } catch (e) {\n    return '';\n  }\n}","map":{"version":3,"names":["Common","require","default","ethUtil","Transaction","Trie","BN","rlp","async","BlockHeader","Block","module","exports","data","opts","common","chain","Error","_common","hardfork","transactions","uncleHeaders","_inBlockChain","txTrie","Object","defineProperty","get","serialize","rawTransactions","rawUncleHeaders","Buffer","isBuffer","decode","Array","isArray","header","i","length","push","tx","_homestead","Header","prototype","hash","isGenesis","setGenesisParams","rlpEncode","raw","forEach","uncle","encode","genTxTrie","cb","self","eachSeries","done","put","validateTransactionsTrie","txT","transactionsTrie","toString","root","SHA3_RLP","validateTransactions","stringError","errors","error","validate","undefined","arrayToString","blockChain","parallel","validateUncles","bind","err","txErrors","validateUnclesHash","sha3","uncleHash","uncleHashes","map","Set","size","each","cb2","height","number","cb3","getDetails","blockInfo","isUncle","toJSON","labeled","obj","uh","baToJSON","array","reduce","str","e"],"sources":["F:/Games/slotmachinereact/node_modules/ganache-core/node_modules/ethereumjs-block/index.js"],"sourcesContent":["const Common = require('ethereumjs-common').default\nconst ethUtil = require('ethereumjs-util')\nconst { Transaction } = require('ethereumjs-tx')\nconst Trie = require('merkle-patricia-tree')\nconst BN = ethUtil.BN\nconst rlp = ethUtil.rlp\nconst async = require('async')\nconst BlockHeader = require('./header')\n\n/**\n * Creates a new block object\n * @constructor the raw serialized or the deserialized block.\n * @param {Array|Buffer|Object} data\n * @param {Array} opts Options\n * @param {String|Number} opts.chain The chain for the block [default: 'mainnet']\n * @param {String} opts.hardfork Hardfork for the block [default: null, block number-based behaviour]\n * @param {Object} opts.common Alternatively pass a Common instance (ethereumjs-common) instead of setting chain/hardfork directly\n * @prop {Header} header the block's header\n * @prop {Array.<Header>} uncleList an array of uncle headers\n * @prop {Array.<Buffer>} raw an array of buffers containing the raw blocks.\n */\nvar Block = module.exports = function (data, opts) {\n  opts = opts || {}\n\n  if (opts.common) {\n    if (opts.chain) {\n      throw new Error('Instantiation with both opts.common and opts.chain parameter not allowed!')\n    }\n    this._common = opts.common\n  } else {\n    let chain = opts.chain ? opts.chain : 'mainnet'\n    let hardfork = opts.hardfork ? opts.hardfork : null\n    this._common = new Common(chain, hardfork)\n  }\n\n  this.transactions = []\n  this.uncleHeaders = []\n  this._inBlockChain = false\n  this.txTrie = new Trie()\n\n  Object.defineProperty(this, 'raw', {\n    get: function () {\n      return this.serialize(false)\n    }\n  })\n\n  var rawTransactions, rawUncleHeaders\n\n  // defaults\n  if (!data) {\n    data = [[], [], []]\n  }\n\n  if (Buffer.isBuffer(data)) {\n    data = rlp.decode(data)\n  }\n\n  if (Array.isArray(data)) {\n    this.header = new BlockHeader(data[0], opts)\n    rawTransactions = data[1]\n    rawUncleHeaders = data[2]\n  } else {\n    this.header = new BlockHeader(data.header, opts)\n    rawTransactions = data.transactions || []\n    rawUncleHeaders = data.uncleHeaders || []\n  }\n\n  // parse uncle headers\n  for (var i = 0; i < rawUncleHeaders.length; i++) {\n    this.uncleHeaders.push(new BlockHeader(rawUncleHeaders[i], opts))\n  }\n\n  // parse transactions\n  for (i = 0; i < rawTransactions.length; i++) {\n    var tx = new Transaction(rawTransactions[i], opts)\n    tx._homestead = true\n    this.transactions.push(tx)\n  }\n}\n\nBlock.Header = BlockHeader\n\n/**\n * Produces a hash the RLP of the block\n * @method hash\n */\nBlock.prototype.hash = function () {\n  return this.header.hash()\n}\n\n/**\n * Determines if a given block is the genesis block\n * @method isGenisis\n * @return Boolean\n */\nBlock.prototype.isGenesis = function () {\n  return this.header.isGenesis()\n}\n\n/**\n * turns the block into the canonical genesis block\n * @method setGenesisParams\n */\nBlock.prototype.setGenesisParams = function () {\n  this.header.setGenesisParams()\n}\n\n/**\n * Produces a serialization of the block.\n * @method serialize\n * @param {Boolean} rlpEncode whether to rlp encode the block or not\n */\nBlock.prototype.serialize = function (rlpEncode) {\n  var raw = [this.header.raw, [],\n    []\n  ]\n\n  // rlpEnode defaults to true\n  if (typeof rlpEncode === 'undefined') {\n    rlpEncode = true\n  }\n\n  this.transactions.forEach(function (tx) {\n    raw[1].push(tx.raw)\n  })\n\n  this.uncleHeaders.forEach(function (uncle) {\n    raw[2].push(uncle.raw)\n  })\n\n  return rlpEncode ? rlp.encode(raw) : raw\n}\n\n/**\n * Generate transaction trie. The tx trie must be generated before the transaction trie can\n * be validated with `validateTransactionTrie`\n * @method genTxTrie\n * @param {Function} cb the callback\n */\nBlock.prototype.genTxTrie = function (cb) {\n  var i = 0\n  var self = this\n\n  async.eachSeries(this.transactions, function (tx, done) {\n    self.txTrie.put(rlp.encode(i), tx.serialize(), done)\n    i++\n  }, cb)\n}\n\n/**\n * Validates the transaction trie\n * @method validateTransactionTrie\n * @return {Boolean}\n */\nBlock.prototype.validateTransactionsTrie = function () {\n  var txT = this.header.transactionsTrie.toString('hex')\n  if (this.transactions.length) {\n    return txT === this.txTrie.root.toString('hex')\n  } else {\n    return txT === ethUtil.SHA3_RLP.toString('hex')\n  }\n}\n\n/**\n * Validates the transactions\n * @method validateTransactions\n * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean\n * @return {Boolean}\n */\nBlock.prototype.validateTransactions = function (stringError) {\n  var errors = []\n\n  this.transactions.forEach(function (tx, i) {\n    var error = tx.validate(true)\n    if (error) {\n      errors.push(error + ' at tx ' + i)\n    }\n  })\n\n  if (stringError === undefined || stringError === false) {\n    return errors.length === 0\n  } else {\n    return arrayToString(errors)\n  }\n}\n\n/**\n * Validates the entire block. Returns a string to the callback if block is invalid\n * @method validate\n * @param {BlockChain} blockChain the blockchain that this block wants to be part of\n * @param {Function} cb the callback which is given a `String` if the block is not valid\n */\nBlock.prototype.validate = function (blockChain, cb) {\n  var self = this\n  var errors = []\n\n  async.parallel([\n    // validate uncles\n    self.validateUncles.bind(self, blockChain),\n    // validate block\n    self.header.validate.bind(self.header, blockChain),\n    // generate the transaction trie\n    self.genTxTrie.bind(self)\n  ], function (err) {\n    if (err) {\n      errors.push(err)\n    }\n\n    if (!self.validateTransactionsTrie()) {\n      errors.push('invalid transaction trie')\n    }\n\n    var txErrors = self.validateTransactions(true)\n    if (txErrors !== '') {\n      errors.push(txErrors)\n    }\n\n    if (!self.validateUnclesHash()) {\n      errors.push('invalid uncle hash')\n    }\n\n    cb(arrayToString(errors))\n  })\n}\n\n/**\n * Validates the uncle's hash\n * @method validateUncleHash\n * @return {Boolean}\n */\nBlock.prototype.validateUnclesHash = function () {\n  var raw = []\n  this.uncleHeaders.forEach(function (uncle) {\n    raw.push(uncle.raw)\n  })\n\n  raw = rlp.encode(raw)\n  return ethUtil.sha3(raw).toString('hex') === this.header.uncleHash.toString('hex')\n}\n\n/**\n * Validates the uncles that are in the block if any. Returns a string to the callback if uncles are invalid\n * @method validateUncles\n * @param {Blockchain} blockChaina an instance of the Blockchain\n * @param {Function} cb the callback\n */\nBlock.prototype.validateUncles = function (blockChain, cb) {\n  if (this.isGenesis()) {\n    return cb()\n  }\n\n  var self = this\n\n  if (self.uncleHeaders.length > 2) {\n    return cb('too many uncle headers')\n  }\n\n  var uncleHashes = self.uncleHeaders.map(function (header) {\n    return header.hash().toString('hex')\n  })\n\n  if (!((new Set(uncleHashes)).size === uncleHashes.length)) {\n    return cb('duplicate uncles')\n  }\n\n  async.each(self.uncleHeaders, function (uncle, cb2) {\n    var height = new BN(self.header.number)\n    async.parallel([\n      uncle.validate.bind(uncle, blockChain, height),\n      // check to make sure the uncle is not already in the blockchain\n      function (cb3) {\n        blockChain.getDetails(uncle.hash(), function (err, blockInfo) {\n          // TODO: remove uncles from BC\n          if (blockInfo && blockInfo.isUncle) {\n            cb3(err || 'uncle already included')\n          } else {\n            cb3()\n          }\n        })\n      }\n    ], cb2)\n  }, cb)\n}\n\n/**\n * Converts the block toJSON\n * @method toJSON\n * @param {Bool} labeled whether to create an labeled object or an array\n * @return {Object}\n */\nBlock.prototype.toJSON = function (labeled) {\n  if (labeled) {\n    var obj = {\n      header: this.header.toJSON(true),\n      transactions: [],\n      uncleHeaders: []\n    }\n\n    this.transactions.forEach(function (tx) {\n      obj.transactions.push(tx.toJSON(labeled))\n    })\n\n    this.uncleHeaders.forEach(function (uh) {\n      obj.uncleHeaders.push(uh.toJSON())\n    })\n    return obj\n  } else {\n    return ethUtil.baToJSON(this.raw)\n  }\n}\n\nfunction arrayToString (array) {\n  try {\n    return array.reduce(function (str, err) {\n      if (str) {\n        str += ' '\n      }\n      return str + err\n    })\n  } catch (e) {\n    return ''\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}