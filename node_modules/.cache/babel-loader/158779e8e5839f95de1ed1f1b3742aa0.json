{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBuildCommand = exports.compileNativeSolc = void 0;\n\nconst path_1 = require(\"path\");\n\nconst compilerInput_1 = require(\"./compilerInput\");\n\nconst executeCommand_1 = require(\"./executeCommand\");\n\nfunction compileNativeSolc(config) {\n  return async function compile(sources) {\n    const command = createBuildCommand(config);\n    const input = compilerInput_1.getCompilerInput(sources, config.compilerOptions, 'Solidity');\n    const output = await executeCommand_1.executeCommand(command, input);\n    return JSON.parse(output);\n  };\n}\n\nexports.compileNativeSolc = compileNativeSolc;\n\nfunction createBuildCommand(config) {\n  const command = 'solc';\n  const params = '--standard-json';\n  const customAllowedPaths = config.compilerAllowedPaths.map(path => path_1.resolve(path));\n  const allowedPaths = [path_1.resolve(config.sourceDirectory), path_1.resolve(config.nodeModulesDirectory), ...customAllowedPaths];\n  return `${command} ${params} --allow-paths ${allowedPaths.join(',')}`;\n}\n\nexports.createBuildCommand = createBuildCommand;","map":{"version":3,"names":["Object","defineProperty","exports","value","createBuildCommand","compileNativeSolc","path_1","require","compilerInput_1","executeCommand_1","config","compile","sources","command","input","getCompilerInput","compilerOptions","output","executeCommand","JSON","parse","params","customAllowedPaths","compilerAllowedPaths","map","path","resolve","allowedPaths","sourceDirectory","nodeModulesDirectory","join"],"sources":["F:/Games/slotmachinereact/node_modules/@ethereum-waffle/compiler/dist/cjs/compileNativeSolc.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createBuildCommand = exports.compileNativeSolc = void 0;\nconst path_1 = require(\"path\");\nconst compilerInput_1 = require(\"./compilerInput\");\nconst executeCommand_1 = require(\"./executeCommand\");\nfunction compileNativeSolc(config) {\n    return async function compile(sources) {\n        const command = createBuildCommand(config);\n        const input = compilerInput_1.getCompilerInput(sources, config.compilerOptions, 'Solidity');\n        const output = await executeCommand_1.executeCommand(command, input);\n        return JSON.parse(output);\n    };\n}\nexports.compileNativeSolc = compileNativeSolc;\nfunction createBuildCommand(config) {\n    const command = 'solc';\n    const params = '--standard-json';\n    const customAllowedPaths = config.compilerAllowedPaths\n        .map((path) => path_1.resolve(path));\n    const allowedPaths = [\n        path_1.resolve(config.sourceDirectory),\n        path_1.resolve(config.nodeModulesDirectory),\n        ...customAllowedPaths\n    ];\n    return `${command} ${params} --allow-paths ${allowedPaths.join(',')}`;\n}\nexports.createBuildCommand = createBuildCommand;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6BF,OAAO,CAACG,iBAAR,GAA4B,KAAK,CAA9D;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,kBAAD,CAAhC;;AACA,SAASF,iBAAT,CAA2BK,MAA3B,EAAmC;EAC/B,OAAO,eAAeC,OAAf,CAAuBC,OAAvB,EAAgC;IACnC,MAAMC,OAAO,GAAGT,kBAAkB,CAACM,MAAD,CAAlC;IACA,MAAMI,KAAK,GAAGN,eAAe,CAACO,gBAAhB,CAAiCH,OAAjC,EAA0CF,MAAM,CAACM,eAAjD,EAAkE,UAAlE,CAAd;IACA,MAAMC,MAAM,GAAG,MAAMR,gBAAgB,CAACS,cAAjB,CAAgCL,OAAhC,EAAyCC,KAAzC,CAArB;IACA,OAAOK,IAAI,CAACC,KAAL,CAAWH,MAAX,CAAP;EACH,CALD;AAMH;;AACDf,OAAO,CAACG,iBAAR,GAA4BA,iBAA5B;;AACA,SAASD,kBAAT,CAA4BM,MAA5B,EAAoC;EAChC,MAAMG,OAAO,GAAG,MAAhB;EACA,MAAMQ,MAAM,GAAG,iBAAf;EACA,MAAMC,kBAAkB,GAAGZ,MAAM,CAACa,oBAAP,CACtBC,GADsB,CACjBC,IAAD,IAAUnB,MAAM,CAACoB,OAAP,CAAeD,IAAf,CADQ,CAA3B;EAEA,MAAME,YAAY,GAAG,CACjBrB,MAAM,CAACoB,OAAP,CAAehB,MAAM,CAACkB,eAAtB,CADiB,EAEjBtB,MAAM,CAACoB,OAAP,CAAehB,MAAM,CAACmB,oBAAtB,CAFiB,EAGjB,GAAGP,kBAHc,CAArB;EAKA,OAAQ,GAAET,OAAQ,IAAGQ,MAAO,kBAAiBM,YAAY,CAACG,IAAb,CAAkB,GAAlB,CAAuB,EAApE;AACH;;AACD5B,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B"},"metadata":{},"sourceType":"script"}