{"ast":null,"code":"// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nconst debug = require(\"debug\")(\"ganache\"); // we use optional dependencies which may, or may not exist, so try native first\n\n\ntry {\n  // make sure these exist before we try to load ganache with native modules\n  const optionalDependencies = require(\"./package.json\").optionalDependencies;\n\n  const wrongWeb3 = require(\"web3/package.json\").version !== optionalDependencies.web3;\n  const wrongEthereumJs = require(\"ethereumjs-wallet/package.json\").version !== optionalDependencies[\"ethereumjs-wallet\"];\n\n  if (wrongWeb3 || wrongEthereumJs) {\n    useBundled();\n  } else {\n    module.exports = require(\"./public-exports.js\");\n    module.exports._webpacked = false;\n    debug(\"Optional dependencies installed; exporting ganache-core with native optional dependencies.\");\n  }\n} catch (nativeError) {\n  debug(nativeError); // grabbing the native/optional deps failed, try using our webpacked build.\n\n  useBundled();\n}\n\nfunction useBundled() {\n  try {\n    module.exports = require(\"./build/ganache.core.node.js\");\n    module.exports._webpacked = true;\n    debug(\"Optional dependencies not installed; exporting ganache-core from `./build` directory.\");\n  } catch (webpackError) {\n    debug(\"ganache-core could not be exported; optional dependencies nor webpack build available for export.\");\n    throw webpackError;\n  }\n}","map":{"version":3,"names":["require","debug","optionalDependencies","wrongWeb3","version","web3","wrongEthereumJs","useBundled","module","exports","_webpacked","nativeError","webpackError"],"sources":["F:/Games/slotmachinereact/node_modules/ganache-core/index.js"],"sourcesContent":["// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nconst debug = require(\"debug\")(\"ganache\");\n\n// we use optional dependencies which may, or may not exist, so try native first\ntry {\n  // make sure these exist before we try to load ganache with native modules\n  const optionalDependencies = require(\"./package.json\").optionalDependencies;\n  const wrongWeb3 = require(\"web3/package.json\").version !== optionalDependencies.web3;\n  const wrongEthereumJs =\n    require(\"ethereumjs-wallet/package.json\").version !== optionalDependencies[\"ethereumjs-wallet\"];\n  if (wrongWeb3 || wrongEthereumJs) {\n    useBundled();\n  } else {\n    module.exports = require(\"./public-exports.js\");\n    module.exports._webpacked = false;\n    debug(\"Optional dependencies installed; exporting ganache-core with native optional dependencies.\");\n  }\n} catch (nativeError) {\n  debug(nativeError);\n\n  // grabbing the native/optional deps failed, try using our webpacked build.\n  useBundled();\n}\n\nfunction useBundled() {\n  try {\n    module.exports = require(\"./build/ganache.core.node.js\");\n    module.exports._webpacked = true;\n    debug(\"Optional dependencies not installed; exporting ganache-core from `./build` directory.\");\n  } catch (webpackError) {\n    debug(\"ganache-core could not be exported; optional dependencies nor webpack build available for export.\");\n    throw webpackError;\n  }\n}\n"],"mappings":"AAAA;AACAA,OAAO,CAAC,6BAAD,CAAP;;AAEA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,SAAjB,CAAd,C,CAEA;;;AACA,IAAI;EACF;EACA,MAAME,oBAAoB,GAAGF,OAAO,CAAC,gBAAD,CAAP,CAA0BE,oBAAvD;;EACA,MAAMC,SAAS,GAAGH,OAAO,CAAC,mBAAD,CAAP,CAA6BI,OAA7B,KAAyCF,oBAAoB,CAACG,IAAhF;EACA,MAAMC,eAAe,GACnBN,OAAO,CAAC,gCAAD,CAAP,CAA0CI,OAA1C,KAAsDF,oBAAoB,CAAC,mBAAD,CAD5E;;EAEA,IAAIC,SAAS,IAAIG,eAAjB,EAAkC;IAChCC,UAAU;EACX,CAFD,MAEO;IACLC,MAAM,CAACC,OAAP,GAAiBT,OAAO,CAAC,qBAAD,CAAxB;IACAQ,MAAM,CAACC,OAAP,CAAeC,UAAf,GAA4B,KAA5B;IACAT,KAAK,CAAC,4FAAD,CAAL;EACD;AACF,CAbD,CAaE,OAAOU,WAAP,EAAoB;EACpBV,KAAK,CAACU,WAAD,CAAL,CADoB,CAGpB;;EACAJ,UAAU;AACX;;AAED,SAASA,UAAT,GAAsB;EACpB,IAAI;IACFC,MAAM,CAACC,OAAP,GAAiBT,OAAO,CAAC,8BAAD,CAAxB;IACAQ,MAAM,CAACC,OAAP,CAAeC,UAAf,GAA4B,IAA5B;IACAT,KAAK,CAAC,uFAAD,CAAL;EACD,CAJD,CAIE,OAAOW,YAAP,EAAqB;IACrBX,KAAK,CAAC,mGAAD,CAAL;IACA,MAAMW,YAAN;EACD;AACF"},"metadata":{},"sourceType":"script"}