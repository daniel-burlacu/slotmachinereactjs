{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\CalculateScore.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Constants from '../Constants';\n/*\r\nReceiving spinResults={props.resultsArray} \r\n          spinResultsIdx={props.resultsArrayIdx} \r\n          myBet={bet} \r\n          setCallbackScore={callbackScore} \r\n          game={props.game}\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet show = 0;\n\nconst CalculateScore = props => {\n  _s();\n\n  const [score, setScore] = useState(2);\n  /*Controling the calculation working score part !!!*********************/\n\n  if (show !== props.game) {\n    let scoreRef = 0;\n    let bet = 0;\n    let results = [];\n    let spinResults = props.spinResults;\n    let spinResultsIdx = props.spinResultsIdx; //  let bet = 0;\n\n    let winningLines = [];\n    let countWin = 0;\n    let symbolSellection = [];\n    let randomNr = 0;\n    const symbols = Constants.REEL_SYMBOLS;\n    let scr = 0;\n    /**Testing part  */\n\n    console.log(\"Our CalculateScore bet is: \" + props.myBet);\n    console.log(\"Our CalculateScore results: \" + props.spinResults);\n    console.log(\"Our CalculateScore resultsIDX are: \" + props.spinResultsIdx);\n\n    for (let i = 0; i < 1000; i++) {\n      scr = score + i;\n    }\n\n    setTimeout(() => {\n      setScore(scr);\n      props.setCallbackScore(scr);\n      show = props.game;\n    }, 7500);\n    /**END of testing part */\n\n    /******************************************/\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [\"Score:\", /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"score\",\n      children: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CalculateScore, \"cidTy/0QTqYWV6l0yj/74goiK7s=\");\n\n_c = CalculateScore;\nexport default CalculateScore;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalculateScore\");","map":{"version":3,"names":["React","useEffect","useState","Constants","show","CalculateScore","props","score","setScore","game","scoreRef","bet","results","spinResults","spinResultsIdx","winningLines","countWin","symbolSellection","randomNr","symbols","REEL_SYMBOLS","scr","console","log","myBet","i","setTimeout","setCallbackScore"],"sources":["F:/Games/slotmachinereact/src/components/CalculateScore.js"],"sourcesContent":["import React,{useEffect, useState} from 'react';\r\nimport Constants from '../Constants'\r\n\r\n/*\r\nReceiving spinResults={props.resultsArray} \r\n          spinResultsIdx={props.resultsArrayIdx} \r\n          myBet={bet} \r\n          setCallbackScore={callbackScore} \r\n          game={props.game}\r\n*/\r\n\r\nlet show = 0;\r\n\r\nconst CalculateScore = (props) => {\r\n    const [score, setScore] = useState(2);\r\n\r\n /*Controling the calculation working score part !!!*********************/\r\n if(show!==props.game){\r\n\r\n    let scoreRef = 0;\r\n    let bet =0;\r\n    \r\n    let results = [];\r\n\r\n    let spinResults = props.spinResults;\r\n    let spinResultsIdx = props.spinResultsIdx;\r\n    \r\n  //  let bet = 0;\r\n    let winningLines = [];\r\n    let countWin = 0;\r\n    let symbolSellection = [];\r\n    let randomNr = 0;\r\n    const symbols = Constants.REEL_SYMBOLS;\r\n    let scr=0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**Testing part  */  \r\n  console.log(\"Our CalculateScore bet is: \"+props.myBet)\r\n  console.log(\"Our CalculateScore results: \"+props.spinResults);\r\n  console.log(\"Our CalculateScore resultsIDX are: \"+props.spinResultsIdx);\r\n  \r\n    for(let i=0; i<1000;i++){\r\n    scr=score+i;\r\n    }\r\n    setTimeout(()=>{\r\n        setScore(scr);\r\n        props.setCallbackScore(scr);\r\n        show=props.game;\r\n    },7500)\r\n/**END of testing part */  \r\n\r\n/******************************************/  \r\n    }\r\n    \r\n \r\n    return (      \r\n        <label>\r\n        Score:<span id=\"score\">{score}</span>\r\n    </label>\r\n    )\r\n}\r\n\r\nexport default CalculateScore;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAIC,IAAI,GAAG,CAAX;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;EAAA;;EAC9B,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,CAAD,CAAlC;EAEH;;EACA,IAAGE,IAAI,KAAGE,KAAK,CAACG,IAAhB,EAAqB;IAElB,IAAIC,QAAQ,GAAG,CAAf;IACA,IAAIC,GAAG,GAAE,CAAT;IAEA,IAAIC,OAAO,GAAG,EAAd;IAEA,IAAIC,WAAW,GAAGP,KAAK,CAACO,WAAxB;IACA,IAAIC,cAAc,GAAGR,KAAK,CAACQ,cAA3B,CARkB,CAUpB;;IACE,IAAIC,YAAY,GAAG,EAAnB;IACA,IAAIC,QAAQ,GAAG,CAAf;IACA,IAAIC,gBAAgB,GAAG,EAAvB;IACA,IAAIC,QAAQ,GAAG,CAAf;IACA,MAAMC,OAAO,GAAGhB,SAAS,CAACiB,YAA1B;IACA,IAAIC,GAAG,GAAC,CAAR;IAgBJ;;IACEC,OAAO,CAACC,GAAR,CAAY,gCAA8BjB,KAAK,CAACkB,KAAhD;IACAF,OAAO,CAACC,GAAR,CAAY,iCAA+BjB,KAAK,CAACO,WAAjD;IACAS,OAAO,CAACC,GAAR,CAAY,wCAAsCjB,KAAK,CAACQ,cAAxD;;IAEE,KAAI,IAAIW,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,IAAf,EAAoBA,CAAC,EAArB,EAAwB;MACxBJ,GAAG,GAACd,KAAK,GAACkB,CAAV;IACC;;IACDC,UAAU,CAAC,MAAI;MACXlB,QAAQ,CAACa,GAAD,CAAR;MACAf,KAAK,CAACqB,gBAAN,CAAuBN,GAAvB;MACAjB,IAAI,GAACE,KAAK,CAACG,IAAX;IACH,CAJS,EAIR,IAJQ,CAAV;IAKJ;;IAEA;EACK;;EAGD,oBACI;IAAA,kCACM;MAAM,EAAE,EAAC,OAAT;MAAA,UAAkBF;IAAlB;MAAA;MAAA;MAAA;IAAA,QADN;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CA5DD;;GAAMF,c;;KAAAA,c;AA8DN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}