{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n\nThis is the core of the Ethereum Virtual Machine (EVM or just VM).\n\nNOTES:\n\nstack items are lazily duplicated.\nSo you must never directly change a buffer from the stack,\ninstead you should `copy` it first\n\nnot all stack items are 32 bytes, so if the operation relies on the stack\nitem length then you must use utils.pad(<item>, 32) first.\n*/\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar txContext_1 = require(\"./evm/txContext\");\n\nvar message_1 = require(\"./evm/message\");\n\nvar evm_1 = require(\"./evm/evm\");\n\nvar Block = require('ethereumjs-block');\n/**\n * @ignore\n */\n\n\nfunction runCode(opts) {\n  if (!opts.block) {\n    opts.block = new Block();\n  } // Backwards compatibility\n\n\n  if (!opts.txContext) {\n    opts.txContext = new txContext_1.default(opts.gasPrice || Buffer.alloc(0), opts.origin || opts.caller || ethereumjs_util_1.zeros(32));\n  }\n\n  if (!opts.message) {\n    opts.message = new message_1.default({\n      code: opts.code,\n      data: opts.data,\n      gasLimit: opts.gasLimit,\n      to: opts.address || ethereumjs_util_1.zeros(32),\n      caller: opts.caller,\n      value: opts.value,\n      depth: opts.depth || 0,\n      selfdestruct: opts.selfdestruct || {},\n      isStatic: opts.isStatic || false\n    });\n  }\n\n  var evm = opts.evm;\n\n  if (!evm) {\n    evm = new evm_1.default(this, opts.txContext, opts.block);\n  }\n\n  return evm.runInterpreter(opts.message, {\n    pc: opts.pc\n  });\n}\n\nexports.default = runCode;","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;;;;;;;AAaA;;AAEA;;AACA;;AACA;;AACA,IAAMA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAArB;AAmDA;;;;;AAGA,SAAwBC,OAAxB,CAA0CC,IAA1C,EAA2D;EACzD,IAAI,CAACA,IAAI,CAACC,KAAV,EAAiB;IACfD,IAAI,CAACC,KAAL,GAAa,IAAIJ,KAAJ,EAAb;EACD,CAHwD,CAKzD;;;EACA,IAAI,CAACG,IAAI,CAACE,SAAV,EAAqB;IACnBF,IAAI,CAACE,SAAL,GAAiB,IAAIC,mBAAJ,CACfH,IAAI,CAACI,QAAL,IAAiBC,MAAM,CAACC,KAAP,CAAa,CAAb,CADF,EAEfN,IAAI,CAACO,MAAL,IAAeP,IAAI,CAACQ,MAApB,IAA8BC,wBAAM,EAAN,CAFf,CAAjB;EAID;;EACD,IAAI,CAACT,IAAI,CAACU,OAAV,EAAmB;IACjBV,IAAI,CAACU,OAAL,GAAe,IAAIC,iBAAJ,CAAY;MACzBC,IAAI,EAAEZ,IAAI,CAACY,IADc;MAEzBC,IAAI,EAAEb,IAAI,CAACa,IAFc;MAGzBC,QAAQ,EAAEd,IAAI,CAACc,QAHU;MAIzBC,EAAE,EAAEf,IAAI,CAACgB,OAAL,IAAgBP,wBAAM,EAAN,CAJK;MAKzBD,MAAM,EAAER,IAAI,CAACQ,MALY;MAMzBS,KAAK,EAAEjB,IAAI,CAACiB,KANa;MAOzBC,KAAK,EAAElB,IAAI,CAACkB,KAAL,IAAc,CAPI;MAQzBC,YAAY,EAAEnB,IAAI,CAACmB,YAAL,IAAqB,EARV;MASzBC,QAAQ,EAAEpB,IAAI,CAACoB,QAAL,IAAiB;IATF,CAAZ,CAAf;EAWD;;EAED,IAAIC,GAAG,GAAGrB,IAAI,CAACqB,GAAf;;EACA,IAAI,CAACA,GAAL,EAAU;IACRA,GAAG,GAAG,IAAIC,aAAJ,CAAQ,IAAR,EAActB,IAAI,CAACE,SAAnB,EAA8BF,IAAI,CAACC,KAAnC,CAAN;EACD;;EAED,OAAOoB,GAAG,CAACE,cAAJ,CAAmBvB,IAAI,CAACU,OAAxB,EAAiC;IAAEc,EAAE,EAAExB,IAAI,CAACwB;EAAX,CAAjC,CAAP;AACD;;AAhCDC","names":["Block","require","runCode","opts","block","txContext","txContext_1","gasPrice","Buffer","alloc","origin","caller","ethereumjs_util_1","message","message_1","code","data","gasLimit","to","address","value","depth","selfdestruct","isStatic","evm","evm_1","runInterpreter","pc","exports"],"sources":["../lib/runCode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}