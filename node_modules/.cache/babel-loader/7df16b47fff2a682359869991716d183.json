{"ast":null,"code":"\"use strict\";\n\nvar level = require('level-mem');\n\nvar async = require('async');\n\nvar WriteStream = require('level-ws');\n\nvar callTogether = require('./util').callTogether;\n\nvar ScratchReadStream = require('./scratchReadStream');\n\nmodule.exports = checkpointInterface;\n\nfunction checkpointInterface(trie) {\n  this._scratch = null;\n  trie._checkpoints = [];\n  Object.defineProperty(trie, 'isCheckpoint', {\n    get: function get() {\n      return !!trie._checkpoints.length;\n    }\n  }); // new methods\n\n  trie.checkpoint = checkpoint;\n  trie.commit = commit;\n  trie.revert = revert;\n  trie._enterCpMode = _enterCpMode;\n  trie._exitCpMode = _exitCpMode;\n  trie.createScratchReadStream = createScratchReadStream; // overwrites\n\n  trie.copy = copy.bind(trie, trie.copy.bind(trie));\n}\n/**\n * Creates a checkpoint that can later be reverted to or committed. After this is called, no changes to the trie will be permanently saved until `commit` is called\n * @method checkpoint\n * @private\n */\n\n\nfunction checkpoint() {\n  var self = this;\n  var wasCheckpoint = self.isCheckpoint;\n\n  self._checkpoints.push(self.root);\n\n  if (!wasCheckpoint && self.isCheckpoint) {\n    self._enterCpMode();\n  }\n}\n/**\n * commits a checkpoint to disk\n * @method commit\n * @private\n * @param {Function} cb the callback\n */\n\n\nfunction commit(cb) {\n  var self = this;\n  cb = callTogether(cb, self.sem.leave);\n  self.sem.take(function () {\n    if (self.isCheckpoint) {\n      self._checkpoints.pop();\n\n      if (!self.isCheckpoint) {\n        self._exitCpMode(true, cb);\n      } else {\n        cb();\n      }\n    } else {\n      throw new Error('trying to commit when not checkpointed');\n    }\n  });\n}\n/**\n * Reverts the trie to the state it was at when `checkpoint` was first called.\n * @method revert\n * @private\n * @param {Function} cb the callback\n */\n\n\nfunction revert(cb) {\n  var self = this;\n  cb = callTogether(cb, self.sem.leave);\n  self.sem.take(function () {\n    if (self.isCheckpoint) {\n      self.root = self._checkpoints.pop();\n\n      if (!self.isCheckpoint) {\n        self._exitCpMode(false, cb);\n\n        return;\n      }\n    }\n\n    cb();\n  });\n} // enter into checkpoint mode\n\n\nfunction _enterCpMode() {\n  this._scratch = level();\n  this._getDBs = [this._scratch].concat(this._getDBs);\n  this.__putDBs = this._putDBs;\n  this._putDBs = [this._scratch];\n  this._putRaw = this.putRaw;\n  this.putRaw = putRaw;\n} // exit from checkpoint mode\n\n\nfunction _exitCpMode(commitState, cb) {\n  var self = this;\n  var scratch = this._scratch;\n  this._scratch = null;\n  this._getDBs = this._getDBs.slice(1);\n  this._putDBs = this.__putDBs;\n  this.putRaw = this._putRaw;\n\n  function flushScratch(db, cb) {\n    self.createScratchReadStream(scratch).pipe(WriteStream(db)).on('close', cb);\n  }\n\n  if (commitState) {\n    async.map(this._putDBs, flushScratch, cb);\n  } else {\n    cb();\n  }\n} // adds the interface when copying the trie\n\n\nfunction copy(_super) {\n  var trie = _super();\n\n  checkpointInterface.call(trie, trie);\n  trie._scratch = this._scratch; // trie._checkpoints = this._checkpoints.slice()\n\n  return trie;\n}\n\nfunction putRaw(key, val, cb) {\n  function dbPut(db, cb2) {\n    db.put(key, val, {\n      keyEncoding: 'binary',\n      valueEncoding: 'binary'\n    }, cb2);\n  }\n\n  async.each(this.__putDBs, dbPut, cb);\n}\n\nfunction createScratchReadStream(scratch) {\n  var trie = this.copy();\n  scratch = scratch || this._scratch; // only read from the scratch\n\n  trie._getDBs = [scratch];\n  trie._scratch = scratch;\n  return new ScratchReadStream(trie);\n}","map":{"version":3,"names":["level","require","async","WriteStream","callTogether","ScratchReadStream","module","exports","checkpointInterface","trie","_scratch","_checkpoints","Object","defineProperty","get","length","checkpoint","commit","revert","_enterCpMode","_exitCpMode","createScratchReadStream","copy","bind","self","wasCheckpoint","isCheckpoint","push","root","cb","sem","leave","take","pop","Error","_getDBs","concat","__putDBs","_putDBs","_putRaw","putRaw","commitState","scratch","slice","flushScratch","db","pipe","on","map","_super","call","key","val","dbPut","cb2","put","keyEncoding","valueEncoding","each"],"sources":["F:/Games/slotmachinereact/node_modules/ganache-core/node_modules/merkle-patricia-tree/checkpoint-interface.js"],"sourcesContent":["\"use strict\";\n\nvar level = require('level-mem');\n\nvar async = require('async');\n\nvar WriteStream = require('level-ws');\n\nvar callTogether = require('./util').callTogether;\n\nvar ScratchReadStream = require('./scratchReadStream');\n\nmodule.exports = checkpointInterface;\n\nfunction checkpointInterface(trie) {\n  this._scratch = null;\n  trie._checkpoints = [];\n  Object.defineProperty(trie, 'isCheckpoint', {\n    get: function get() {\n      return !!trie._checkpoints.length;\n    }\n  }); // new methods\n\n  trie.checkpoint = checkpoint;\n  trie.commit = commit;\n  trie.revert = revert;\n  trie._enterCpMode = _enterCpMode;\n  trie._exitCpMode = _exitCpMode;\n  trie.createScratchReadStream = createScratchReadStream; // overwrites\n\n  trie.copy = copy.bind(trie, trie.copy.bind(trie));\n}\n/**\n * Creates a checkpoint that can later be reverted to or committed. After this is called, no changes to the trie will be permanently saved until `commit` is called\n * @method checkpoint\n * @private\n */\n\n\nfunction checkpoint() {\n  var self = this;\n  var wasCheckpoint = self.isCheckpoint;\n\n  self._checkpoints.push(self.root);\n\n  if (!wasCheckpoint && self.isCheckpoint) {\n    self._enterCpMode();\n  }\n}\n/**\n * commits a checkpoint to disk\n * @method commit\n * @private\n * @param {Function} cb the callback\n */\n\n\nfunction commit(cb) {\n  var self = this;\n  cb = callTogether(cb, self.sem.leave);\n  self.sem.take(function () {\n    if (self.isCheckpoint) {\n      self._checkpoints.pop();\n\n      if (!self.isCheckpoint) {\n        self._exitCpMode(true, cb);\n      } else {\n        cb();\n      }\n    } else {\n      throw new Error('trying to commit when not checkpointed');\n    }\n  });\n}\n/**\n * Reverts the trie to the state it was at when `checkpoint` was first called.\n * @method revert\n * @private\n * @param {Function} cb the callback\n */\n\n\nfunction revert(cb) {\n  var self = this;\n  cb = callTogether(cb, self.sem.leave);\n  self.sem.take(function () {\n    if (self.isCheckpoint) {\n      self.root = self._checkpoints.pop();\n\n      if (!self.isCheckpoint) {\n        self._exitCpMode(false, cb);\n\n        return;\n      }\n    }\n\n    cb();\n  });\n} // enter into checkpoint mode\n\n\nfunction _enterCpMode() {\n  this._scratch = level();\n  this._getDBs = [this._scratch].concat(this._getDBs);\n  this.__putDBs = this._putDBs;\n  this._putDBs = [this._scratch];\n  this._putRaw = this.putRaw;\n  this.putRaw = putRaw;\n} // exit from checkpoint mode\n\n\nfunction _exitCpMode(commitState, cb) {\n  var self = this;\n  var scratch = this._scratch;\n  this._scratch = null;\n  this._getDBs = this._getDBs.slice(1);\n  this._putDBs = this.__putDBs;\n  this.putRaw = this._putRaw;\n\n  function flushScratch(db, cb) {\n    self.createScratchReadStream(scratch).pipe(WriteStream(db)).on('close', cb);\n  }\n\n  if (commitState) {\n    async.map(this._putDBs, flushScratch, cb);\n  } else {\n    cb();\n  }\n} // adds the interface when copying the trie\n\n\nfunction copy(_super) {\n  var trie = _super();\n\n  checkpointInterface.call(trie, trie);\n  trie._scratch = this._scratch; // trie._checkpoints = this._checkpoints.slice()\n\n  return trie;\n}\n\nfunction putRaw(key, val, cb) {\n  function dbPut(db, cb2) {\n    db.put(key, val, {\n      keyEncoding: 'binary',\n      valueEncoding: 'binary'\n    }, cb2);\n  }\n\n  async.each(this.__putDBs, dbPut, cb);\n}\n\nfunction createScratchReadStream(scratch) {\n  var trie = this.copy();\n  scratch = scratch || this._scratch; // only read from the scratch\n\n  trie._getDBs = [scratch];\n  trie._scratch = scratch;\n  return new ScratchReadStream(trie);\n}"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AAEA,IAAIE,WAAW,GAAGF,OAAO,CAAC,UAAD,CAAzB;;AAEA,IAAIG,YAAY,GAAGH,OAAO,CAAC,QAAD,CAAP,CAAkBG,YAArC;;AAEA,IAAIC,iBAAiB,GAAGJ,OAAO,CAAC,qBAAD,CAA/B;;AAEAK,MAAM,CAACC,OAAP,GAAiBC,mBAAjB;;AAEA,SAASA,mBAAT,CAA6BC,IAA7B,EAAmC;EACjC,KAAKC,QAAL,GAAgB,IAAhB;EACAD,IAAI,CAACE,YAAL,GAAoB,EAApB;EACAC,MAAM,CAACC,cAAP,CAAsBJ,IAAtB,EAA4B,cAA5B,EAA4C;IAC1CK,GAAG,EAAE,SAASA,GAAT,GAAe;MAClB,OAAO,CAAC,CAACL,IAAI,CAACE,YAAL,CAAkBI,MAA3B;IACD;EAHyC,CAA5C,EAHiC,CAO7B;;EAEJN,IAAI,CAACO,UAAL,GAAkBA,UAAlB;EACAP,IAAI,CAACQ,MAAL,GAAcA,MAAd;EACAR,IAAI,CAACS,MAAL,GAAcA,MAAd;EACAT,IAAI,CAACU,YAAL,GAAoBA,YAApB;EACAV,IAAI,CAACW,WAAL,GAAmBA,WAAnB;EACAX,IAAI,CAACY,uBAAL,GAA+BA,uBAA/B,CAdiC,CAcuB;;EAExDZ,IAAI,CAACa,IAAL,GAAYA,IAAI,CAACC,IAAL,CAAUd,IAAV,EAAgBA,IAAI,CAACa,IAAL,CAAUC,IAAV,CAAed,IAAf,CAAhB,CAAZ;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAASO,UAAT,GAAsB;EACpB,IAAIQ,IAAI,GAAG,IAAX;EACA,IAAIC,aAAa,GAAGD,IAAI,CAACE,YAAzB;;EAEAF,IAAI,CAACb,YAAL,CAAkBgB,IAAlB,CAAuBH,IAAI,CAACI,IAA5B;;EAEA,IAAI,CAACH,aAAD,IAAkBD,IAAI,CAACE,YAA3B,EAAyC;IACvCF,IAAI,CAACL,YAAL;EACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASF,MAAT,CAAgBY,EAAhB,EAAoB;EAClB,IAAIL,IAAI,GAAG,IAAX;EACAK,EAAE,GAAGzB,YAAY,CAACyB,EAAD,EAAKL,IAAI,CAACM,GAAL,CAASC,KAAd,CAAjB;EACAP,IAAI,CAACM,GAAL,CAASE,IAAT,CAAc,YAAY;IACxB,IAAIR,IAAI,CAACE,YAAT,EAAuB;MACrBF,IAAI,CAACb,YAAL,CAAkBsB,GAAlB;;MAEA,IAAI,CAACT,IAAI,CAACE,YAAV,EAAwB;QACtBF,IAAI,CAACJ,WAAL,CAAiB,IAAjB,EAAuBS,EAAvB;MACD,CAFD,MAEO;QACLA,EAAE;MACH;IACF,CARD,MAQO;MACL,MAAM,IAAIK,KAAJ,CAAU,wCAAV,CAAN;IACD;EACF,CAZD;AAaD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAAShB,MAAT,CAAgBW,EAAhB,EAAoB;EAClB,IAAIL,IAAI,GAAG,IAAX;EACAK,EAAE,GAAGzB,YAAY,CAACyB,EAAD,EAAKL,IAAI,CAACM,GAAL,CAASC,KAAd,CAAjB;EACAP,IAAI,CAACM,GAAL,CAASE,IAAT,CAAc,YAAY;IACxB,IAAIR,IAAI,CAACE,YAAT,EAAuB;MACrBF,IAAI,CAACI,IAAL,GAAYJ,IAAI,CAACb,YAAL,CAAkBsB,GAAlB,EAAZ;;MAEA,IAAI,CAACT,IAAI,CAACE,YAAV,EAAwB;QACtBF,IAAI,CAACJ,WAAL,CAAiB,KAAjB,EAAwBS,EAAxB;;QAEA;MACD;IACF;;IAEDA,EAAE;EACH,CAZD;AAaD,C,CAAC;;;AAGF,SAASV,YAAT,GAAwB;EACtB,KAAKT,QAAL,GAAgBV,KAAK,EAArB;EACA,KAAKmC,OAAL,GAAe,CAAC,KAAKzB,QAAN,EAAgB0B,MAAhB,CAAuB,KAAKD,OAA5B,CAAf;EACA,KAAKE,QAAL,GAAgB,KAAKC,OAArB;EACA,KAAKA,OAAL,GAAe,CAAC,KAAK5B,QAAN,CAAf;EACA,KAAK6B,OAAL,GAAe,KAAKC,MAApB;EACA,KAAKA,MAAL,GAAcA,MAAd;AACD,C,CAAC;;;AAGF,SAASpB,WAAT,CAAqBqB,WAArB,EAAkCZ,EAAlC,EAAsC;EACpC,IAAIL,IAAI,GAAG,IAAX;EACA,IAAIkB,OAAO,GAAG,KAAKhC,QAAnB;EACA,KAAKA,QAAL,GAAgB,IAAhB;EACA,KAAKyB,OAAL,GAAe,KAAKA,OAAL,CAAaQ,KAAb,CAAmB,CAAnB,CAAf;EACA,KAAKL,OAAL,GAAe,KAAKD,QAApB;EACA,KAAKG,MAAL,GAAc,KAAKD,OAAnB;;EAEA,SAASK,YAAT,CAAsBC,EAAtB,EAA0BhB,EAA1B,EAA8B;IAC5BL,IAAI,CAACH,uBAAL,CAA6BqB,OAA7B,EAAsCI,IAAtC,CAA2C3C,WAAW,CAAC0C,EAAD,CAAtD,EAA4DE,EAA5D,CAA+D,OAA/D,EAAwElB,EAAxE;EACD;;EAED,IAAIY,WAAJ,EAAiB;IACfvC,KAAK,CAAC8C,GAAN,CAAU,KAAKV,OAAf,EAAwBM,YAAxB,EAAsCf,EAAtC;EACD,CAFD,MAEO;IACLA,EAAE;EACH;AACF,C,CAAC;;;AAGF,SAASP,IAAT,CAAc2B,MAAd,EAAsB;EACpB,IAAIxC,IAAI,GAAGwC,MAAM,EAAjB;;EAEAzC,mBAAmB,CAAC0C,IAApB,CAAyBzC,IAAzB,EAA+BA,IAA/B;EACAA,IAAI,CAACC,QAAL,GAAgB,KAAKA,QAArB,CAJoB,CAIW;;EAE/B,OAAOD,IAAP;AACD;;AAED,SAAS+B,MAAT,CAAgBW,GAAhB,EAAqBC,GAArB,EAA0BvB,EAA1B,EAA8B;EAC5B,SAASwB,KAAT,CAAeR,EAAf,EAAmBS,GAAnB,EAAwB;IACtBT,EAAE,CAACU,GAAH,CAAOJ,GAAP,EAAYC,GAAZ,EAAiB;MACfI,WAAW,EAAE,QADE;MAEfC,aAAa,EAAE;IAFA,CAAjB,EAGGH,GAHH;EAID;;EAEDpD,KAAK,CAACwD,IAAN,CAAW,KAAKrB,QAAhB,EAA0BgB,KAA1B,EAAiCxB,EAAjC;AACD;;AAED,SAASR,uBAAT,CAAiCqB,OAAjC,EAA0C;EACxC,IAAIjC,IAAI,GAAG,KAAKa,IAAL,EAAX;EACAoB,OAAO,GAAGA,OAAO,IAAI,KAAKhC,QAA1B,CAFwC,CAEJ;;EAEpCD,IAAI,CAAC0B,OAAL,GAAe,CAACO,OAAD,CAAf;EACAjC,IAAI,CAACC,QAAL,GAAgBgC,OAAhB;EACA,OAAO,IAAIrC,iBAAJ,CAAsBI,IAAtB,CAAP;AACD"},"metadata":{},"sourceType":"script"}