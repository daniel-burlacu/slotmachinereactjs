{"ast":null,"code":"var websocket = require(\"websocket\");\n\nvar WebSocketServer = websocket.server;\n\nmodule.exports = function (httpServer, provider, logger) {\n  var connectionManager = new ConnectionManager(provider, logger);\n  var wsServer = new WebSocketServer({\n    httpServer: httpServer,\n    autoAcceptConnections: true\n  });\n  wsServer.on(\"connect\", connectionManager.manageConnection);\n  return wsServer;\n};\n\nfunction ConnectionManager(provider, logger) {\n  const self = this;\n  self.provider = provider;\n  self.logger = logger;\n  self.connectionsBySubscriptionId = {};\n  self.connections = {};\n  self.connectionCounter = 0;\n  self._updateSubscriptions = self._updateSubscriptions.bind(self);\n  self.manageConnection = self.manageConnection.bind(self);\n  self._logPayload = self._logPayload.bind(self);\n  self._handleRequest = self._handleRequest.bind(self);\n  provider.on(\"data\", function (err, notification) {\n    if (err) {\n      return;\n    }\n\n    self._updateSubscriptions(notification);\n  });\n}\n\nConnectionManager.prototype.manageConnection = function (connection) {\n  const self = this;\n  connection.id = ++self.connectionCounter;\n  self.connections[connection.id] = {\n    connection: connection,\n    subscriptions: {}\n  };\n  connection.on(\"message\", function (message) {\n    let payload;\n\n    try {\n      if (message.type === \"utf8\") {\n        payload = JSON.parse(message.utf8Data);\n      } else if (message.type === \"binary\") {\n        payload = JSON.parse(message.binaryData.toString(\"utf8\").trim());\n      } else {\n        throw new Error(\"Invalid message type\");\n      }\n    } catch (e) {\n      connection.close(websocket.connection.CLOSE_REASON_UNPROCESSABLE_INPUT, e.message);\n      return;\n    }\n\n    self._logPayload(payload);\n\n    self._handleRequest(connection, payload);\n  });\n  connection.on(\"close\", function () {\n    // remove subscriptions\n    Object.keys(self.connections[connection.id].subscriptions).forEach(subscriptionId => {\n      self.provider.send({\n        jsonrpc: \"2.0\",\n        method: \"eth_unsubscribe\",\n        params: [subscriptionId],\n        id: new Date().getTime()\n      }, function (err, result) {\n        if (err) {\n          return;\n        }\n\n        delete self.connectionsBySubscriptionId[subscriptionId];\n      });\n    });\n    delete self.connections[connection.id];\n  });\n};\n\nConnectionManager.prototype._handleRequest = function (connection, payload) {\n  const self = this; // handle subscription requests, otherwise delegate to provider\n\n  switch (payload.method) {\n    case \"eth_subscribe\":\n      self.provider.send(payload, function (err, result) {\n        if (!err && result.result && self.connections[connection.id]) {\n          self.connections[connection.id].subscriptions[result.result] = true;\n          self.connectionsBySubscriptionId[result.result] = self.connections[connection.id];\n        }\n\n        connection.send(JSON.stringify(result));\n      });\n      break;\n\n    case \"eth_unsubscribe\":\n      self.provider.send(payload, function (err, result) {\n        if (err || result.error) {\n          if (connection && connection.send) {\n            connection.send(JSON.stringify(result));\n          }\n\n          return;\n        }\n\n        if (self.connections[connection.id]) {\n          delete self.connections[connection.id].subscriptions[payload.params[0]];\n        }\n\n        delete self.connectionsBySubscriptionId[payload.params[0]];\n        connection.send(JSON.stringify(result));\n      });\n      break;\n\n    default:\n      self.provider.send(payload, function (_, result) {\n        connection.send(JSON.stringify(result));\n      });\n  }\n}; // Log messages that come into the TestRPC via http\n\n\nConnectionManager.prototype._logPayload = function (payload) {\n  const self = this;\n\n  if (payload instanceof Array) {\n    // Batch request\n    for (var i = 0; i < payload.length; i++) {\n      var item = payload[i];\n      self.logger.log(item.method);\n    }\n  } else {\n    self.logger.log(payload.method);\n  }\n};\n\nConnectionManager.prototype._updateSubscriptions = function (notification) {\n  const subscription = this.connectionsBySubscriptionId[notification.params.subscription]; // Safety check for subscription/connection.\n\n  if (subscription) {\n    subscription.connection.send(JSON.stringify(notification));\n  }\n};","map":{"version":3,"names":["websocket","require","WebSocketServer","server","module","exports","httpServer","provider","logger","connectionManager","ConnectionManager","wsServer","autoAcceptConnections","on","manageConnection","self","connectionsBySubscriptionId","connections","connectionCounter","_updateSubscriptions","bind","_logPayload","_handleRequest","err","notification","prototype","connection","id","subscriptions","message","payload","type","JSON","parse","utf8Data","binaryData","toString","trim","Error","e","close","CLOSE_REASON_UNPROCESSABLE_INPUT","Object","keys","forEach","subscriptionId","send","jsonrpc","method","params","Date","getTime","result","stringify","error","_","Array","i","length","item","log","subscription"],"sources":["F:/Games/slotmachinereact/node_modules/ganache-core/lib/webSocketServer.js"],"sourcesContent":["var websocket = require(\"websocket\");\nvar WebSocketServer = websocket.server;\n\nmodule.exports = function(httpServer, provider, logger) {\n  var connectionManager = new ConnectionManager(provider, logger);\n\n  var wsServer = new WebSocketServer({\n    httpServer: httpServer,\n    autoAcceptConnections: true\n  });\n\n  wsServer.on(\"connect\", connectionManager.manageConnection);\n\n  return wsServer;\n};\n\nfunction ConnectionManager(provider, logger) {\n  const self = this;\n  self.provider = provider;\n  self.logger = logger;\n  self.connectionsBySubscriptionId = {};\n  self.connections = {};\n  self.connectionCounter = 0;\n\n  self._updateSubscriptions = self._updateSubscriptions.bind(self);\n  self.manageConnection = self.manageConnection.bind(self);\n  self._logPayload = self._logPayload.bind(self);\n  self._handleRequest = self._handleRequest.bind(self);\n\n  provider.on(\"data\", function(err, notification) {\n    if (err) {\n      return;\n    }\n    self._updateSubscriptions(notification);\n  });\n}\n\nConnectionManager.prototype.manageConnection = function(connection) {\n  const self = this;\n  connection.id = ++self.connectionCounter;\n  self.connections[connection.id] = {\n    connection: connection,\n    subscriptions: {}\n  };\n\n  connection.on(\"message\", function(message) {\n    let payload;\n    try {\n      if (message.type === \"utf8\") {\n        payload = JSON.parse(message.utf8Data);\n      } else if (message.type === \"binary\") {\n        payload = JSON.parse(message.binaryData.toString(\"utf8\").trim());\n      } else {\n        throw new Error(\"Invalid message type\");\n      }\n    } catch (e) {\n      connection.close(websocket.connection.CLOSE_REASON_UNPROCESSABLE_INPUT, e.message);\n      return;\n    }\n\n    self._logPayload(payload);\n    self._handleRequest(connection, payload);\n  });\n\n  connection.on(\"close\", function() {\n    // remove subscriptions\n    Object.keys(self.connections[connection.id].subscriptions).forEach((subscriptionId) => {\n      self.provider.send(\n        {\n          jsonrpc: \"2.0\",\n          method: \"eth_unsubscribe\",\n          params: [subscriptionId],\n          id: new Date().getTime()\n        },\n        function(err, result) {\n          if (err) {\n            return;\n          }\n          delete self.connectionsBySubscriptionId[subscriptionId];\n        }\n      );\n    });\n\n    delete self.connections[connection.id];\n  });\n};\n\nConnectionManager.prototype._handleRequest = function(connection, payload) {\n  const self = this;\n\n  // handle subscription requests, otherwise delegate to provider\n  switch (payload.method) {\n    case \"eth_subscribe\":\n      self.provider.send(payload, function(err, result) {\n        if (!err && result.result && self.connections[connection.id]) {\n          self.connections[connection.id].subscriptions[result.result] = true;\n          self.connectionsBySubscriptionId[result.result] = self.connections[connection.id];\n        }\n        connection.send(JSON.stringify(result));\n      });\n      break;\n    case \"eth_unsubscribe\":\n      self.provider.send(payload, function(err, result) {\n        if (err || result.error) {\n          if (connection && connection.send) {\n            connection.send(JSON.stringify(result));\n          }\n          return;\n        }\n\n        if (self.connections[connection.id]) {\n          delete self.connections[connection.id].subscriptions[payload.params[0]];\n        }\n        delete self.connectionsBySubscriptionId[payload.params[0]];\n\n        connection.send(JSON.stringify(result));\n      });\n      break;\n    default:\n      self.provider.send(payload, function(_, result) {\n        connection.send(JSON.stringify(result));\n      });\n  }\n};\n\n// Log messages that come into the TestRPC via http\nConnectionManager.prototype._logPayload = function(payload) {\n  const self = this;\n  if (payload instanceof Array) {\n    // Batch request\n    for (var i = 0; i < payload.length; i++) {\n      var item = payload[i];\n      self.logger.log(item.method);\n    }\n  } else {\n    self.logger.log(payload.method);\n  }\n};\n\nConnectionManager.prototype._updateSubscriptions = function(notification) {\n  const subscription = this.connectionsBySubscriptionId[notification.params.subscription];\n  // Safety check for subscription/connection.\n  if (subscription) {\n    subscription.connection.send(JSON.stringify(notification));\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}