{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\Withdrawal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport '../assets/css/App.css';\nimport { ethers } from \"ethers\";\nimport PFPRacerNFT from '../artifacts/contracts/PFPRacerNFT.sol/abi.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Withdrawal = props => {\n  _s();\n\n  const [rolling, setRolling] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(\"\");\n  let refCode = \"\";\n  const contractAddr = \"0x26CD56EeeF4999E6E27030158ec038dd19B8b3cA\";\n  const url = \"https://vast-ridge-99820.herokuapp.com\";\n\n  const createSmartKey = async refCode => {\n    //    let hashCode=\"dbabe1135898ac301cfb00e6ce2122515ccae2390fc4c304eef3523a8f69843b\";\n    let hashCode = \"\";\n    const customConfig = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const dataToSend = JSON.stringify({\n      \"refCode\": refCode\n    });\n    console.log(\"My JSON dataToSend is: \" + dataToSend); // console.log(\"Creating the smartKey:\"+ requestOptions);\n\n    const link = url + \"/api/post_refCode\";\n    await fetch(link, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: dataToSend\n    }).then(response => {\n      return response.text();\n    }).then(data => {\n      console.log(\"My data is:\" + data);\n      console.log(\"My response data is:\" + data);\n    }, error => {\n      console.log(error);\n    }); //   axios.post(link, {\n    //  // axios.post(\"https://localhost:3333/api/post_refCode\", {\n    //       dataToSend ,customConfig\n    //       }).then(response => {\n    //         console.log(response.data);\n    //         hashCode=response.data;\n    //       }, error => {\n    //         console.log(error);\n    //       });\n\n    console.log(\"My hash code is: \" + hashCode);\n    return hashCode;\n  };\n\n  const initConnection = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const newSigner = provider.getSigner();\n      setAccount(accounts[0]);\n      setContract(new ethers.Contract(contractAddr, PFPRacerNFT.abi, newSigner));\n    } else {\n      console.log(\"Please install metamask\");\n    }\n  };\n\n  useEffect(() => {\n    initConnection();\n  }, [account]);\n\n  const makeWithdrawal = async refCode => {\n    console.log(\"My refCode in makeWithdrawal is: \" + refCode);\n    let withdrawalAmount = Math.floor(props.getScoreCallback());\n    console.log(\"My score in makeWithdrawal is \" + withdrawalAmount);\n    let fail = false;\n\n    if (withdrawalAmount > 0) {\n      window.confirm(\"Please be aware: if you have 1.2 or 20.2 NFT's you will be able to withdrawal only the integer part like 1 or 2.\"); //await contract.withdrawal(refCode);\n\n      console.log(\"This is the withdrawal function !!!\"); // try{\n\n      var options = {\n        gasPrice: 1000000000,\n        gasLimit: 354860,\n        nonce: 45,\n        value: 0\n      };\n      await contract.withdrawal(withdrawalAmount, refCode, {\n        gasLimit: 354860\n      }); // }catch(err){\n      //   fail=true;\n      //   alert(\"Network is quite crowded at this this very moment and gas cost's are very high, please try again later !!\");\n      // }\n\n      if (!fail) {\n        //  insertWalletIntoDB();\n        let myScr = props.getScoreCallback() - withdrawalAmount;\n        console.log(\"My score is \" + myScr); //props.callbackSetScore(myScr);\n\n        props.setScoreCallBack(myScr);\n      }\n    }\n  };\n\n  const checkWallet = async () => {\n    // /checkUserWallet, setCheckUserWallet\n    let results = false;\n    const customConfig = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const dataToSend = JSON.stringify({\n      \"wallet\": account\n    }); // Send data to the backend via POST\n\n    let link = url + \"/api/getWalletVerify\";\n    console.log(\"My fetch link getWalletVerify is: \" + link);\n    await fetch(link, {\n      //    await fetch('http://localhost:3333/api/getWalletVerify', {\n      method: 'POST',\n      //      mode: 'no-cors', // <---\n      headers: {\n        //        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: dataToSend\n    }).then(response => {\n      return response.text();\n    }).then(data => {\n      console.log(\"My data is:\" + data);\n\n      if (data > 0) {\n        results = true;\n      }\n\n      console.log(\"My response data is:\" + data);\n    }, error => {\n      console.log(error);\n    });\n    console.log(\"returning \" + results);\n    return results;\n  };\n\n  const insertWalletIntoDB = async () => {\n    const withdrawalAmount = Math.floor(props.getScoreCallback());\n    const dataToSend = JSON.stringify({\n      \"wallet\": account,\n      \"txtype\": \"withdrawal\",\n      \"amount\": withdrawalAmount\n    });\n    console.log(\"My insertwalletintodb dataToSend is: \" + dataToSend);\n    const link = url + \"/api/insertWallet\";\n    await fetch(link, {\n      //  await fetch('http://localhost:3333/api/insertWallet', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: dataToSend\n    });\n  };\n\n  const promtRefCode = async () => {\n    let code = prompt(\"Please enter your refCode:\", \"RefCode\");\n    return code;\n  };\n\n  const handleSubmit = async () => {\n    if (account !== \"\") {\n      let withdrawalPaused = await contract.getWithdrawalPaused();\n\n      if (!withdrawalPaused) {\n        console.log(\"My withdrawal is: \" + props.blockWithdraw);\n        let respCheckWallet = await checkWallet();\n        console.log(\"My respCheckWallet is: \" + respCheckWallet);\n\n        if (!respCheckWallet) {\n          if (!props.blockWithdraw) {\n            let score = Math.floor(props.getScoreCallback());\n            console.log(\"Withdrawal has been activated\");\n            console.log(\"My account is: \" + account);\n\n            if (score > 0) {\n              refCode = await promtRefCode();\n\n              if (refCode === null || refCode === \"\" || refCode !== \"RACECOUPLE2022\") {\n                let text = \"Wrong RefCode ! But you can Mint !\";\n                window.confirm(text);\n              } else {\n                //checkAccount and insert to database\n                let hashKey = await createSmartKey(refCode);\n                console.log(\"My hashKey in withdrawal is:\" + hashKey);\n                makeWithdrawal(hashKey);\n              }\n            }\n          } else {\n            window.confirm(\"You need to have at least 1 NFT to withdrawal\");\n          }\n        } else {\n          window.confirm(\"You already had your chance ! But you can still Mint & play !\");\n        }\n      } else {\n        alert(\"Withdrawal has been paused, please try again later !\");\n      }\n    } else {\n      alert(\"Please connect to Metamask !!! Or install Metamask wallet if not already installed in order to place a withdrawal !!!\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: handleSubmit ? \"roll rolling\" : \"roll\",\n    onClick: () => {\n      handleSubmit();\n    },\n    children: \"Withdrawal\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Withdrawal, \"YMWh4SPmI+fS85XywQLQRJu3nhQ=\");\n\n_c = Withdrawal;\nexport default Withdrawal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Withdrawal\");","map":{"version":3,"names":["React","useEffect","useState","useRef","ethers","PFPRacerNFT","Withdrawal","props","rolling","setRolling","name","setName","account","setAccount","contract","setContract","refCode","contractAddr","url","createSmartKey","hashCode","customConfig","headers","dataToSend","JSON","stringify","console","log","link","fetch","method","body","then","response","text","data","error","initConnection","window","ethereum","accounts","request","provider","providers","Web3Provider","newSigner","getSigner","Contract","abi","makeWithdrawal","withdrawalAmount","Math","floor","getScoreCallback","fail","confirm","options","gasPrice","gasLimit","nonce","value","withdrawal","myScr","setScoreCallBack","checkWallet","results","insertWalletIntoDB","promtRefCode","code","prompt","handleSubmit","withdrawalPaused","getWithdrawalPaused","blockWithdraw","respCheckWallet","score","hashKey","alert"],"sources":["F:/Games/slotmachinereact/src/components/Withdrawal.js"],"sourcesContent":["import  React, { useEffect, useState, useRef } from \"react\";\r\nimport '../assets/css/App.css';\r\nimport {ethers} from \"ethers\";\r\nimport PFPRacerNFT from '../artifacts/contracts/PFPRacerNFT.sol/abi.json';\r\n\r\nconst Withdrawal=(props)=>{\r\n\r\n    const [rolling, setRolling] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [account, setAccount] = useState(\"\");\r\n    const [contract, setContract] = useState(\"\");\r\n    let refCode =\"\";\r\n    const contractAddr=\"0x26CD56EeeF4999E6E27030158ec038dd19B8b3cA\";\r\n    const url=\"https://vast-ridge-99820.herokuapp.com\";\r\n    \r\n\r\n    const createSmartKey = async (refCode)=>{\r\n  //    let hashCode=\"dbabe1135898ac301cfb00e6ce2122515ccae2390fc4c304eef3523a8f69843b\";\r\n      let hashCode=\"\";\r\n      const customConfig = {\r\n        headers: {\r\n        'Content-Type': 'application/json'\r\n        }\r\n      };\r\n\r\n      const dataToSend = JSON.stringify({ \"refCode\": refCode });\r\n      console.log(\"My JSON dataToSend is: \"+dataToSend);\r\n     // console.log(\"Creating the smartKey:\"+ requestOptions);\r\n  const link = url+\"/api/post_refCode\";\r\n\r\n  await fetch(link, {\r\n    method:'POST',\r\n    headers:{'Content-Type':'application/json'},\r\n    body:dataToSend\r\n  }).then(response => {\r\n    return response.text();\r\n    }).then(data => {\r\n      console.log(\"My data is:\"+data)\r\n        console.log(\"My response data is:\"+data);\r\n       }, error => {\r\n        console.log(error);\r\n      });\r\n\r\n//   axios.post(link, {\r\n//  // axios.post(\"https://localhost:3333/api/post_refCode\", {\r\n//       dataToSend ,customConfig\r\n//       }).then(response => {\r\n//         console.log(response.data);\r\n//         hashCode=response.data;\r\n//       }, error => {\r\n//         console.log(error);\r\n//       });\r\n        console.log(\"My hash code is: \"+hashCode);  \r\n      return hashCode;\r\n    }\r\n\r\n    const initConnection = async () =>{\r\n      if(typeof window.ethereum !== \"undefined\"){\r\n        const accounts = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const newSigner = provider.getSigner();\r\n        setAccount(accounts[0]);\r\n        setContract(\r\n          new ethers.Contract(\r\n            contractAddr,\r\n            PFPRacerNFT.abi,\r\n            newSigner\r\n          )\r\n        )\r\n      }else{\r\n        console.log(\"Please install metamask\");\r\n      }\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n      initConnection();\r\n    },[account]);\r\n\r\n  const makeWithdrawal = async(refCode) => {\r\n    console.log(\"My refCode in makeWithdrawal is: \"+refCode);\r\n    let withdrawalAmount = Math.floor(props.getScoreCallback());\r\n    console.log(\"My score in makeWithdrawal is \"+withdrawalAmount);\r\n    let fail=false;\r\n      if(withdrawalAmount > 0){\r\n      window.confirm(\"Please be aware: if you have 1.2 or 20.2 NFT's you will be able to withdrawal only the integer part like 1 or 2.\");\r\n      //await contract.withdrawal(refCode);\r\n      console.log(\"This is the withdrawal function !!!\");\r\n      // try{\r\n        var options = { gasPrice: 1000000000, gasLimit: 354860, nonce: 45, value: 0 };\r\n\r\n        await contract.withdrawal(withdrawalAmount,refCode,{\r\n          gasLimit: 354860\r\n        });\r\n        \r\n    // }catch(err){\r\n    //   fail=true;\r\n    //   alert(\"Network is quite crowded at this this very moment and gas cost's are very high, please try again later !!\");\r\n    // }\r\n    \r\n    if(!fail){\r\n    //  insertWalletIntoDB();\r\n      let myScr= props.getScoreCallback()-withdrawalAmount;\r\n      console.log(\"My score is \"+myScr);\r\n      //props.callbackSetScore(myScr);\r\n      props.setScoreCallBack(myScr);\r\n    }\r\n\r\n    }\r\n  }\r\n\r\n  const checkWallet = async()=>{\r\n    // /checkUserWallet, setCheckUserWallet\r\n    let results=false;\r\n    const customConfig = {\r\n      headers: {\r\n      'Content-Type': 'application/json'\r\n      }\r\n    };\r\n    const dataToSend = JSON.stringify({ \"wallet\": account });\r\n    // Send data to the backend via POST\r\n    let link = url+\"/api/getWalletVerify\";\r\n    console.log(\"My fetch link getWalletVerify is: \"+link);\r\n    await fetch(link, {\r\n//    await fetch('http://localhost:3333/api/getWalletVerify', {\r\n      method: 'POST',\r\n//      mode: 'no-cors', // <---\r\n      headers: {\r\n//        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: dataToSend\r\n    }).then(response => {\r\n      return response.text();\r\n      }).then(data => {\r\n        console.log(\"My data is:\"+data)\r\n        if(data>0){\r\n          results=true;\r\n        }\r\n          console.log(\"My response data is:\"+data);\r\n         }, error => {\r\n          console.log(error);\r\n        });\r\n    console.log(\"returning \"+results);\r\n    return results;\r\n  }\r\n\r\n  const insertWalletIntoDB = async()=>{\r\n    const withdrawalAmount=Math.floor(props.getScoreCallback());\r\n\r\n    const dataToSend = JSON.stringify({ \"wallet\": account,\r\n                                        \"txtype\":\"withdrawal\",\r\n                                        \"amount\":withdrawalAmount,\r\n                                         });\r\n   \r\n   console.log(\"My insertwalletintodb dataToSend is: \"+dataToSend);\r\n      const link = url+\"/api/insertWallet\";\r\n      await fetch(link,{\r\n  //  await fetch('http://localhost:3333/api/insertWallet', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: dataToSend\r\n    })\r\n\r\n  }\r\n  \r\n  const promtRefCode = async()=>{\r\n    let code = prompt(\"Please enter your refCode:\", \"RefCode\");\r\n    return code;\r\n  }\r\n\r\n  const handleSubmit = async() => {\r\n\r\n    if(account!==\"\"){\r\n      let withdrawalPaused = await contract.getWithdrawalPaused();\r\n      if(!withdrawalPaused){\r\n        console.log(\"My withdrawal is: \"+props.blockWithdraw);\r\n        let respCheckWallet = await checkWallet();\r\n        console.log(\"My respCheckWallet is: \"+respCheckWallet);\r\n        if(!respCheckWallet){\r\n          \r\n        if(!props.blockWithdraw){\r\n          let score = Math.floor(props.getScoreCallback());\r\n            console.log(\"Withdrawal has been activated\");\r\n            console.log(\"My account is: \"+account);\r\n          if(score>0){\r\n          refCode = await promtRefCode();\r\n            if (refCode === null || refCode === \"\" || refCode !== \"RACECOUPLE2022\") {\r\n              let text = \"Wrong RefCode ! But you can Mint !\";\r\n              window.confirm(text)\r\n            } else {\r\n          //checkAccount and insert to database\r\n\r\n            let hashKey = await createSmartKey(refCode);\r\n            console.log(\"My hashKey in withdrawal is:\"+hashKey);\r\n            \r\n            makeWithdrawal(hashKey);\r\n          }\r\n        }\r\n      }else{\r\n        window.confirm(\"You need to have at least 1 NFT to withdrawal\");\r\n      }\r\n    } else{\r\n      window.confirm(\"You already had your chance ! But you can still Mint & play !\");\r\n    }\r\n  }else{\r\n    alert(\"Withdrawal has been paused, please try again later !\");\r\n  }\r\n  }else{\r\n    alert(\"Please connect to Metamask !!! Or install Metamask wallet if not already installed in order to place a withdrawal !!!\");\r\n  }\r\n};\r\n\r\n    return(\r\n    <div\r\n         className={handleSubmit ? \"roll rolling\" : \"roll\"}\r\n         onClick={() => {handleSubmit()}}\r\n    >Withdrawal</div>\r\n    )\r\n}\r\n\r\nexport default Withdrawal;"],"mappings":";;;AAAA,OAAQA,KAAR,IAAiBC,SAAjB,EAA4BC,QAA5B,EAAsCC,MAAtC,QAAoD,OAApD;AACA,OAAO,uBAAP;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAOC,WAAP,MAAwB,iDAAxB;;;AAEA,MAAMC,UAAU,GAAEC,KAAD,IAAS;EAAA;;EAEtB,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;EACA,MAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;EACA,MAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;EACA,IAAIc,OAAO,GAAE,EAAb;EACA,MAAMC,YAAY,GAAC,4CAAnB;EACA,MAAMC,GAAG,GAAC,wCAAV;;EAGA,MAAMC,cAAc,GAAG,MAAOH,OAAP,IAAiB;IAC1C;IACI,IAAII,QAAQ,GAAC,EAAb;IACA,MAAMC,YAAY,GAAG;MACnBC,OAAO,EAAE;QACT,gBAAgB;MADP;IADU,CAArB;IAMA,MAAMC,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAe;MAAE,WAAWT;IAAb,CAAf,CAAnB;IACAU,OAAO,CAACC,GAAR,CAAY,4BAA0BJ,UAAtC,EAVsC,CAWvC;;IACH,MAAMK,IAAI,GAAGV,GAAG,GAAC,mBAAjB;IAEA,MAAMW,KAAK,CAACD,IAAD,EAAO;MAChBE,MAAM,EAAC,MADS;MAEhBR,OAAO,EAAC;QAAC,gBAAe;MAAhB,CAFQ;MAGhBS,IAAI,EAACR;IAHW,CAAP,CAAL,CAIHS,IAJG,CAIEC,QAAQ,IAAI;MAClB,OAAOA,QAAQ,CAACC,IAAT,EAAP;IACC,CANG,EAMDF,IANC,CAMIG,IAAI,IAAI;MACdT,OAAO,CAACC,GAAR,CAAY,gBAAcQ,IAA1B;MACET,OAAO,CAACC,GAAR,CAAY,yBAAuBQ,IAAnC;IACA,CATA,EASEC,KAAK,IAAI;MACXV,OAAO,CAACC,GAAR,CAAYS,KAAZ;IACD,CAXC,CAAN,CAd0C,CA2B5C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACQV,OAAO,CAACC,GAAR,CAAY,sBAAoBP,QAAhC;IACF,OAAOA,QAAP;EACD,CAtCD;;EAwCA,MAAMiB,cAAc,GAAG,YAAW;IAChC,IAAG,OAAOC,MAAM,CAACC,QAAd,KAA2B,WAA9B,EAA0C;MACxC,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;QAC7CX,MAAM,EAAE;MADqC,CAAxB,CAAvB;MAGA,MAAMY,QAAQ,GAAG,IAAItC,MAAM,CAACuC,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACC,QAAzC,CAAjB;MACA,MAAMM,SAAS,GAAGH,QAAQ,CAACI,SAAT,EAAlB;MACAjC,UAAU,CAAC2B,QAAQ,CAAC,CAAD,CAAT,CAAV;MACAzB,WAAW,CACT,IAAIX,MAAM,CAAC2C,QAAX,CACE9B,YADF,EAEEZ,WAAW,CAAC2C,GAFd,EAGEH,SAHF,CADS,CAAX;IAOD,CAdD,MAcK;MACHnB,OAAO,CAACC,GAAR,CAAY,yBAAZ;IACD;EACF,CAlBD;;EAqBA1B,SAAS,CAAC,MAAI;IACZoC,cAAc;EACf,CAFQ,EAEP,CAACzB,OAAD,CAFO,CAAT;;EAIF,MAAMqC,cAAc,GAAG,MAAMjC,OAAN,IAAkB;IACvCU,OAAO,CAACC,GAAR,CAAY,sCAAoCX,OAAhD;IACA,IAAIkC,gBAAgB,GAAGC,IAAI,CAACC,KAAL,CAAW7C,KAAK,CAAC8C,gBAAN,EAAX,CAAvB;IACA3B,OAAO,CAACC,GAAR,CAAY,mCAAiCuB,gBAA7C;IACA,IAAII,IAAI,GAAC,KAAT;;IACE,IAAGJ,gBAAgB,GAAG,CAAtB,EAAwB;MACxBZ,MAAM,CAACiB,OAAP,CAAe,kHAAf,EADwB,CAExB;;MACA7B,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAHwB,CAIxB;;MACE,IAAI6B,OAAO,GAAG;QAAEC,QAAQ,EAAE,UAAZ;QAAwBC,QAAQ,EAAE,MAAlC;QAA0CC,KAAK,EAAE,EAAjD;QAAqDC,KAAK,EAAE;MAA5D,CAAd;MAEA,MAAM9C,QAAQ,CAAC+C,UAAT,CAAoBX,gBAApB,EAAqClC,OAArC,EAA6C;QACjD0C,QAAQ,EAAE;MADuC,CAA7C,CAAN,CAPsB,CAW1B;MACA;MACA;MACA;;MAEA,IAAG,CAACJ,IAAJ,EAAS;QACT;QACE,IAAIQ,KAAK,GAAEvD,KAAK,CAAC8C,gBAAN,KAAyBH,gBAApC;QACAxB,OAAO,CAACC,GAAR,CAAY,iBAAemC,KAA3B,EAHO,CAIP;;QACAvD,KAAK,CAACwD,gBAAN,CAAuBD,KAAvB;MACD;IAEA;EACF,CA9BD;;EAgCA,MAAME,WAAW,GAAG,YAAS;IAC3B;IACA,IAAIC,OAAO,GAAC,KAAZ;IACA,MAAM5C,YAAY,GAAG;MACnBC,OAAO,EAAE;QACT,gBAAgB;MADP;IADU,CAArB;IAKA,MAAMC,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAe;MAAE,UAAUb;IAAZ,CAAf,CAAnB,CAR2B,CAS3B;;IACA,IAAIgB,IAAI,GAAGV,GAAG,GAAC,sBAAf;IACAQ,OAAO,CAACC,GAAR,CAAY,uCAAqCC,IAAjD;IACA,MAAMC,KAAK,CAACD,IAAD,EAAO;MACtB;MACME,MAAM,EAAE,MAFQ;MAGtB;MACMR,OAAO,EAAE;QACf;QACQ,gBAAgB;MAFT,CAJO;MAQhBS,IAAI,EAAER;IARU,CAAP,CAAL,CASHS,IATG,CASEC,QAAQ,IAAI;MAClB,OAAOA,QAAQ,CAACC,IAAT,EAAP;IACC,CAXG,EAWDF,IAXC,CAWIG,IAAI,IAAI;MACdT,OAAO,CAACC,GAAR,CAAY,gBAAcQ,IAA1B;;MACA,IAAGA,IAAI,GAAC,CAAR,EAAU;QACR8B,OAAO,GAAC,IAAR;MACD;;MACCvC,OAAO,CAACC,GAAR,CAAY,yBAAuBQ,IAAnC;IACA,CAjBA,EAiBEC,KAAK,IAAI;MACXV,OAAO,CAACC,GAAR,CAAYS,KAAZ;IACD,CAnBC,CAAN;IAoBAV,OAAO,CAACC,GAAR,CAAY,eAAasC,OAAzB;IACA,OAAOA,OAAP;EACD,CAlCD;;EAoCA,MAAMC,kBAAkB,GAAG,YAAS;IAClC,MAAMhB,gBAAgB,GAACC,IAAI,CAACC,KAAL,CAAW7C,KAAK,CAAC8C,gBAAN,EAAX,CAAvB;IAEA,MAAM9B,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAe;MAAE,UAAUb,OAAZ;MACE,UAAS,YADX;MAEE,UAASsC;IAFX,CAAf,CAAnB;IAKDxB,OAAO,CAACC,GAAR,CAAY,0CAAwCJ,UAApD;IACG,MAAMK,IAAI,GAAGV,GAAG,GAAC,mBAAjB;IACA,MAAMW,KAAK,CAACD,IAAD,EAAM;MACrB;MACIE,MAAM,EAAE,MAFS;MAGjBR,OAAO,EAAE;QACP,UAAU,kBADH;QAEP,gBAAgB;MAFT,CAHQ;MAOjBS,IAAI,EAAER;IAPW,CAAN,CAAX;EAUH,CApBD;;EAsBA,MAAM4C,YAAY,GAAG,YAAS;IAC5B,IAAIC,IAAI,GAAGC,MAAM,CAAC,4BAAD,EAA+B,SAA/B,CAAjB;IACA,OAAOD,IAAP;EACD,CAHD;;EAKA,MAAME,YAAY,GAAG,YAAW;IAE9B,IAAG1D,OAAO,KAAG,EAAb,EAAgB;MACd,IAAI2D,gBAAgB,GAAG,MAAMzD,QAAQ,CAAC0D,mBAAT,EAA7B;;MACA,IAAG,CAACD,gBAAJ,EAAqB;QACnB7C,OAAO,CAACC,GAAR,CAAY,uBAAqBpB,KAAK,CAACkE,aAAvC;QACA,IAAIC,eAAe,GAAG,MAAMV,WAAW,EAAvC;QACAtC,OAAO,CAACC,GAAR,CAAY,4BAA0B+C,eAAtC;;QACA,IAAG,CAACA,eAAJ,EAAoB;UAEpB,IAAG,CAACnE,KAAK,CAACkE,aAAV,EAAwB;YACtB,IAAIE,KAAK,GAAGxB,IAAI,CAACC,KAAL,CAAW7C,KAAK,CAAC8C,gBAAN,EAAX,CAAZ;YACE3B,OAAO,CAACC,GAAR,CAAY,+BAAZ;YACAD,OAAO,CAACC,GAAR,CAAY,oBAAkBf,OAA9B;;YACF,IAAG+D,KAAK,GAAC,CAAT,EAAW;cACX3D,OAAO,GAAG,MAAMmD,YAAY,EAA5B;;cACE,IAAInD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,EAAhC,IAAsCA,OAAO,KAAK,gBAAtD,EAAwE;gBACtE,IAAIkB,IAAI,GAAG,oCAAX;gBACAI,MAAM,CAACiB,OAAP,CAAerB,IAAf;cACD,CAHD,MAGO;gBACT;gBAEE,IAAI0C,OAAO,GAAG,MAAMzD,cAAc,CAACH,OAAD,CAAlC;gBACAU,OAAO,CAACC,GAAR,CAAY,iCAA+BiD,OAA3C;gBAEA3B,cAAc,CAAC2B,OAAD,CAAd;cACD;YACF;UACF,CAlBC,MAkBG;YACHtC,MAAM,CAACiB,OAAP,CAAe,+CAAf;UACD;QACF,CAvBG,MAuBE;UACJjB,MAAM,CAACiB,OAAP,CAAe,+DAAf;QACD;MACF,CA9BG,MA8BC;QACHsB,KAAK,CAAC,sDAAD,CAAL;MACD;IACA,CAnCC,MAmCG;MACHA,KAAK,CAAC,uHAAD,CAAL;IACD;EACF,CAxCC;;EA0CE,oBACA;IACK,SAAS,EAAEP,YAAY,GAAG,cAAH,GAAoB,MADhD;IAEK,OAAO,EAAE,MAAM;MAACA,YAAY;IAAG,CAFpC;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QADA;AAMH,CA3ND;;GAAMhE,U;;KAAAA,U;AA6NN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}