{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\ReelSet.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport Constants from \"../Constants\";\nimport Reel from \"./Reel\";\nimport '../assets/css/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ReelSet = props => {\n  _s();\n\n  const [width, setWidth] = useState();\n  const [height, setHeight] = useState();\n  const [bet, setBet] = useState(0);\n  const [score, setScore] = useState(2);\n  let reels = [];\n  let reelsInMotion = null;\n  let spinResults = [];\n  let winningLines = [];\n  let strike = false;\n  const LINES = Constants.LINES;\n  let scr = 2;\n  let countWin = 0;\n  let symbolSellection = [];\n\n  const randomBetween = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const audioUrlWin = require(\"../assets/sounds/coinsHandling.wav\"); //  const audioWin = Audio(\"../assets/sounds/coinsHandling.wav\");\n\n\n  const audioUrlWinBonus = require(\"../assets/sounds/winningBonus.wav\"); //  const audioWinBonus = Audio(\"../assets/sounds/winningBonus.wav\");\n\n\n  const audioUrlBtn = require(\"../assets/sounds/buttonPress.wav\"); //  const audioBtn = Audio(\"../assets/sounds/buttonPress.wav\");\n\n\n  const audioUrlSpin = require(\"../assets/sounds/spinningSlotMachine.wav\"); //  const audioSpin = Audio(\"../assets/sounds/spinningSlotMachine.wav\");\n  //    evaluateResults = () => {\n  //        winningLines = [];\n  //        console.log(spinResults);\n  //    }\n\n\n  const drawScore = (lineNumberType, fool) => {\n    let newScore = 0;\n\n    if (fool) {\n      lineNumberType = 18;\n    }\n\n    switch (lineNumberType) {\n      case 0:\n        // top line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 1:\n        // middle line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 2:\n        // bottom line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 3:\n        // V shape starting bottom left\n        //        audioWin.play();\n        newScore = 0.2;\n        break;\n\n      case 4:\n        // V shape starting bottom right\n        //        audioWin.play();\n        newScore = 0.2;\n        break;\n\n      case 5:\n        // W shape starting top left\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 6:\n        // M shape starting bottom left\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 7:\n        // M shape on top half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 8:\n        // W shape on top half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 9:\n        //W shape on bottom half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 10:\n        // M shape on bottom half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 11:\n        // U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 12:\n        // inverse U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 13:\n        // U shape on bottom half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 14:\n        // inverse U shape on bottom half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 15:\n        // inverse U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 16:\n        // Z shape from top left\n        //        audioWin.play();\n        newScore = 0.4;\n        break;\n\n      case 17:\n        // Z shape from bottom left\n        //        audioWin.play();\n        newScore = 0.4;\n        break;\n\n      case 18:\n        // Z shape from bottom left\n        //        audioWinBonus.play();\n        newScore = 100;\n        break;\n\n      default:\n        newScore = 0;\n    }\n\n    console.log(\"My score is:\" + newScore);\n    setMyScore(newScore);\n    return;\n  };\n\n  const setScoreState = () => {\n    console.log(\"My scr is:\" + scr);\n    setScore(scr);\n  };\n\n  const checkLinesElements = symbol => {\n    countWin++;\n    let symNr = 0;\n    let fool = 0;\n\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      fool = 0;\n      symNr = 0;\n\n      for (let j = 0; j < Constants.LINES[i].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n\n        if (symbol === spinResults[indexI][indexJ]) {\n          symNr++;\n        }\n      }\n\n      if (fool + symNr === 5 && fool < 4) {\n        winningLines.push(i);\n      }\n    }\n\n    winningLines = uniq(winningLines);\n  };\n\n  const uniq = a => {\n    return a.sort().filter(function (item, pos, ary) {\n      return !pos || item !== ary[pos - 1];\n    });\n  };\n\n  const checkElements = () => {\n    let fool = 0;\n\n    for (let k = 0; k < 3; k++) {\n      fool = 0;\n\n      for (let i = 0; i < spinResults.length; i++) {\n        let symb = \"\";\n\n        for (let j = k; j < spinResults[i].length; j++) {\n          if (spinResults[i][j] !== \"D\") {\n            symb = spinResults[i][j];\n            j = spinResults[i].length;\n          } else {\n            fool++;\n            j = spinResults[i].length;\n          }\n        }\n\n        if (fool < 4 && symb !== \"\") {\n          symbolSellection.push(symb);\n        }\n      }\n    }\n\n    for (let i = 0; i < symbolSellection.length; i++) {\n      checkLinesElements(symbolSellection[i]);\n    }\n  };\n\n  const evaluateResults = () => {\n    checkFourFools();\n    checkElements();\n    highLightWinningLines(0);\n\n    if (winningLines.length > 0) {\n      console.log(\"We have winning line !!!\");\n\n      for (let i = 0; i < winningLines.length; i++) {\n        drawScore(winningLines[i], false);\n      }\n    } else {\n      console.log(\"We have no winning lines !!!\");\n\n      if (scr - bet >= 0.2) {\n        scr = Math.round((scr - bet) * 100) / 100;\n        setScoreState();\n\n        if (scr < bet) {\n          setBetZero();\n        }\n      } else if (scr - bet === 0) {\n        setBetZero();\n        scr = 0;\n        setScoreState();\n      }\n    } //winningLines=[];\n\n  };\n\n  const checkFourFools = () => {\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      let fool = 0;\n\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n      }\n\n      if (fool === 4) {\n        winningLines.push(i);\n        drawScore(i, false);\n      }\n    }\n  };\n\n  const checkFiveFools = () => {\n    let fl = false;\n\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      let fool = 0;\n\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n      }\n\n      if (fool === 5) {\n        fl = true;\n        winningLines.push(i);\n        drawScore(i, true);\n        highLightWinningLines(0);\n        break;\n      }\n    }\n\n    return fl;\n  };\n\n  const checkWin = () => {\n    let fool = checkFiveFools();\n\n    if (!fool) {\n      evaluateResults();\n    } //  setScoreState();\n\n  };\n\n  const highLightWinningLines = currentIndex => {\n    if (!winningLines.length) {\n      return;\n    }\n\n    if (currentIndex > 0) {\n      //turn off the light on the previous line\n      Constants.LINES[winningLines[currentIndex - 1]].map(el => {\n        return reels[el[0]].highLightAtIndex(el[1], false);\n      });\n    }\n\n    if (currentIndex > winningLines.length - 1) {\n      return;\n    }\n\n    Constants.LINES[winningLines[currentIndex]].map(el => {\n      return reels[el[0]].highLightAtIndex(el[1], true), reels[el[0]].shakeAtIndex(el[1]);\n    });\n    setTimeout(() => {\n      highLightWinningLines(currentIndex + 1);\n    }, 800);\n  };\n\n  const spin = () => {\n    winningLines = [];\n    reelsInMotion = Constants.REELS;\n\n    for (let i = 0; i < Constants.REELS; i++) {\n      reels[i].scrollByOffSet(randomBetween((Constants.REELS_REPEAT - 6) * reels[i].symbols.length, (Constants.REELS_REPEAT - 5) * reels[i].symbols.length), (reelIndex, results) => {\n        reelsInMotion -= 1;\n        spinResults[reelIndex] = results;\n\n        if (reelsInMotion === 0) {\n          checkWin();\n          console.log(\"We have finished rolling\"); //  setScoreState();\n        }\n      });\n    }\n  };\n\n  const onLayout = e => {\n    setWidth(1200);\n    setHeight(800);\n  };\n\n  const renderReels = () => {\n    let reelWidth = width / Constants.REELS;\n    console.log(\"My reelWidth is: \" + reelWidth);\n    console.log(\"My hight is: \" + height);\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\n      return /*#__PURE__*/_jsxDEV(Reel, {\n        width: reelWidth,\n        height: height,\n        index: idx,\n        refs: ref => {\n          reels[idx] = ref;\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: reelList\n    }, void 0, false);\n  };\n\n  const setMyScore = e => {\n    console.log(\"We are in setMyScore: \" + e);\n    let sc = 0;\n\n    if (bet > 0 && e > 0) {\n      console.log(\"Calculating:\" + scr + \"+(\" + bet + \"*\" + e + \")\");\n      scr = scr + (e + bet * e);\n      scr = Math.round(scr * 100) / 100;\n    } else if (bet > 0 && e === 0) {\n      scr = scr - (e + bet * e);\n      console.log(\"Calculating:\" + sc + \"-(\" + bet + \"*\" + e + \")\");\n      scr = Math.round(scr * 100) / 100;\n    } else if (bet === 0 && e > 0) {\n      console.log(\"Calculating: \" + scr + \" + \" + e);\n      scr = Math.round((scr + e) * 100) / 100;\n    } //setBetZero();\n\n\n    setScoreState(scr);\n  };\n\n  const setBetZero = () => {\n    setBet(0);\n  }; // to trigger roolling and maintain state\n\n\n  const setWithdrawal = wdrl => {\n    console.log(\"We are withdrawling !!!\");\n  };\n\n  const increaseBet = () => {\n    if (bet < scr - 0.2 && scr !== 0) {\n      console.log(\"Bet is set !\");\n      setBet(Math.round((bet + 0.2) * 100) / 100);\n    } else setBet(scr);\n  };\n\n  const decreaseBet = () => {\n    if (bet >= 0.2 && score !== 0) {\n      setBet(Math.round((bet - 0.2) * 100) / 100);\n    } else if (bet === scr && score !== 0) {\n      setBet(Math.round((score - 0.2) * 100) / 100);\n    }\n  }; // let score = onScore();\n  //  console.log(\"My render score is: \"+score);\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"slot\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"jackpot\",\n        children: [\"Jackpot: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"jp\",\n          children: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 20\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"reelSet\",\n            children: renderReels()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rolling\",\n          onClick: () => {\n            spin(); // reelSet.spin();\n            //    console.log(\"My reelset score is:\"+reelSet.onScore());\n            //  setMyScore(onScore());\n\n            console.log(\"executing now\");\n          },\n          children: \"Rolling\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"withdrawal\",\n          onClick: () => {},\n          children: \"Withdrawal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"setBet\",\n          onClick: increaseBet,\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: !bet ? \"bet rolling\" : \"bet\",\n          children: [\"Bet:\", bet]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"setBet\",\n          onClick: decreaseBet,\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Score:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            id: \"score\",\n            children: score\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(ReelSet, \"xPxtSeP6NcnCvsVjhBx0o32MMtc=\");\n\n_c = ReelSet;\nexport default ReelSet;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReelSet\");","map":{"version":3,"names":["React","useState","useRef","Constants","Reel","ReelSet","props","width","setWidth","height","setHeight","bet","setBet","score","setScore","reels","reelsInMotion","spinResults","winningLines","strike","LINES","scr","countWin","symbolSellection","randomBetween","min","max","Math","floor","random","audioUrlWin","require","audioUrlWinBonus","audioUrlBtn","audioUrlSpin","drawScore","lineNumberType","fool","newScore","console","log","setMyScore","setScoreState","checkLinesElements","symbol","symNr","i","length","j","indexI","indexJ","push","uniq","a","sort","filter","item","pos","ary","checkElements","k","symb","evaluateResults","checkFourFools","highLightWinningLines","round","setBetZero","checkFiveFools","fl","checkWin","currentIndex","map","el","highLightAtIndex","shakeAtIndex","setTimeout","spin","REELS","scrollByOffSet","REELS_REPEAT","symbols","reelIndex","results","onLayout","e","renderReels","reelWidth","reelList","Array","apply","idx","ref","sc","setWithdrawal","wdrl","increaseBet","decreaseBet"],"sources":["F:/Games/slotmachinereact/src/components/ReelSet.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport Constants from \"../Constants\";\r\nimport Reel from \"./Reel\";\r\nimport '../assets/css/App.css'\r\n\r\nconst ReelSet = (props) => {\r\n  const [width, setWidth] = useState();\r\n  const [height, setHeight] = useState();\r\n  const [bet, setBet] = useState(0);\r\n  const [score, setScore] = useState(2);\r\n\r\n  let reels = [];\r\n  let reelsInMotion = null;\r\n  let spinResults = [];\r\n  let winningLines = [];\r\n  let strike = false;\r\n  const LINES = Constants.LINES;\r\n  let scr = 2;\r\n  let countWin = 0;\r\n  let symbolSellection = [];\r\n\r\n  const randomBetween = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  const audioUrlWin = require(\"../assets/sounds/coinsHandling.wav\");\r\n//  const audioWin = Audio(\"../assets/sounds/coinsHandling.wav\");\r\n\r\n  const audioUrlWinBonus = require(\"../assets/sounds/winningBonus.wav\");\r\n//  const audioWinBonus = Audio(\"../assets/sounds/winningBonus.wav\");\r\n\r\n  const audioUrlBtn = require(\"../assets/sounds/buttonPress.wav\");\r\n//  const audioBtn = Audio(\"../assets/sounds/buttonPress.wav\");\r\n\r\n  const audioUrlSpin = require(\"../assets/sounds/spinningSlotMachine.wav\");\r\n//  const audioSpin = Audio(\"../assets/sounds/spinningSlotMachine.wav\");\r\n\r\n  //    evaluateResults = () => {\r\n  //        winningLines = [];\r\n  //        console.log(spinResults);\r\n  //    }\r\n\r\n  const drawScore = (lineNumberType, fool) => {\r\n    let newScore = 0;\r\n    if (fool) {\r\n      lineNumberType = 18;\r\n    }\r\n    switch (lineNumberType) {\r\n      case 0: // top line\r\n        //        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 1: // middle line\r\n        //        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 2: // bottom line\r\n        //        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 3: // V shape starting bottom left\r\n        //        audioWin.play();\r\n        newScore = 0.2;\r\n        break;\r\n      case 4: // V shape starting bottom right\r\n        //        audioWin.play();\r\n        newScore = 0.2;\r\n        break;\r\n      case 5: // W shape starting top left\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 6: // M shape starting bottom left\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 7: // M shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 8: // W shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 9: //W shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 10: // M shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 11: // U shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 12: // inverse U shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 13: // U shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 14: // inverse U shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 15: // inverse U shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 16: // Z shape from top left\r\n        //        audioWin.play();\r\n        newScore = 0.4;\r\n        break;\r\n      case 17: // Z shape from bottom left\r\n        //        audioWin.play();\r\n        newScore = 0.4;\r\n        break;\r\n      case 18: // Z shape from bottom left\r\n        //        audioWinBonus.play();\r\n        newScore = 100;\r\n        break;\r\n      default:\r\n        newScore = 0;\r\n    }\r\n\r\n    console.log(\"My score is:\" + newScore);\r\n    setMyScore(newScore);\r\n    return;\r\n  };\r\n\r\n  const setScoreState = () => {\r\n    console.log(\"My scr is:\" + scr);\r\n    setScore(scr);\r\n  };\r\n\r\n  const checkLinesElements = (symbol) => {\r\n    countWin++;\r\n    let symNr = 0;\r\n    let fool = 0;\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      fool = 0;\r\n      symNr = 0;\r\n      for (let j = 0; j < Constants.LINES[i].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n\r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n          fool++;\r\n        }\r\n        if (symbol === spinResults[indexI][indexJ]) {\r\n          symNr++;\r\n        }\r\n      }\r\n      if (fool + symNr === 5 && fool < 4) {\r\n        winningLines.push(i);\r\n      }\r\n    }\r\n    winningLines = uniq(winningLines);\r\n  };\r\n\r\n  const uniq = (a) => {\r\n    return a.sort().filter(function (item, pos, ary) {\r\n      return !pos || item !== ary[pos - 1];\r\n    });\r\n  };\r\n\r\n  const checkElements = () => {\r\n    let fool = 0;\r\n    for (let k = 0; k < 3; k++) {\r\n      fool = 0;\r\n      for (let i = 0; i < spinResults.length; i++) {\r\n        let symb = \"\";\r\n        for (let j = k; j < spinResults[i].length; j++) {\r\n          if (spinResults[i][j] !== \"D\") {\r\n            symb = spinResults[i][j];\r\n            j = spinResults[i].length;\r\n          } else {\r\n            fool++;\r\n            j = spinResults[i].length;\r\n          }\r\n        }\r\n        if (fool < 4 && symb !== \"\") {\r\n          symbolSellection.push(symb);\r\n        }\r\n      }\r\n    }\r\n    for (let i = 0; i < symbolSellection.length; i++) {\r\n      checkLinesElements(symbolSellection[i]);\r\n    }\r\n  };\r\n\r\n  const evaluateResults = () => {\r\n    checkFourFools();\r\n    checkElements();\r\n    highLightWinningLines(0);\r\n    if (winningLines.length > 0) {\r\n      console.log(\"We have winning line !!!\");\r\n      for (let i = 0; i < winningLines.length; i++) {\r\n        drawScore(winningLines[i], false);\r\n      }\r\n    } else {\r\n      console.log(\"We have no winning lines !!!\");\r\n      if (scr - bet >= 0.2) {\r\n        scr = Math.round((scr - bet) * 100) / 100;\r\n        setScoreState();\r\n        if (scr < bet) {\r\n          setBetZero();\r\n        }\r\n      } else if (scr - bet === 0) {\r\n        setBetZero();\r\n        scr = 0;\r\n        setScoreState();\r\n      }\r\n    }\r\n    //winningLines=[];\r\n  };\r\n\r\n  const checkFourFools = () => {\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      let fool = 0;\r\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n\r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n          fool++;\r\n        }\r\n      }\r\n      if (fool === 4) {\r\n        winningLines.push(i);\r\n        drawScore(i, false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkFiveFools = () => {\r\n    let fl = false;\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      let fool = 0;\r\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n          fool++;\r\n        }\r\n      }\r\n      if (fool === 5) {\r\n        fl = true;\r\n        winningLines.push(i);\r\n        drawScore(i, true);\r\n        highLightWinningLines(0);\r\n        break;\r\n      }\r\n    }\r\n    return fl;\r\n  };\r\n\r\n  const checkWin = () => {\r\n    let fool = checkFiveFools();\r\n    if (!fool) {\r\n      evaluateResults();\r\n    }\r\n    //  setScoreState();\r\n  };\r\n\r\n  const highLightWinningLines = (currentIndex) => {\r\n    if (!winningLines.length) {\r\n      return;\r\n    }\r\n    if (currentIndex > 0) {\r\n      //turn off the light on the previous line\r\n      Constants.LINES[winningLines[currentIndex - 1]].map((el) => {\r\n        return reels[el[0]].highLightAtIndex(el[1], false);\r\n      });\r\n    }\r\n    if (currentIndex > winningLines.length - 1) {\r\n      return;\r\n    }\r\n\r\n    Constants.LINES[winningLines[currentIndex]].map((el) => {\r\n      return (\r\n        reels[el[0]].highLightAtIndex(el[1], true),\r\n        reels[el[0]].shakeAtIndex(el[1])\r\n      );\r\n    });\r\n    setTimeout(() => {\r\n      highLightWinningLines(currentIndex + 1);\r\n    }, 800);\r\n  };\r\n\r\n  const spin = () => {\r\n    winningLines = [];\r\n    reelsInMotion = Constants.REELS;\r\n    for (let i = 0; i < Constants.REELS; i++) {\r\n      reels[i].scrollByOffSet(\r\n        randomBetween(\r\n          (Constants.REELS_REPEAT - 6) * reels[i].symbols.length,\r\n          (Constants.REELS_REPEAT - 5) * reels[i].symbols.length\r\n        ),\r\n        (reelIndex, results) => {\r\n          reelsInMotion -= 1;\r\n          spinResults[reelIndex] = results;\r\n\r\n          if (reelsInMotion === 0) {\r\n            checkWin();\r\n            console.log(\"We have finished rolling\");\r\n            //  setScoreState();\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const onLayout = (e) => {\r\n    setWidth(1200);\r\n    setHeight(800);\r\n  };\r\n\r\n  const renderReels = () => {\r\n    let reelWidth = width / Constants.REELS;\r\n    console.log(\"My reelWidth is: \" + reelWidth);\r\n    console.log(\"My hight is: \" + height);\r\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\r\n      return (\r\n        <Reel\r\n          width={reelWidth}\r\n          height={height}\r\n          key={idx}\r\n          index={idx}\r\n          refs={(ref) => {\r\n            reels[idx] = ref;\r\n          }}\r\n        />\r\n      );\r\n    });\r\n\r\n    return <>{reelList}</>;\r\n  };\r\n\r\n  const setMyScore = (e) => {\r\n    console.log(\"We are in setMyScore: \" + e);\r\n    let sc = 0;\r\n    if (bet > 0 && e > 0) {\r\n      console.log(\"Calculating:\" + scr + \"+(\" + bet + \"*\" + e + \")\");\r\n      scr = scr + (e + bet * e);\r\n      scr = Math.round(scr * 100) / 100;\r\n    } else if (bet > 0 && e === 0) {\r\n      scr = scr - (e + bet * e);\r\n      console.log(\"Calculating:\" + sc + \"-(\" + bet + \"*\" + e + \")\");\r\n      scr = Math.round(scr * 100) / 100;\r\n    } else if (bet === 0 && e > 0) {\r\n      console.log(\"Calculating: \" + scr + \" + \" + e);\r\n      scr = Math.round((scr + e) * 100) / 100;\r\n    }\r\n\r\n    //setBetZero();\r\n    setScoreState(scr);\r\n  };\r\n\r\n  const setBetZero = () => {\r\n    setBet(0);\r\n  };\r\n\r\n  // to trigger roolling and maintain state\r\n\r\n  const setWithdrawal = (wdrl) => {\r\n    console.log(\"We are withdrawling !!!\");\r\n  };\r\n\r\n  const increaseBet = () => {\r\n    if (bet < scr - 0.2 && scr !== 0) {\r\n      console.log(\"Bet is set !\");\r\n      setBet(Math.round((bet + 0.2) * 100) / 100);\r\n    } else setBet(scr);\r\n  };\r\n\r\n  const decreaseBet = () => {\r\n    if (bet >= 0.2 && score !== 0) {\r\n      setBet(Math.round((bet - 0.2) * 100) / 100);\r\n    } else if (bet === scr && score !== 0) {\r\n      setBet(Math.round((score - 0.2) * 100) / 100);\r\n    }\r\n  };\r\n\r\n  // let score = onScore();\r\n  //  console.log(\"My render score is: \"+score);\r\n  return (\r\n    <>\r\n      <div id=\"slot\">\r\n        <div id=\"jackpot\">\r\n          Jackpot: <span id=\"jp\">100</span>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"playContainer\">\r\n            <div className=\"reelSet\">\r\n              {renderReels()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div id=\"controls\">\r\n          <div\r\n            className=\"rolling\"\r\n            onClick={() => {\r\n              spin();\r\n              // reelSet.spin();\r\n              //    console.log(\"My reelset score is:\"+reelSet.onScore());\r\n              //  setMyScore(onScore());\r\n\r\n              console.log(\"executing now\");\r\n            }}\r\n          >\r\n           Rolling\r\n          </div>\r\n          <div\r\n            className=\"withdrawal\" \r\n            onClick={() => {}}\r\n          >\r\n           Withdrawal\r\n          </div>\r\n          <button\r\n            id=\"setBet\"\r\n            onClick={increaseBet}\r\n          >\r\n            +\r\n          </button>\r\n          <div className={!bet ? \"bet rolling\" : \"bet\"}>\r\n            Bet:{bet}\r\n          </div>\r\n          <button\r\n            id=\"setBet\"\r\n            onClick={decreaseBet}\r\n          >\r\n            -\r\n          </button>\r\n          <label>\r\n            Score:<span id=\"score\">{score}</span>\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReelSet;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,uBAAP;;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;EAAA;;EACzB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,EAAlC;EACA,MAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,EAApC;EACA,MAAM,CAACU,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,CAAC,CAAD,CAA9B;EACA,MAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,CAAD,CAAlC;EAEA,IAAIc,KAAK,GAAG,EAAZ;EACA,IAAIC,aAAa,GAAG,IAApB;EACA,IAAIC,WAAW,GAAG,EAAlB;EACA,IAAIC,YAAY,GAAG,EAAnB;EACA,IAAIC,MAAM,GAAG,KAAb;EACA,MAAMC,KAAK,GAAGjB,SAAS,CAACiB,KAAxB;EACA,IAAIC,GAAG,GAAG,CAAV;EACA,IAAIC,QAAQ,GAAG,CAAf;EACA,IAAIC,gBAAgB,GAAG,EAAvB;;EAEA,MAAMC,aAAa,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;IAClC,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;EACD,CAFD;;EAIA,MAAMK,WAAW,GAAGC,OAAO,CAAC,oCAAD,CAA3B,CApByB,CAqB3B;;;EAEE,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,mCAAD,CAAhC,CAvByB,CAwB3B;;;EAEE,MAAME,WAAW,GAAGF,OAAO,CAAC,kCAAD,CAA3B,CA1ByB,CA2B3B;;;EAEE,MAAMG,YAAY,GAAGH,OAAO,CAAC,0CAAD,CAA5B,CA7ByB,CA8B3B;EAEE;EACA;EACA;EACA;;;EAEA,MAAMI,SAAS,GAAG,CAACC,cAAD,EAAiBC,IAAjB,KAA0B;IAC1C,IAAIC,QAAQ,GAAG,CAAf;;IACA,IAAID,IAAJ,EAAU;MACRD,cAAc,GAAG,EAAjB;IACD;;IACD,QAAQA,cAAR;MACE,KAAK,CAAL;QAAQ;QACN;QACAE,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,CAAL;QAAQ;QACN;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,CAAL;QAAQ;QACN;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,CAAL;QAAQ;QACN;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,CAAL;QAAQ;QACN;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,CAAL;QAAQ;QACN;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,CAAL;QAAQ;QACN;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,CAAL;QAAQ;QACN;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,CAAL;QAAQ;QACN;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,CAAL;QAAQ;QACN;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,EAAL;QAAS;QACP;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,EAAL;QAAS;QACP;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,EAAL;QAAS;QACP;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,EAAL;QAAS;QACP;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,EAAL;QAAS;QACP;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,EAAL;QAAS;QACP;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,EAAL;QAAS;QACP;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,EAAL;QAAS;QACP;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF,KAAK,EAAL;QAAS;QACP;QACAA,QAAQ,GAAG,GAAX;QACA;;MACF;QACEA,QAAQ,GAAG,CAAX;IA9EJ;;IAiFAC,OAAO,CAACC,GAAR,CAAY,iBAAiBF,QAA7B;IACAG,UAAU,CAACH,QAAD,CAAV;IACA;EACD,CAzFD;;EA2FA,MAAMI,aAAa,GAAG,MAAM;IAC1BH,OAAO,CAACC,GAAR,CAAY,eAAenB,GAA3B;IACAP,QAAQ,CAACO,GAAD,CAAR;EACD,CAHD;;EAKA,MAAMsB,kBAAkB,GAAIC,MAAD,IAAY;IACrCtB,QAAQ;IACR,IAAIuB,KAAK,GAAG,CAAZ;IACA,IAAIR,IAAI,GAAG,CAAX;;IACA,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3C,SAAS,CAACiB,KAAV,CAAgB2B,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;MAC/CT,IAAI,GAAG,CAAP;MACAQ,KAAK,GAAG,CAAR;;MACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7C,SAAS,CAACiB,KAAV,CAAgB0B,CAAhB,EAAmBC,MAAvC,EAA+CC,CAAC,EAAhD,EAAoD;QAClD,IAAIC,MAAM,GAAG9C,SAAS,CAACiB,KAAV,CAAgB0B,CAAhB,EAAmBE,CAAnB,EAAsB,CAAtB,CAAb;QACA,IAAIE,MAAM,GAAG/C,SAAS,CAACiB,KAAV,CAAgB0B,CAAhB,EAAmBE,CAAnB,EAAsB,CAAtB,CAAb;;QAEA,IAAI/B,WAAW,CAACgC,MAAD,CAAX,CAAoBC,MAApB,MAAgC,GAApC,EAAyC;UACvCb,IAAI;QACL;;QACD,IAAIO,MAAM,KAAK3B,WAAW,CAACgC,MAAD,CAAX,CAAoBC,MAApB,CAAf,EAA4C;UAC1CL,KAAK;QACN;MACF;;MACD,IAAIR,IAAI,GAAGQ,KAAP,KAAiB,CAAjB,IAAsBR,IAAI,GAAG,CAAjC,EAAoC;QAClCnB,YAAY,CAACiC,IAAb,CAAkBL,CAAlB;MACD;IACF;;IACD5B,YAAY,GAAGkC,IAAI,CAAClC,YAAD,CAAnB;EACD,CAvBD;;EAyBA,MAAMkC,IAAI,GAAIC,CAAD,IAAO;IAClB,OAAOA,CAAC,CAACC,IAAF,GAASC,MAAT,CAAgB,UAAUC,IAAV,EAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;MAC/C,OAAO,CAACD,GAAD,IAAQD,IAAI,KAAKE,GAAG,CAACD,GAAG,GAAG,CAAP,CAA3B;IACD,CAFM,CAAP;EAGD,CAJD;;EAMA,MAAME,aAAa,GAAG,MAAM;IAC1B,IAAItB,IAAI,GAAG,CAAX;;IACA,KAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;MAC1BvB,IAAI,GAAG,CAAP;;MACA,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7B,WAAW,CAAC8B,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;QAC3C,IAAIe,IAAI,GAAG,EAAX;;QACA,KAAK,IAAIb,CAAC,GAAGY,CAAb,EAAgBZ,CAAC,GAAG/B,WAAW,CAAC6B,CAAD,CAAX,CAAeC,MAAnC,EAA2CC,CAAC,EAA5C,EAAgD;UAC9C,IAAI/B,WAAW,CAAC6B,CAAD,CAAX,CAAeE,CAAf,MAAsB,GAA1B,EAA+B;YAC7Ba,IAAI,GAAG5C,WAAW,CAAC6B,CAAD,CAAX,CAAeE,CAAf,CAAP;YACAA,CAAC,GAAG/B,WAAW,CAAC6B,CAAD,CAAX,CAAeC,MAAnB;UACD,CAHD,MAGO;YACLV,IAAI;YACJW,CAAC,GAAG/B,WAAW,CAAC6B,CAAD,CAAX,CAAeC,MAAnB;UACD;QACF;;QACD,IAAIV,IAAI,GAAG,CAAP,IAAYwB,IAAI,KAAK,EAAzB,EAA6B;UAC3BtC,gBAAgB,CAAC4B,IAAjB,CAAsBU,IAAtB;QACD;MACF;IACF;;IACD,KAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,gBAAgB,CAACwB,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;MAChDH,kBAAkB,CAACpB,gBAAgB,CAACuB,CAAD,CAAjB,CAAlB;IACD;EACF,CAvBD;;EAyBA,MAAMgB,eAAe,GAAG,MAAM;IAC5BC,cAAc;IACdJ,aAAa;IACbK,qBAAqB,CAAC,CAAD,CAArB;;IACA,IAAI9C,YAAY,CAAC6B,MAAb,GAAsB,CAA1B,EAA6B;MAC3BR,OAAO,CAACC,GAAR,CAAY,0BAAZ;;MACA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5B,YAAY,CAAC6B,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;QAC5CX,SAAS,CAACjB,YAAY,CAAC4B,CAAD,CAAb,EAAkB,KAAlB,CAAT;MACD;IACF,CALD,MAKO;MACLP,OAAO,CAACC,GAAR,CAAY,8BAAZ;;MACA,IAAInB,GAAG,GAAGV,GAAN,IAAa,GAAjB,EAAsB;QACpBU,GAAG,GAAGM,IAAI,CAACsC,KAAL,CAAW,CAAC5C,GAAG,GAAGV,GAAP,IAAc,GAAzB,IAAgC,GAAtC;QACA+B,aAAa;;QACb,IAAIrB,GAAG,GAAGV,GAAV,EAAe;UACbuD,UAAU;QACX;MACF,CAND,MAMO,IAAI7C,GAAG,GAAGV,GAAN,KAAc,CAAlB,EAAqB;QAC1BuD,UAAU;QACV7C,GAAG,GAAG,CAAN;QACAqB,aAAa;MACd;IACF,CAtB2B,CAuB5B;;EACD,CAxBD;;EA0BA,MAAMqB,cAAc,GAAG,MAAM;IAC3B,KAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3C,SAAS,CAACiB,KAAV,CAAgB2B,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;MAC/C,IAAIT,IAAI,GAAG,CAAX;;MACA,KAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7C,SAAS,CAACiB,KAAV,CAAgB,CAAhB,EAAmB2B,MAAvC,EAA+CC,CAAC,EAAhD,EAAoD;QAClD,IAAIC,MAAM,GAAG9C,SAAS,CAACiB,KAAV,CAAgB0B,CAAhB,EAAmBE,CAAnB,EAAsB,CAAtB,CAAb;QACA,IAAIE,MAAM,GAAG/C,SAAS,CAACiB,KAAV,CAAgB0B,CAAhB,EAAmBE,CAAnB,EAAsB,CAAtB,CAAb;;QAEA,IAAI/B,WAAW,CAACgC,MAAD,CAAX,CAAoBC,MAApB,MAAgC,GAApC,EAAyC;UACvCb,IAAI;QACL;MACF;;MACD,IAAIA,IAAI,KAAK,CAAb,EAAgB;QACdnB,YAAY,CAACiC,IAAb,CAAkBL,CAAlB;QACAX,SAAS,CAACW,CAAD,EAAI,KAAJ,CAAT;MACD;IACF;EACF,CAhBD;;EAkBA,MAAMqB,cAAc,GAAG,MAAM;IAC3B,IAAIC,EAAE,GAAG,KAAT;;IACA,KAAK,IAAItB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3C,SAAS,CAACiB,KAAV,CAAgB2B,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;MAC/C,IAAIT,IAAI,GAAG,CAAX;;MACA,KAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7C,SAAS,CAACiB,KAAV,CAAgB,CAAhB,EAAmB2B,MAAvC,EAA+CC,CAAC,EAAhD,EAAoD;QAClD,IAAIC,MAAM,GAAG9C,SAAS,CAACiB,KAAV,CAAgB0B,CAAhB,EAAmBE,CAAnB,EAAsB,CAAtB,CAAb;QACA,IAAIE,MAAM,GAAG/C,SAAS,CAACiB,KAAV,CAAgB0B,CAAhB,EAAmBE,CAAnB,EAAsB,CAAtB,CAAb;;QACA,IAAI/B,WAAW,CAACgC,MAAD,CAAX,CAAoBC,MAApB,MAAgC,GAApC,EAAyC;UACvCb,IAAI;QACL;MACF;;MACD,IAAIA,IAAI,KAAK,CAAb,EAAgB;QACd+B,EAAE,GAAG,IAAL;QACAlD,YAAY,CAACiC,IAAb,CAAkBL,CAAlB;QACAX,SAAS,CAACW,CAAD,EAAI,IAAJ,CAAT;QACAkB,qBAAqB,CAAC,CAAD,CAArB;QACA;MACD;IACF;;IACD,OAAOI,EAAP;EACD,CApBD;;EAsBA,MAAMC,QAAQ,GAAG,MAAM;IACrB,IAAIhC,IAAI,GAAG8B,cAAc,EAAzB;;IACA,IAAI,CAAC9B,IAAL,EAAW;MACTyB,eAAe;IAChB,CAJoB,CAKrB;;EACD,CAND;;EAQA,MAAME,qBAAqB,GAAIM,YAAD,IAAkB;IAC9C,IAAI,CAACpD,YAAY,CAAC6B,MAAlB,EAA0B;MACxB;IACD;;IACD,IAAIuB,YAAY,GAAG,CAAnB,EAAsB;MACpB;MACAnE,SAAS,CAACiB,KAAV,CAAgBF,YAAY,CAACoD,YAAY,GAAG,CAAhB,CAA5B,EAAgDC,GAAhD,CAAqDC,EAAD,IAAQ;QAC1D,OAAOzD,KAAK,CAACyD,EAAE,CAAC,CAAD,CAAH,CAAL,CAAaC,gBAAb,CAA8BD,EAAE,CAAC,CAAD,CAAhC,EAAqC,KAArC,CAAP;MACD,CAFD;IAGD;;IACD,IAAIF,YAAY,GAAGpD,YAAY,CAAC6B,MAAb,GAAsB,CAAzC,EAA4C;MAC1C;IACD;;IAED5C,SAAS,CAACiB,KAAV,CAAgBF,YAAY,CAACoD,YAAD,CAA5B,EAA4CC,GAA5C,CAAiDC,EAAD,IAAQ;MACtD,OACEzD,KAAK,CAACyD,EAAE,CAAC,CAAD,CAAH,CAAL,CAAaC,gBAAb,CAA8BD,EAAE,CAAC,CAAD,CAAhC,EAAqC,IAArC,GACAzD,KAAK,CAACyD,EAAE,CAAC,CAAD,CAAH,CAAL,CAAaE,YAAb,CAA0BF,EAAE,CAAC,CAAD,CAA5B,CAFF;IAID,CALD;IAMAG,UAAU,CAAC,MAAM;MACfX,qBAAqB,CAACM,YAAY,GAAG,CAAhB,CAArB;IACD,CAFS,EAEP,GAFO,CAAV;EAGD,CAvBD;;EAyBA,MAAMM,IAAI,GAAG,MAAM;IACjB1D,YAAY,GAAG,EAAf;IACAF,aAAa,GAAGb,SAAS,CAAC0E,KAA1B;;IACA,KAAK,IAAI/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3C,SAAS,CAAC0E,KAA9B,EAAqC/B,CAAC,EAAtC,EAA0C;MACxC/B,KAAK,CAAC+B,CAAD,CAAL,CAASgC,cAAT,CACEtD,aAAa,CACX,CAACrB,SAAS,CAAC4E,YAAV,GAAyB,CAA1B,IAA+BhE,KAAK,CAAC+B,CAAD,CAAL,CAASkC,OAAT,CAAiBjC,MADrC,EAEX,CAAC5C,SAAS,CAAC4E,YAAV,GAAyB,CAA1B,IAA+BhE,KAAK,CAAC+B,CAAD,CAAL,CAASkC,OAAT,CAAiBjC,MAFrC,CADf,EAKE,CAACkC,SAAD,EAAYC,OAAZ,KAAwB;QACtBlE,aAAa,IAAI,CAAjB;QACAC,WAAW,CAACgE,SAAD,CAAX,GAAyBC,OAAzB;;QAEA,IAAIlE,aAAa,KAAK,CAAtB,EAAyB;UACvBqD,QAAQ;UACR9B,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAFuB,CAGvB;QACD;MACF,CAdH;IAgBD;EACF,CArBD;;EAuBA,MAAM2C,QAAQ,GAAIC,CAAD,IAAO;IACtB5E,QAAQ,CAAC,IAAD,CAAR;IACAE,SAAS,CAAC,GAAD,CAAT;EACD,CAHD;;EAKA,MAAM2E,WAAW,GAAG,MAAM;IACxB,IAAIC,SAAS,GAAG/E,KAAK,GAAGJ,SAAS,CAAC0E,KAAlC;IACAtC,OAAO,CAACC,GAAR,CAAY,sBAAsB8C,SAAlC;IACA/C,OAAO,CAACC,GAAR,CAAY,kBAAkB/B,MAA9B;IACA,IAAI8E,QAAQ,GAAGC,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBD,KAAK,CAACrF,SAAS,CAAC0E,KAAX,CAAvB,EAA0CN,GAA1C,CAA8C,CAACC,EAAD,EAAKkB,GAAL,KAAa;MACxE,oBACE,QAAC,IAAD;QACE,KAAK,EAAEJ,SADT;QAEE,MAAM,EAAE7E,MAFV;QAIE,KAAK,EAAEiF,GAJT;QAKE,IAAI,EAAGC,GAAD,IAAS;UACb5E,KAAK,CAAC2E,GAAD,CAAL,GAAaC,GAAb;QACD;MAPH,GAGOD,GAHP;QAAA;QAAA;QAAA;MAAA,QADF;IAWD,CAZc,CAAf;IAcA,oBAAO;MAAA,UAAGH;IAAH,iBAAP;EACD,CAnBD;;EAqBA,MAAM9C,UAAU,GAAI2C,CAAD,IAAO;IACxB7C,OAAO,CAACC,GAAR,CAAY,2BAA2B4C,CAAvC;IACA,IAAIQ,EAAE,GAAG,CAAT;;IACA,IAAIjF,GAAG,GAAG,CAAN,IAAWyE,CAAC,GAAG,CAAnB,EAAsB;MACpB7C,OAAO,CAACC,GAAR,CAAY,iBAAiBnB,GAAjB,GAAuB,IAAvB,GAA8BV,GAA9B,GAAoC,GAApC,GAA0CyE,CAA1C,GAA8C,GAA1D;MACA/D,GAAG,GAAGA,GAAG,IAAI+D,CAAC,GAAGzE,GAAG,GAAGyE,CAAd,CAAT;MACA/D,GAAG,GAAGM,IAAI,CAACsC,KAAL,CAAW5C,GAAG,GAAG,GAAjB,IAAwB,GAA9B;IACD,CAJD,MAIO,IAAIV,GAAG,GAAG,CAAN,IAAWyE,CAAC,KAAK,CAArB,EAAwB;MAC7B/D,GAAG,GAAGA,GAAG,IAAI+D,CAAC,GAAGzE,GAAG,GAAGyE,CAAd,CAAT;MACA7C,OAAO,CAACC,GAAR,CAAY,iBAAiBoD,EAAjB,GAAsB,IAAtB,GAA6BjF,GAA7B,GAAmC,GAAnC,GAAyCyE,CAAzC,GAA6C,GAAzD;MACA/D,GAAG,GAAGM,IAAI,CAACsC,KAAL,CAAW5C,GAAG,GAAG,GAAjB,IAAwB,GAA9B;IACD,CAJM,MAIA,IAAIV,GAAG,KAAK,CAAR,IAAayE,CAAC,GAAG,CAArB,EAAwB;MAC7B7C,OAAO,CAACC,GAAR,CAAY,kBAAkBnB,GAAlB,GAAwB,KAAxB,GAAgC+D,CAA5C;MACA/D,GAAG,GAAGM,IAAI,CAACsC,KAAL,CAAW,CAAC5C,GAAG,GAAG+D,CAAP,IAAY,GAAvB,IAA8B,GAApC;IACD,CAduB,CAgBxB;;;IACA1C,aAAa,CAACrB,GAAD,CAAb;EACD,CAlBD;;EAoBA,MAAM6C,UAAU,GAAG,MAAM;IACvBtD,MAAM,CAAC,CAAD,CAAN;EACD,CAFD,CArWyB,CAyWzB;;;EAEA,MAAMiF,aAAa,GAAIC,IAAD,IAAU;IAC9BvD,OAAO,CAACC,GAAR,CAAY,yBAAZ;EACD,CAFD;;EAIA,MAAMuD,WAAW,GAAG,MAAM;IACxB,IAAIpF,GAAG,GAAGU,GAAG,GAAG,GAAZ,IAAmBA,GAAG,KAAK,CAA/B,EAAkC;MAChCkB,OAAO,CAACC,GAAR,CAAY,cAAZ;MACA5B,MAAM,CAACe,IAAI,CAACsC,KAAL,CAAW,CAACtD,GAAG,GAAG,GAAP,IAAc,GAAzB,IAAgC,GAAjC,CAAN;IACD,CAHD,MAGOC,MAAM,CAACS,GAAD,CAAN;EACR,CALD;;EAOA,MAAM2E,WAAW,GAAG,MAAM;IACxB,IAAIrF,GAAG,IAAI,GAAP,IAAcE,KAAK,KAAK,CAA5B,EAA+B;MAC7BD,MAAM,CAACe,IAAI,CAACsC,KAAL,CAAW,CAACtD,GAAG,GAAG,GAAP,IAAc,GAAzB,IAAgC,GAAjC,CAAN;IACD,CAFD,MAEO,IAAIA,GAAG,KAAKU,GAAR,IAAeR,KAAK,KAAK,CAA7B,EAAgC;MACrCD,MAAM,CAACe,IAAI,CAACsC,KAAL,CAAW,CAACpD,KAAK,GAAG,GAAT,IAAgB,GAA3B,IAAkC,GAAnC,CAAN;IACD;EACF,CAND,CAtXyB,CA8XzB;EACA;;;EACA,oBACE;IAAA,uBACE;MAAK,EAAE,EAAC,MAAR;MAAA,wBACE;QAAK,EAAE,EAAC,SAAR;QAAA,qCACW;UAAM,EAAE,EAAC,IAAT;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADX;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAIE;QAAK,SAAS,EAAC,WAAf;QAAA,uBACE;UAAK,SAAS,EAAC,eAAf;UAAA,uBACE;YAAK,SAAS,EAAC,SAAf;YAAA,UACGwE,WAAW;UADd;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QAJF,eAWE;QAAK,EAAE,EAAC,UAAR;QAAA,wBACE;UACE,SAAS,EAAC,SADZ;UAEE,OAAO,EAAE,MAAM;YACbT,IAAI,GADS,CAEb;YACA;YACA;;YAEArC,OAAO,CAACC,GAAR,CAAY,eAAZ;UACD,CATH;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAcE;UACE,SAAS,EAAC,YADZ;UAEE,OAAO,EAAE,MAAM,CAAE,CAFnB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAdF,eAoBE;UACE,EAAE,EAAC,QADL;UAEE,OAAO,EAAEuD,WAFX;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QApBF,eA0BE;UAAK,SAAS,EAAE,CAACpF,GAAD,GAAO,aAAP,GAAuB,KAAvC;UAAA,mBACOA,GADP;QAAA;UAAA;UAAA;UAAA;QAAA,QA1BF,eA6BE;UACE,EAAE,EAAC,QADL;UAEE,OAAO,EAAEqF,WAFX;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QA7BF,eAmCE;UAAA,kCACQ;YAAM,EAAE,EAAC,OAAT;YAAA,UAAkBnF;UAAlB;YAAA;YAAA;YAAA;UAAA,QADR;QAAA;UAAA;UAAA;UAAA;QAAA,QAnCF;MAAA;QAAA;QAAA;QAAA;MAAA,QAXF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAuDD,CAvbD;;GAAMR,O;;KAAAA,O;AAybN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}