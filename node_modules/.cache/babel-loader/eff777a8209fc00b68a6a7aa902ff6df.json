{"ast":null,"code":"var type = require('type-detect');\n\nvar flag = require('./flag');\n\nfunction isObjectType(obj) {\n  var objectType = type(obj);\n  var objectTypes = ['Array', 'Object', 'function'];\n  return objectTypes.indexOf(objectType) !== -1;\n}\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getOperator\n * @api public\n */\n\n\nmodule.exports = function getOperator(obj, args) {\n  var operator = flag(obj, 'operator');\n  var negate = flag(obj, 'negate');\n  var expected = args[3];\n  var msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n  msg = msg || '';\n\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  var isObject = isObjectType(expected);\n\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n};","map":{"version":3,"names":["type","require","flag","isObjectType","obj","objectType","objectTypes","indexOf","module","exports","getOperator","args","operator","negate","expected","msg","undefined","test","isObject"],"sources":["F:/Games/PFPRacerNFTProject/slotmachinereact/node_modules/chai/lib/chai/utils/getOperator.js"],"sourcesContent":["var type = require('type-detect');\n\nvar flag = require('./flag');\n\nfunction isObjectType(obj) {\n  var objectType = type(obj);\n  var objectTypes = ['Array', 'Object', 'function'];\n\n  return objectTypes.indexOf(objectType) !== -1;\n}\n\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getOperator\n * @api public\n */\n\nmodule.exports = function getOperator(obj, args) {\n  var operator = flag(obj, 'operator');\n  var negate = flag(obj, 'negate');\n  var expected = args[3];\n  var msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n\n  msg = msg || '';\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  var isObject = isObjectType(expected);\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n};\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AAEA,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAlB;;AAEA,SAASE,YAAT,CAAsBC,GAAtB,EAA2B;EACzB,IAAIC,UAAU,GAAGL,IAAI,CAACI,GAAD,CAArB;EACA,IAAIE,WAAW,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,CAAlB;EAEA,OAAOA,WAAW,CAACC,OAAZ,CAAoBF,UAApB,MAAoC,CAAC,CAA5C;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBN,GAArB,EAA0BO,IAA1B,EAAgC;EAC/C,IAAIC,QAAQ,GAAGV,IAAI,CAACE,GAAD,EAAM,UAAN,CAAnB;EACA,IAAIS,MAAM,GAAGX,IAAI,CAACE,GAAD,EAAM,QAAN,CAAjB;EACA,IAAIU,QAAQ,GAAGH,IAAI,CAAC,CAAD,CAAnB;EACA,IAAII,GAAG,GAAGF,MAAM,GAAGF,IAAI,CAAC,CAAD,CAAP,GAAaA,IAAI,CAAC,CAAD,CAAjC;;EAEA,IAAIC,QAAJ,EAAc;IACZ,OAAOA,QAAP;EACD;;EAED,IAAI,OAAOG,GAAP,KAAe,UAAnB,EAA+BA,GAAG,GAAGA,GAAG,EAAT;EAE/BA,GAAG,GAAGA,GAAG,IAAI,EAAb;;EACA,IAAI,CAACA,GAAL,EAAU;IACR,OAAOC,SAAP;EACD;;EAED,IAAI,WAAWC,IAAX,CAAgBF,GAAhB,CAAJ,EAA0B;IACxB,OAAOC,SAAP;EACD;;EAED,IAAIE,QAAQ,GAAGf,YAAY,CAACW,QAAD,CAA3B;;EACA,IAAI,UAAUG,IAAV,CAAeF,GAAf,CAAJ,EAAyB;IACvB,OAAOG,QAAQ,GAAG,oBAAH,GAA0B,gBAAzC;EACD;;EAED,OAAOA,QAAQ,GAAG,iBAAH,GAAuB,aAAtC;AACD,CA3BD"},"metadata":{},"sourceType":"script"}