{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\ReelSet.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Constants from \"../Constants\";\nimport \"../assets/css/App.css\";\nimport Reel from \"./Reel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ReelSet = props => {\n  //  const [spinReel, setSpinReel] = useState(false)\n  let spinResults = [[]];\n  const winningLines = [];\n  let reels = [];\n  let img = [];\n\n  const getRandomNr = () => {\n    let randomNr = 0;\n\n    if (props.startGame > 0) {\n      randomNr = -(Math.floor(Math.random() * 42) * 242);\n    }\n\n    return randomNr;\n  };\n\n  spinResults = Array.apply(null, Array(Constants.REELS)).map((reel, index) => {\n    console.log(\"my index reel is\" + index);\n    reels[index] = reel;\n    console.log(\"my index reel[] is:\" + reel);\n    reel.map((image, index) => {\n      console.log(\"my index img is\" + index);\n      return img[index] = image;\n    });\n    return reels;\n  });\n  console.log(\"My spin results are \" + spinResults);\n\n  const renderReels = () => {\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\n      return /*#__PURE__*/_jsxDEV(Reel, {\n        reel: el,\n        index: idx,\n        gameOn: getRandomNr()\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 14\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: reelList\n    }, void 0, false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reelSet\",\n          children: renderReels()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = ReelSet;\nexport default ReelSet;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReelSet\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Constants","Reel","ReelSet","props","spinResults","winningLines","reels","img","getRandomNr","randomNr","startGame","Math","floor","random","Array","apply","REELS","map","reel","index","console","log","image","renderReels","reelList","el","idx"],"sources":["F:/Games/slotmachinereact/src/components/ReelSet.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport Constants from \"../Constants\";\r\nimport \"../assets/css/App.css\";\r\nimport Reel from \"./Reel\";\r\n\r\nconst ReelSet = (props) => {\r\n  //  const [spinReel, setSpinReel] = useState(false)\r\n  let spinResults = [[]];\r\n  const winningLines = [];\r\n  let reels= [];\r\n  let img = [];\r\n\r\n  const getRandomNr = () => {\r\n    let randomNr = 0;\r\n    if (props.startGame > 0) {\r\n      randomNr = -(Math.floor(Math.random() * 42) * 242);\r\n    }\r\n    return randomNr;\r\n  };\r\n\r\n  spinResults = Array.apply(null, Array(Constants.REELS)).map((reel, index)=>{\r\n    console.log(\"my index reel is\"+index);\r\n    reels[index]=reel;\r\n    console.log(\"my index reel[] is:\"+reel);\r\n    \r\n    reel.map((image, index)=>{\r\n        console.log(\"my index img is\"+index);\r\n        return img[index]=image;\r\n    })\r\n    return reels;\r\n  })\r\n\r\n  console.log(\"My spin results are \"+ spinResults);\r\n\r\n\r\n\r\n  const renderReels = () => {\r\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\r\n      return <Reel reel={el} key={idx} index={idx} gameOn={getRandomNr()}/>;\r\n    });\r\n    return <>{reelList}</>;\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"playContainer\">\r\n          <div className=\"reelSet\">{\r\n          renderReels()\r\n          }</div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReelSet;\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAO,uBAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;EACzB;EACA,IAAIC,WAAW,GAAG,CAAC,EAAD,CAAlB;EACA,MAAMC,YAAY,GAAG,EAArB;EACA,IAAIC,KAAK,GAAE,EAAX;EACA,IAAIC,GAAG,GAAG,EAAV;;EAEA,MAAMC,WAAW,GAAG,MAAM;IACxB,IAAIC,QAAQ,GAAG,CAAf;;IACA,IAAIN,KAAK,CAACO,SAAN,GAAkB,CAAtB,EAAyB;MACvBD,QAAQ,GAAG,EAAEE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC,GAAnC,CAAX;IACD;;IACD,OAAOJ,QAAP;EACD,CAND;;EAQAL,WAAW,GAAGU,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBD,KAAK,CAACd,SAAS,CAACgB,KAAX,CAAvB,EAA0CC,GAA1C,CAA8C,CAACC,IAAD,EAAOC,KAAP,KAAe;IACzEC,OAAO,CAACC,GAAR,CAAY,qBAAmBF,KAA/B;IACAb,KAAK,CAACa,KAAD,CAAL,GAAaD,IAAb;IACAE,OAAO,CAACC,GAAR,CAAY,wBAAsBH,IAAlC;IAEAA,IAAI,CAACD,GAAL,CAAS,CAACK,KAAD,EAAQH,KAAR,KAAgB;MACrBC,OAAO,CAACC,GAAR,CAAY,oBAAkBF,KAA9B;MACA,OAAOZ,GAAG,CAACY,KAAD,CAAH,GAAWG,KAAlB;IACH,CAHD;IAIA,OAAOhB,KAAP;EACD,CAVa,CAAd;EAYAc,OAAO,CAACC,GAAR,CAAY,yBAAwBjB,WAApC;;EAIA,MAAMmB,WAAW,GAAG,MAAM;IACxB,IAAIC,QAAQ,GAAGV,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBD,KAAK,CAACd,SAAS,CAACgB,KAAX,CAAvB,EAA0CC,GAA1C,CAA8C,CAACQ,EAAD,EAAKC,GAAL,KAAa;MACxE,oBAAO,QAAC,IAAD;QAAM,IAAI,EAAED,EAAZ;QAA0B,KAAK,EAAEC,GAAjC;QAAsC,MAAM,EAAElB,WAAW;MAAzD,GAAqBkB,GAArB;QAAA;QAAA;QAAA;MAAA,QAAP;IACD,CAFc,CAAf;IAGA,oBAAO;MAAA,UAAGF;IAAH,iBAAP;EACD,CALD;;EAQA,oBACE;IAAA,uBACE;MAAK,SAAS,EAAC,WAAf;MAAA,uBACE;QAAK,SAAS,EAAC,eAAf;QAAA,uBACE;UAAK,SAAS,EAAC,SAAf;UAAA,UACAD,WAAW;QADX;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAWD,CAlDD;;KAAMrB,O;AAoDN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}