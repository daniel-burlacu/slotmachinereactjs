{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\ReelSet.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Constants from \"../Constants\";\nimport Bet from \"./Bet\";\nimport Withdrawal from \"./Withdrawal\";\nimport \"../assets/css/App.css\";\nimport Reel from \"./Reel\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet score = 2;\nlet bet = 0;\n\nconst ReelSet = props => {\n  _s();\n\n  //  const [spinReel, setSpinReel] = useState(false)\n  const [gameOn, setGameOn] = useState(0);\n  const reels = []; //  let [bet, setBet] = useState(0)\n  //  const [startGame, setStartGa] = useState(2);\n  //let gameOn=0;\n\n  const [rolling, setRolling] = useState(false);\n  let scoreRef = 0; //let score = 2;\n\n  let spinResults = [];\n  let results = []; //  let bet = 0;\n\n  let winningLines = [];\n  let countWin = 0;\n  let symbolSellection = [];\n  let randomNr = 0; //  const symbols = \"DDDGNNSSVVVCCFFRRYYIIJJZZMMOOLLTTPPBBQQAAG\";\n  //const symbols = \"DDDGNNSS\"\n\n  const symbols = Constants.REEL_SYMBOLS;\n\n  const handleScore = e => {\n    // /  const [gameScore, setGameScore] = useState({score:0, bet:0})\n    score = Math.round((score + e) * 100) / 100; //  console.log(\"mySetGameScore = \"+gameScore.score);\n\n    console.log(\"My score=\" + score); //setGameScore(score);\n    // props.dadCallback(score)\n  };\n\n  const createArray = (randomNr, index) => {\n    for (let i = 0; i < 3; i++) {\n      results.push(symbols[index][-(randomNr / 242) + i]);\n    }\n  };\n\n  const getRandomNr = index => {\n    if (gameOn > 0) {\n      randomNr = -(Math.floor(Math.random() * ((symbols[index].length - 3) * Constants.REELS_REPEAT) + 3) * 242);\n      createArray(randomNr, index);\n    }\n\n    console.log(\"My random number is:\" + randomNr);\n    return randomNr;\n  };\n\n  const startGame = () => {\n    let list = renderReels();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: list\n    }, void 0, false);\n  };\n\n  const renderReels = () => {\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\n      return /*#__PURE__*/_jsxDEV(Reel, {\n        reel: el,\n        index: idx,\n        gameOn: getRandomNr(idx)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 14\n      }, this);\n    });\n    createResults();\n    return reelList;\n  };\n\n  const drawScore = (lineNumberType, fool) => {\n    let newScore = 0;\n\n    if (fool) {\n      lineNumberType = 18;\n    }\n\n    switch (lineNumberType) {\n      case 0:\n        // top line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 1:\n        // middle line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 2:\n        // bottom line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 3:\n        // V shape starting bottom left\n        //        audioWin.play();\n        newScore = 0.2;\n        break;\n\n      case 4:\n        // V shape starting bottom right\n        //        audioWin.play();\n        newScore = 0.2;\n        break;\n\n      case 5:\n        // W shape starting top left\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 6:\n        // M shape starting bottom left\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 7:\n        // M shape on top half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 8:\n        // W shape on top half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 9:\n        //W shape on bottom half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 10:\n        // M shape on bottom half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 11:\n        // U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 12:\n        // inverse U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 13:\n        // U shape on bottom half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 14:\n        // inverse U shape on bottom half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 15:\n        // inverse U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 16:\n        // Z shape from top left\n        //        audioWin.play();\n        newScore = 0.4;\n        break;\n\n      case 17:\n        // Z shape from bottom left\n        //        audioWin.play();\n        newScore = 0.4;\n        break;\n\n      case 18:\n        // Z shape from bottom left\n        //        audioWinBonus.play();\n        newScore = 100;\n        break;\n\n      default:\n        newScore = 0;\n    }\n\n    if (gameOn > 0) {\n      setMyScore(newScore);\n    }\n\n    return;\n  };\n\n  const createResults = () => {\n    let myResults = [];\n    let j = 0;\n\n    for (let i = 0; i <= results.length; i++) {\n      myResults[j] = results[i];\n      j++;\n\n      if (j === 3) {\n        spinResults.push(myResults);\n        myResults = [];\n        j = 0;\n      }\n    }\n\n    checkWin(); // score=score+scr;\n    // handleScore();\n    // setScore(scr);\n  };\n\n  const spinReel = () => {\n    if (bet === 0) {\n      alert(\"Please place a bet !\");\n    } else {\n      setGameOn(gameOn + 1);\n    }\n  };\n\n  const callbackBet = e => {\n    bet = e;\n  };\n\n  const checkLinesElements = symbol => {\n    countWin++;\n    let symNr = 0;\n    let fool = 0;\n\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      fool = 0;\n      symNr = 0;\n\n      for (let j = 0; j < Constants.LINES[i].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n\n        if (symbol === spinResults[indexI][indexJ]) {\n          symNr++;\n        }\n      }\n\n      if (fool + symNr === 5 && fool < 4) {\n        winningLines.push(i);\n      }\n    }\n\n    winningLines = uniq(winningLines);\n  };\n\n  const uniq = a => {\n    return a.sort().filter(function (item, pos, ary) {\n      return !pos || item !== ary[pos - 1];\n    });\n  };\n\n  const checkElements = () => {\n    let fool = 0;\n\n    for (let k = 0; k < 3; k++) {\n      fool = 0;\n\n      for (let i = 0; i < spinResults.length; i++) {\n        let symb = \"\";\n\n        for (let j = k; j < spinResults[i].length; j++) {\n          if (spinResults[i][j] !== \"D\") {\n            symb = spinResults[i][j];\n            j = spinResults[i].length;\n          } else {\n            fool++;\n            j = spinResults[i].length;\n          }\n        }\n\n        if (fool < 4 && symb !== \"\") {\n          symbolSellection.push(symb);\n        }\n      }\n    }\n\n    for (let i = 0; i < symbolSellection.length; i++) {\n      checkLinesElements(symbolSellection[i]);\n    }\n  };\n\n  const setBetZero = () => {\n    bet = 0;\n  };\n\n  const setMyScore = e => {\n    let scr = 0;\n\n    if (bet > 0 && e > 0) {\n      scr = scr + (e + bet * e);\n      scr = Math.round(scr * 100) / 100;\n    } else if (bet > 0 && e === 0) {\n      scr = scr - (e + bet * e);\n      scr = Math.round(scr * 100) / 100;\n    } else if (bet === 0 && e > 0) {\n      scr = Math.round((scr + e) * 100) / 100;\n    } // score= Math.round((score+scr) * 100) / 100;\n\n\n    handleScore(scr); //  setScore(scr);\n  };\n\n  const checkFourFools = () => {\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      let fool = 0;\n\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n      }\n\n      if (fool === 4) {\n        winningLines.push(i);\n        drawScore(i, false);\n      }\n    }\n  };\n\n  const evaluateResults = () => {\n    checkFourFools();\n    checkElements(); //highLightWinningLines(0);\n\n    if (winningLines.length > 0) {\n      for (let i = 0; i < winningLines.length; i++) {\n        drawScore(winningLines[i], false);\n      }\n    } else {\n      if (score - bet >= 0.2) {\n        score = Math.round((score - bet) * 100) / 100; //  setScore(scr);\n        //handleScore(scr);\n\n        if (score < bet) {\n          setBetZero();\n        }\n      } else if (score - bet === 0) {\n        setBetZero();\n        score = 0; //  setScore(scr);\n        //handleScore(scr);\n      }\n    } //winningLines=[];\n\n  };\n\n  const checkFiveFools = () => {\n    let fl = false;\n\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      let fool = 0;\n\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n      }\n\n      if (fool === 5) {\n        fl = true;\n        winningLines.push(i);\n        drawScore(i, true); //  highLightWinningLines(0);\n\n        break;\n      }\n    }\n\n    return fl;\n  };\n\n  const checkWin = () => {\n    if (gameOn > 0) {\n      let fool = checkFiveFools();\n\n      if (!fool) {\n        evaluateResults();\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"jackpot\",\n      children: [\"Jackpot: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reelSet\",\n          children: startGame()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: !rolling ? \"roll rolling\" : \"roll\",\n        onClick: () => {\n          spinReel();\n        },\n        disabled: rolling,\n        children: rolling ? \"Rolling...\" : \"ROLL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Withdrawal, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Bet, {\n        score: score,\n        setBet: callbackBet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Score:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"score\",\n          children: score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ReelSet, \"muxWsO697HSgAiU9vxIWreVW3zs=\");\n\n_c = ReelSet;\nexport default ReelSet;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReelSet\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Constants","Bet","Withdrawal","Reel","score","bet","ReelSet","props","gameOn","setGameOn","reels","rolling","setRolling","scoreRef","spinResults","results","winningLines","countWin","symbolSellection","randomNr","symbols","REEL_SYMBOLS","handleScore","e","Math","round","console","log","createArray","index","i","push","getRandomNr","floor","random","length","REELS_REPEAT","startGame","list","renderReels","reelList","Array","apply","REELS","map","el","idx","createResults","drawScore","lineNumberType","fool","newScore","setMyScore","myResults","j","checkWin","spinReel","alert","callbackBet","checkLinesElements","symbol","symNr","LINES","indexI","indexJ","uniq","a","sort","filter","item","pos","ary","checkElements","k","symb","setBetZero","scr","checkFourFools","evaluateResults","checkFiveFools","fl"],"sources":["F:/Games/slotmachinereact/src/components/ReelSet.js"],"sourcesContent":["import React, { useEffect, useRef, useState} from \"react\";\r\nimport Constants from \"../Constants\";\r\nimport Bet from \"./Bet\";\r\nimport Withdrawal from \"./Withdrawal\";\r\nimport \"../assets/css/App.css\";\r\nimport Reel from \"./Reel\";\r\n\r\nlet score=2;\r\nlet bet=0;\r\n\r\nconst ReelSet = (props) => {\r\n  //  const [spinReel, setSpinReel] = useState(false)\r\n  const [gameOn, setGameOn] = useState(0);\r\n  const reels = [];\r\n//  let [bet, setBet] = useState(0)\r\n//  const [startGame, setStartGa] = useState(2);\r\n //let gameOn=0;\r\n  const [rolling, setRolling] = useState(false);\r\n\r\n  let scoreRef = 0;\r\n  //let score = 2;\r\n\r\n\r\n  let spinResults = [];\r\n  let results = [];\r\n\r\n//  let bet = 0;\r\n\r\n  let winningLines = [];\r\n  let countWin = 0;\r\n  let symbolSellection = [];\r\n  let randomNr = 0;\r\n//  const symbols = \"DDDGNNSSVVVCCFFRRYYIIJJZZMMOOLLTTPPBBQQAAG\";\r\n//const symbols = \"DDDGNNSS\"\r\nconst symbols = Constants.REEL_SYMBOLS;\r\n\r\nconst handleScore =(e)=>{\r\n// /  const [gameScore, setGameScore] = useState({score:0, bet:0})\r\n score=Math.round((score+e) * 100) / 100;\r\n\r\n//  console.log(\"mySetGameScore = \"+gameScore.score);\r\n console.log(\"My score=\"+score);\r\n//setGameScore(score);\r\n// props.dadCallback(score)\r\n\r\n}\r\n  const createArray = (randomNr, index) => {\r\n    for (let i = 0; i < 3; i++) {\r\n      results.push((symbols[index])[-(randomNr / 242) + i]);\r\n    }\r\n  };\r\n\r\n  const getRandomNr = (index) => {\r\n    if (gameOn > 0) {\r\n      randomNr = -(Math.floor(Math.random() * ((symbols[index].length-3)*Constants.REELS_REPEAT)+3) * 242);\r\n      createArray(randomNr, index);\r\n    }\r\n    console.log(\"My random number is:\"+randomNr);\r\n    return randomNr;\r\n  };\r\n\r\n  const startGame = () =>{\r\n    let list=renderReels();\r\n\r\n    return <>{list}</>;\r\n  }\r\n  \r\n  const renderReels = () => {\r\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\r\n      return <Reel reel={el} key={idx} index={idx} gameOn={getRandomNr(idx)}/>;\r\n    });\r\n  createResults();\r\n    return reelList;\r\n  };\r\n\r\n  const drawScore = (lineNumberType, fool) => {\r\n    let newScore = 0;\r\n    if (fool) {\r\n      lineNumberType = 18;\r\n    }\r\n    switch (lineNumberType) {\r\n      case 0: // top line\r\n        //        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 1: // middle line\r\n        //        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 2: // bottom line\r\n        //        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 3: // V shape starting bottom left\r\n        //        audioWin.play();\r\n        newScore = 0.2;\r\n        break;\r\n      case 4: // V shape starting bottom right\r\n        //        audioWin.play();\r\n        newScore = 0.2;\r\n        break;\r\n      case 5: // W shape starting top left\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 6: // M shape starting bottom left\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 7: // M shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 8: // W shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 9: //W shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 10: // M shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 11: // U shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 12: // inverse U shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 13: // U shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 14: // inverse U shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 15: // inverse U shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 16: // Z shape from top left\r\n        //        audioWin.play();\r\n        newScore = 0.4;\r\n        break;\r\n      case 17: // Z shape from bottom left\r\n        //        audioWin.play();\r\n        newScore = 0.4;\r\n        break;\r\n      case 18: // Z shape from bottom left\r\n        //        audioWinBonus.play();\r\n        newScore = 100;\r\n        break;\r\n      default:\r\n        newScore = 0;\r\n    }\r\n    if(gameOn>0){\r\n      setMyScore(newScore);\r\n   }\r\n    return;\r\n  };\r\n\r\n  const createResults = () => {\r\n    let myResults = [];\r\n    let j=0;\r\n\r\n    for(let i=0; i<=results.length;i++){\r\n      \r\n      myResults[j]=(results[i]);\r\n      j++;\r\n\r\n      if(j===3){\r\n        spinResults.push(myResults);\r\n        myResults=[];\r\n        j=0;\r\n      } \r\n    }\r\n   checkWin();\r\n  // score=score+scr;\r\n  // handleScore();\r\n  // setScore(scr);\r\n  \r\n  };\r\n\r\n  const spinReel = () => {\r\n    if(bet===0){\r\n      alert(\"Please place a bet !\");\r\n    }else{\r\n    setGameOn(gameOn+1);\r\n}\r\n  };\r\n\r\n  const callbackBet = (e) => {    \r\n    bet=e;\r\n  }\r\n\r\n  const checkLinesElements = (symbol) => {\r\n    countWin++;\r\n    let symNr = 0;\r\n    let fool = 0;\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      fool = 0;\r\n      symNr = 0;\r\n      for (let j = 0; j < Constants.LINES[i].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n\r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n          fool++;\r\n        }\r\n        if (symbol === spinResults[indexI][indexJ]) {\r\n          symNr++;\r\n        }\r\n      }\r\n      if (fool + symNr === 5 && fool < 4) {\r\n        winningLines.push(i);\r\n      }\r\n    }\r\n    winningLines = uniq(winningLines);\r\n  };\r\n\r\n  const uniq = (a) => {\r\n    return a.sort().filter(function (item, pos, ary) {\r\n      return !pos || item !== ary[pos - 1];\r\n    });\r\n  };\r\n\r\n  const checkElements = () => {\r\n    let fool = 0;\r\n    for (let k = 0; k < 3; k++) {\r\n      fool = 0;\r\n      for (let i = 0; i < spinResults.length; i++) {\r\n        let symb = \"\";\r\n        for (let j = k; j < spinResults[i].length; j++) {\r\n          if (spinResults[i][j] !== \"D\") {\r\n            symb = spinResults[i][j];\r\n            j = spinResults[i].length;\r\n          } else {\r\n            fool++;\r\n            j = spinResults[i].length;\r\n          }\r\n        }\r\n        if (fool < 4 && symb !== \"\") {\r\n          symbolSellection.push(symb);\r\n        }\r\n      }\r\n    }\r\n    for (let i = 0; i < symbolSellection.length; i++) {\r\n      checkLinesElements(symbolSellection[i]);\r\n    }\r\n  };\r\n\r\n  const setBetZero = () => {\r\n    bet = 0;\r\n  };\r\n\r\n  const setMyScore = (e) => {\r\n    let scr = 0;\r\n  \r\n    if (bet > 0 && e > 0) {\r\n      scr = scr + (e + bet * e);\r\n      scr = Math.round(scr * 100) / 100;\r\n    } else if (bet > 0 && e === 0) {\r\n      scr = scr - (e + bet * e);\r\n      scr = Math.round(scr * 100) / 100;\r\n    } else if (bet === 0 && e > 0) {\r\n      scr = Math.round((scr + e) * 100) / 100;\r\n    }\r\n   // score= Math.round((score+scr) * 100) / 100;\r\n    handleScore(scr);\r\n  //  setScore(scr);\r\n    \r\n  };\r\n\r\n  const checkFourFools = () => {\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      let fool = 0;\r\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n          fool++;\r\n        }\r\n      }\r\n      if (fool === 4) {\r\n        winningLines.push(i);\r\n        drawScore(i, false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const evaluateResults = () => {\r\n    checkFourFools();\r\n    checkElements();\r\n    //highLightWinningLines(0);\r\n    if (winningLines.length > 0) {\r\n      for (let i = 0; i < winningLines.length; i++) {\r\n        drawScore(winningLines[i], false);\r\n      }\r\n    } else {\r\n      if (score - bet >= 0.2) {\r\n        score = Math.round((score- bet) * 100) / 100;\r\n      //  setScore(scr);\r\n      //handleScore(scr);\r\n        if (score < bet) {\r\n          setBetZero();\r\n        }\r\n      } else if (score - bet === 0) {\r\n        setBetZero();\r\n        score = 0;\r\n      //  setScore(scr);\r\n      //handleScore(scr);\r\n      }\r\n    }\r\n    //winningLines=[];\r\n  };\r\n  const checkFiveFools = () => {\r\n    let fl = false;\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      let fool = 0;\r\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n          fool++;\r\n        }\r\n      }\r\n      if (fool === 5) {\r\n        fl = true;\r\n        winningLines.push(i);\r\n          drawScore(i,true);\r\n        //  highLightWinningLines(0);\r\n        break;\r\n      }\r\n    }\r\n    return fl;\r\n  };\r\n\r\n  const checkWin = () => {\r\n    if(gameOn>0){\r\n    \r\n    let fool = checkFiveFools();\r\n    if (!fool) {\r\n      evaluateResults();\r\n    }\r\n  }\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <div id=\"jackpot\" >\r\n    Jackpot: <span>100</span>\r\n  </div>\r\n      <div className=\"container\" >\r\n        <div className=\"playContainer\">\r\n          <div className=\"reelSet\" >\r\n            {startGame()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n            <div id=\"controls\">\r\n            <div\r\n              className={!rolling ? \"roll rolling\" : \"roll\"}\r\n              onClick={() => {\r\n                spinReel();\r\n              }}\r\n              disabled={rolling} >\r\n              {rolling ? \"Rolling...\" : \"ROLL\"}\r\n            </div>\r\n            <Withdrawal/>\r\n            <Bet score={score} setBet={callbackBet} />\r\n            <label>\r\n              Score:<span id=\"score\">{score}</span>\r\n            </label>\r\n          </div>\r\n          </>\r\n  );\r\n};\r\n\r\nexport default ReelSet;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}