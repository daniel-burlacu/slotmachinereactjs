{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path = __importStar(require(\"path\"));\n\nconst fsresolver_1 = require(\"./fsresolver\");\n\nfunction BacktrackFsResolver() {\n  let pathPrefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  const fsResolver = fsresolver_1.FsResolver();\n  return function backtrack(resolvePath, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (path.isAbsolute(resolvePath)) {\n        return null;\n      }\n\n      const cwd = ctx.cwd || process.cwd();\n      let previous = path.resolve(cwd, \"./\");\n      let current = previous;\n\n      do {\n        const result = yield fsResolver(path.join(current, pathPrefix, resolvePath), ctx);\n\n        if (result) {\n          return result;\n        }\n\n        previous = current;\n        current = path.join(current, \"..\");\n      } while (current !== previous); // Reached root\n\n\n      return null;\n    });\n  };\n}\n\nexports.BacktrackFsResolver = BacktrackFsResolver;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AAEA,SAAgBA,mBAAhB,GAA2D;EAAA,IAAvBC,UAAuB,uEAAF,EAAE;EACzD,MAAMC,UAAU,GAAGC,yBAAnB;EAEA,OAAO,SAAeC,SAAf,CAAyBC,WAAzB,EAA8CC,GAA9C,EAA0D;;MAC/D,IAAIC,IAAI,CAACC,UAAL,CAAgBH,WAAhB,CAAJ,EAAkC;QAChC,OAAO,IAAP;MACD;;MAED,MAAMI,GAAG,GAAGH,GAAG,CAACG,GAAJ,IAAWC,OAAO,CAACD,GAAR,EAAvB;MAEA,IAAIE,QAAQ,GAAWJ,IAAI,CAACK,OAAL,CAAaH,GAAb,EAAkB,IAAlB,CAAvB;MACA,IAAII,OAAO,GAAWF,QAAtB;;MACA,GAAG;QACD,MAAMG,MAAM,GAAG,MAAMZ,UAAU,CAACK,IAAI,CAACQ,IAAL,CAAUF,OAAV,EAAmBZ,UAAnB,EAA+BI,WAA/B,CAAD,EAA8CC,GAA9C,CAA/B;;QAEA,IAAIQ,MAAJ,EAAY;UACV,OAAOA,MAAP;QACD;;QAEDH,QAAQ,GAAGE,OAAX;QACAA,OAAO,GAAGN,IAAI,CAACQ,IAAL,CAAUF,OAAV,EAAmB,IAAnB,CAAV;MACD,CATD,QASSA,OAAO,KAAKF,QATrB,GASgC;;;MAChC,OAAO,IAAP;IACD;EAAA,CApBD;AAqBD;;AAxBDK","names":["BacktrackFsResolver","pathPrefix","fsResolver","fsresolver_1","backtrack","resolvePath","ctx","path","isAbsolute","cwd","process","previous","resolve","current","result","join","exports"],"sources":["F:\\Games\\slotmachinereact\\node_modules\\@resolver-engine\\fs\\src\\resolvers\\backtrackfsresolver.ts"],"sourcesContent":["import { Context, SubResolver } from \"@resolver-engine/core\";\nimport * as path from \"path\";\nimport { FsResolver } from \"./fsresolver\";\n\nexport function BacktrackFsResolver(pathPrefix: string = \"\"): SubResolver {\n  const fsResolver = FsResolver();\n\n  return async function backtrack(resolvePath: string, ctx: Context): Promise<string | null> {\n    if (path.isAbsolute(resolvePath)) {\n      return null;\n    }\n\n    const cwd = ctx.cwd || process.cwd();\n\n    let previous: string = path.resolve(cwd, \"./\");\n    let current: string = previous;\n    do {\n      const result = await fsResolver(path.join(current, pathPrefix, resolvePath), ctx);\n\n      if (result) {\n        return result;\n      }\n\n      previous = current;\n      current = path.join(current, \"..\");\n    } while (current !== previous); // Reached root\n    return null;\n  };\n}\n"]},"metadata":{},"sourceType":"script"}