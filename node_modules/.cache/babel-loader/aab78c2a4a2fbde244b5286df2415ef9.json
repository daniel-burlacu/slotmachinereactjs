{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\n\nvar _a = require('ethereum-cryptography/secp256k1'),\n    ecdsaSign = _a.ecdsaSign,\n    ecdsaRecover = _a.ecdsaRecover,\n    publicKeyConvert = _a.publicKeyConvert;\n\nvar BN = require(\"bn.js\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar hash_1 = require(\"./hash\");\n\nvar helpers_1 = require(\"./helpers\");\n/**\n * Returns the ECDSA signature of a message hash.\n */\n\n\nexports.ecsign = function (msgHash, privateKey, chainId) {\n  var sig = ecdsaSign(msgHash, privateKey);\n  var recovery = sig.recid;\n  var ret = {\n    r: Buffer.from(sig.signature.slice(0, 32)),\n    s: Buffer.from(sig.signature.slice(32, 64)),\n    v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27\n  };\n  return ret;\n};\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\n\n\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n  var signature = Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32)], 64);\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  var senderPubKey = ecdsaRecover(signature, recovery, msgHash);\n  return Buffer.from(publicKeyConvert(senderPubKey, false).slice(1));\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\n\n\nexports.toRpcSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  } // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n\n\n  return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\n\n\nexports.fromRpcSig = function (sig) {\n  var buf = bytes_1.toBuffer(sig); // NOTE: with potential introduction of chainId this might need to be updated\n\n  if (buf.length !== 65) {\n    throw new Error('Invalid signature length');\n  }\n\n  var v = buf[64]; // support both versions of `eth_sign` responses\n\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v: v,\n    r: buf.slice(0, 32),\n    s: buf.slice(32, 64)\n  };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\n\n\nexports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n  if (homesteadOrLater === void 0) {\n    homesteadOrLater = true;\n  }\n\n  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n\n  var rBN = new BN(r);\n  var sBN = new BN(s);\n\n  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n    return false;\n  }\n\n  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\n\n\nexports.hashPersonalMessage = function (message) {\n  helpers_1.assertIsBuffer(message);\n  var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\" + message.length.toString(), 'utf-8');\n  return hash_1.keccak(Buffer.concat([prefix, message]));\n};\n\nfunction calculateSigRecovery(v, chainId) {\n  return chainId ? v - (2 * chainId + 35) : v - 27;\n}\n\nfunction isValidSigRecovery(recovery) {\n  return recovery === 0 || recovery === 1;\n}","map":{"version":3,"mappings":"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","names":["require","ecdsaSign","ecdsaRecover","publicKeyConvert","exports","msgHash","privateKey","chainId","sig","recovery","recid","ret","r","Buffer","from","signature","slice","s","v","concat","bytes_1","calculateSigRecovery","isValidSigRecovery","Error","senderPubKey","buf","length","homesteadOrLater","SECP256K1_N_DIV_2","BN","SECP256K1_N","rBN","sBN","isZero","gt","cmp","message","helpers_1","prefix","toString","hash_1"],"sources":["../src/signature.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}