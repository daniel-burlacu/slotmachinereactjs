{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BN = require(\"bn.js\");\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar evm_1 = require(\"../evm\");\n\nvar assert = require('assert');\n\nfunction multComplexity(x) {\n  var fac1;\n  var fac2;\n\n  if (x.lten(64)) {\n    return x.sqr();\n  } else if (x.lten(1024)) {\n    // return Math.floor(Math.pow(x, 2) / 4) + 96 * x - 3072\n    fac1 = x.sqr().divn(4);\n    fac2 = x.muln(96);\n    return fac1.add(fac2).subn(3072);\n  } else {\n    // return Math.floor(Math.pow(x, 2) / 16) + 480 * x - 199680\n    fac1 = x.sqr().divn(16);\n    fac2 = x.muln(480);\n    return fac1.add(fac2).subn(199680);\n  }\n}\n\nfunction getAdjustedExponentLength(data) {\n  var expBytesStart;\n\n  try {\n    var baseLen = new BN(data.slice(0, 32)).toNumber();\n    expBytesStart = 96 + baseLen; // 96 for base length, then exponent length, and modulus length, then baseLen for the base data, then exponent bytes start\n  } catch (e) {\n    expBytesStart = Number.MAX_SAFE_INTEGER - 32;\n  }\n\n  var expLen = new BN(data.slice(32, 64));\n  var firstExpBytes = Buffer.from(data.slice(expBytesStart, expBytesStart + 32)); // first word of the exponent data\n\n  firstExpBytes = ethereumjs_util_1.setLengthRight(firstExpBytes, 32); // reading past the data reads virtual zeros\n\n  var firstExpBN = new BN(firstExpBytes);\n  var max32expLen = 0;\n\n  if (expLen.ltn(32)) {\n    max32expLen = 32 - expLen.toNumber();\n  }\n\n  firstExpBN = firstExpBN.shrn(8 * Math.max(max32expLen, 0));\n  var bitLen = -1;\n\n  while (firstExpBN.gtn(0)) {\n    bitLen = bitLen + 1;\n    firstExpBN = firstExpBN.ushrn(1);\n  }\n\n  var expLenMinus32OrZero = expLen.subn(32);\n\n  if (expLenMinus32OrZero.ltn(0)) {\n    expLenMinus32OrZero = new BN(0);\n  }\n\n  var eightTimesExpLenMinus32OrZero = expLenMinus32OrZero.muln(8);\n  var adjustedExpLen = eightTimesExpLenMinus32OrZero;\n\n  if (bitLen > 0) {\n    adjustedExpLen.iaddn(bitLen);\n  }\n\n  return adjustedExpLen;\n}\n\nfunction expmod(B, E, M) {\n  if (E.isZero()) return new BN(1).mod(M); // Red asserts M > 1\n\n  if (M.lten(1)) return new BN(0);\n  var red = BN.red(M);\n  var redB = B.toRed(red);\n  var res = redB.redPow(E);\n  return res.fromRed();\n}\n\nfunction default_1(opts) {\n  assert(opts.data);\n  var data = opts.data;\n  var adjustedELen = getAdjustedExponentLength(data);\n\n  if (adjustedELen.ltn(1)) {\n    adjustedELen = new BN(1);\n  }\n\n  var bLen = new BN(data.slice(0, 32));\n  var eLen = new BN(data.slice(32, 64));\n  var mLen = new BN(data.slice(64, 96));\n  var maxLen = bLen;\n\n  if (maxLen.lt(mLen)) {\n    maxLen = mLen;\n  }\n\n  var Gquaddivisor = opts._common.param('gasPrices', 'modexpGquaddivisor');\n\n  var gasUsed = adjustedELen.mul(multComplexity(maxLen)).divn(Gquaddivisor);\n\n  if (opts.gasLimit.lt(gasUsed)) {\n    return evm_1.OOGResult(opts.gasLimit);\n  }\n\n  if (bLen.isZero()) {\n    return {\n      gasUsed: gasUsed,\n      returnValue: new BN(0).toArrayLike(Buffer, 'be', 1)\n    };\n  }\n\n  if (mLen.isZero()) {\n    return {\n      gasUsed: gasUsed,\n      returnValue: Buffer.alloc(0)\n    };\n  }\n\n  var maxInt = new BN(Number.MAX_SAFE_INTEGER);\n  var maxSize = new BN(2147483647); // ethereumjs-util setLengthRight limitation\n\n  if (bLen.gt(maxSize) || eLen.gt(maxSize) || mLen.gt(maxSize)) {\n    return evm_1.OOGResult(opts.gasLimit);\n  }\n\n  var bStart = new BN(96);\n  var bEnd = bStart.add(bLen);\n  var eStart = bEnd;\n  var eEnd = eStart.add(eLen);\n  var mStart = eEnd;\n  var mEnd = mStart.add(mLen);\n\n  if (mEnd.gt(maxInt)) {\n    return evm_1.OOGResult(opts.gasLimit);\n  }\n\n  var B = new BN(ethereumjs_util_1.setLengthRight(data.slice(bStart.toNumber(), bEnd.toNumber()), bLen.toNumber()));\n  var E = new BN(ethereumjs_util_1.setLengthRight(data.slice(eStart.toNumber(), eEnd.toNumber()), eLen.toNumber()));\n  var M = new BN(ethereumjs_util_1.setLengthRight(data.slice(mStart.toNumber(), mEnd.toNumber()), mLen.toNumber()));\n  var R;\n\n  if (M.isZero()) {\n    R = new BN(0);\n  } else {\n    R = expmod(B, E, M);\n  }\n\n  return {\n    gasUsed: gasUsed,\n    returnValue: R.toArrayLike(Buffer, 'be', mLen.toNumber())\n  };\n}\n\nexports.default = default_1;","map":{"version":3,"mappings":"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","names":["assert","require","multComplexity","x","fac1","fac2","lten","sqr","divn","muln","add","subn","getAdjustedExponentLength","data","expBytesStart","baseLen","BN","slice","toNumber","e","Number","MAX_SAFE_INTEGER","expLen","firstExpBytes","Buffer","from","ethereumjs_util_1","firstExpBN","max32expLen","ltn","shrn","Math","max","bitLen","gtn","ushrn","expLenMinus32OrZero","eightTimesExpLenMinus32OrZero","adjustedExpLen","iaddn","expmod","B","E","M","isZero","mod","red","redB","toRed","res","redPow","fromRed","opts","adjustedELen","bLen","eLen","mLen","maxLen","lt","Gquaddivisor","_common","param","gasUsed","mul","gasLimit","evm_1","returnValue","toArrayLike","alloc","maxInt","maxSize","gt","bStart","bEnd","eStart","eEnd","mStart","mEnd","R","exports"],"sources":["../../../lib/evm/precompiles/05-modexp.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}