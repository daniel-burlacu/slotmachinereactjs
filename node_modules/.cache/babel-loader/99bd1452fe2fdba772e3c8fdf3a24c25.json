{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BN = require(\"bn.js\");\n\nvar ethereumjs_account_1 = require(\"ethereumjs-account\");\n\nvar ethereumjs_blockchain_1 = require(\"ethereumjs-blockchain\");\n\nvar ethereumjs_common_1 = require(\"ethereumjs-common\");\n\nvar state_1 = require(\"./state\");\n\nvar runCode_1 = require(\"./runCode\");\n\nvar runCall_1 = require(\"./runCall\");\n\nvar runTx_1 = require(\"./runTx\");\n\nvar runBlock_1 = require(\"./runBlock\");\n\nvar opcodes_1 = require(\"./evm/opcodes\");\n\nvar runBlockchain_1 = require(\"./runBlockchain\");\n\nvar promisified_1 = require(\"./state/promisified\");\n\nvar promisify = require('util.promisify');\n\nvar AsyncEventEmitter = require('async-eventemitter');\n\nvar Trie = require('merkle-patricia-tree/secure.js');\n/**\n * Execution engine which can be used to run a blockchain, individual\n * blocks, individual transactions, or snippets of EVM bytecode.\n *\n * This class is an AsyncEventEmitter, please consult the README to learn how to use it.\n */\n\n\nvar VM =\n/** @class */\nfunction (_super) {\n  __extends(VM, _super);\n  /**\n   * Instantiates a new [[VM]] Object.\n   * @param opts - Default values for the options are:\n   *  - `chain`: 'mainnet'\n   *  - `hardfork`: 'petersburg' [supported: 'byzantium', 'constantinople', 'petersburg', 'istanbul' (DRAFT) (will throw on unsupported)]\n   *  - `activatePrecompiles`: false\n   *  - `allowUnlimitedContractSize`: false [ONLY set to `true` during debugging]\n   */\n\n\n  function VM(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.opts = opts;\n\n    if (opts.common) {\n      if (opts.chain || opts.hardfork) {\n        throw new Error('You can only instantiate the VM class with one of: opts.common, or opts.chain and opts.hardfork');\n      }\n\n      _this._common = opts.common;\n    } else {\n      var chain = opts.chain ? opts.chain : 'mainnet';\n      var hardfork = opts.hardfork ? opts.hardfork : 'petersburg';\n      var supportedHardforks = ['byzantium', 'constantinople', 'petersburg', 'istanbul', 'muirGlacier'];\n      _this._common = new ethereumjs_common_1.default(chain, hardfork, supportedHardforks);\n    } // Set list of opcodes based on HF\n\n\n    _this._opcodes = opcodes_1.getOpcodesForHF(_this._common);\n\n    if (opts.stateManager) {\n      _this.stateManager = opts.stateManager;\n    } else {\n      var trie = opts.state || new Trie();\n\n      if (opts.activatePrecompiles) {\n        for (var i = 1; i <= 8; i++) {\n          trie.put(new BN(i).toArrayLike(Buffer, 'be', 20), new ethereumjs_account_1.default().serialize());\n        }\n      }\n\n      _this.stateManager = new state_1.StateManager({\n        trie: trie,\n        common: _this._common\n      });\n    }\n\n    _this.pStateManager = new promisified_1.default(_this.stateManager);\n    _this.blockchain = opts.blockchain || new ethereumjs_blockchain_1.default({\n      common: _this._common\n    });\n    _this.allowUnlimitedContractSize = opts.allowUnlimitedContractSize === undefined ? false : opts.allowUnlimitedContractSize; // We cache this promisified function as it's called from the main execution loop, and\n    // promisifying each time has a huge performance impact.\n\n    _this._emit = promisify(_this.emit.bind(_this));\n    return _this;\n  }\n  /**\n   * Processes blocks and adds them to the blockchain.\n   *\n   * This method modifies the state.\n   *\n   * @param blockchain -  A [blockchain](https://github.com/ethereum/ethereumjs-blockchain) object to process\n   */\n\n\n  VM.prototype.runBlockchain = function (blockchain) {\n    return runBlockchain_1.default.bind(this)(blockchain);\n  };\n  /**\n   * Processes the `block` running all of the transactions it contains and updating the miner's account\n   *\n   * This method modifies the state. If `generate` is `true`, the state modifications will be\n   * reverted if an exception is raised. If it's `false`, it won't revert if the block's header is\n   * invalid. If an error is thrown from an event handler, the state may or may not be reverted.\n   *\n   * @param opts - Default values for options:\n   *  - `generate`: false\n   */\n\n\n  VM.prototype.runBlock = function (opts) {\n    return runBlock_1.default.bind(this)(opts);\n  };\n  /**\n   * Process a transaction. Run the vm. Transfers eth. Checks balances.\n   *\n   * This method modifies the state. If an error is thrown, the modifications are reverted, except\n   * when the error is thrown from an event handler. In the latter case the state may or may not be\n   * reverted.\n   */\n\n\n  VM.prototype.runTx = function (opts) {\n    return runTx_1.default.bind(this)(opts);\n  };\n  /**\n   * runs a call (or create) operation.\n   *\n   * This method modifies the state.\n   */\n\n\n  VM.prototype.runCall = function (opts) {\n    return runCall_1.default.bind(this)(opts);\n  };\n  /**\n   * Runs EVM code.\n   *\n   * This method modifies the state.\n   */\n\n\n  VM.prototype.runCode = function (opts) {\n    return runCode_1.default.bind(this)(opts);\n  };\n  /**\n   * Returns a copy of the [[VM]] instance.\n   */\n\n\n  VM.prototype.copy = function () {\n    return new VM({\n      stateManager: this.stateManager.copy(),\n      blockchain: this.blockchain,\n      common: this._common\n    });\n  };\n\n  return VM;\n}(AsyncEventEmitter);\n\nexports.default = VM;","map":{"version":3,"mappings":"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","names":["promisify","require","AsyncEventEmitter","Trie","__extends","opts","_super","_this","common","chain","hardfork","Error","_common","supportedHardforks","ethereumjs_common_1","_opcodes","opcodes_1","stateManager","trie","state","activatePrecompiles","i","put","BN","toArrayLike","Buffer","ethereumjs_account_1","serialize","state_1","pStateManager","promisified_1","blockchain","ethereumjs_blockchain_1","allowUnlimitedContractSize","undefined","_emit","emit","bind","VM","runBlockchain_1","runBlock_1","runTx_1","runCall_1","runCode_1","copy"],"sources":["../lib/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}