{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\CalculateScore.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Constants from '../Constants';\nimport bonusWin from '../assets/sounds/winningBonus.wav';\nimport Withdrawal from './Withdrawal';\nimport { ethers } from \"ethers\";\nimport PFPRacerNFT from '../artifacts/contracts/PFPRacerNFT.sol/abi.json';\n/*\r\nReceiving spinResults={props.resultsArray} \r\n          spinResultsIdx={props.resultsArrayIdx} \r\n          myBet={bet} \r\n          setCallbackScore={callbackScore} \r\n          game={props.game}\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet show = 0;\n\nconst CalculateScore = props => {\n  _s();\n\n  const [score, setScore] = useState(2);\n  /*Controling the calculation working score part !!!*********************/\n\n  if (show !== props.game) {\n    let bet = props.myBet;\n    let finalScore = 0;\n    let spinResults = props.spinResults; //    let spinResultsIdx = props.spinResultsIdx;\n    //  let bet = 0;\n\n    let winningLines = []; //  let countWin = 0;\n\n    let symbolSellection = []; //  const symbols = Constants.REEL_SYMBOLS;\n    // audioUrlBtn = require(\"../assets/sounds/buttonPress.wav\");\n\n    const audioBtn = new Audio(\"../assets/sounds/buttonPress.wav\"); // audioUrlSpin = require(\"../assets/sounds/spinningSlotMachine.wav\");\n\n    const audioSpin = new Audio(\"../assets/sounds/spinningSlotMachine.wav\");\n    const audioWinBonus = new Audio(bonusWin);\n\n    const playWinBonus = () => {\n      audioWinBonus.play();\n    };\n\n    const handleScore = e => {\n      //        setScore(Math.round((score + e) * 100) / 100);\n      console.log(\"My e in handleScore is:\" + e);\n      finalScore = Math.round((score + e) * 100) / 100;\n      console.log(\"My finalScore in handleScore is:\" + finalScore);\n    };\n\n    const setMyScore = e => {\n      let scr = 0;\n\n      if (bet > 0 && e > 0) {\n        //  scr = e + bet * e;\n        if (e < 100) {\n          scr = bet * e * 10; // (0.2*0.2)=0.04*10 = 0.4\n\n          scr = scr.toFixed(1);\n          console.log(\"My score in e<100 \" + scr);\n        } else if (e >= 100) {\n          scr = bet * e + e; //\n\n          scr = scr.toFixed(1);\n          console.log(\"My score in e>=100 \" + scr);\n        } //  scr = Math.round(scr * 100) / 100;\n        // scr=Math.round(scr);\n\n      } else if (bet > 0 && e === 0) {\n        //  scr = e + bet * e;\n        scr = bet * e * 10;\n        scr = scr.toFixed(1);\n        console.log(\"My score in (bet > 0 && e === 0 \" + scr); //  scr = Math.round(scr * 100) / 100;\n        // scr=Math.round(scr);\n      } // else if (bet === 0 && e > 0) {\n      //  scr = Math.round((scr + e) * 100) / 100;\n      // scr=Math.round(scr+e);\n      // }\n\n\n      handleScore(scr);\n    };\n\n    const drawScore = (lineNumberType, fool) => {\n      let newScore = 0;\n\n      if (fool) {\n        lineNumberType = 18;\n      }\n\n      switch (lineNumberType) {\n        case 0:\n          // top line\n          console.log(\"Case 0: top line\");\n          newScore = 0.5;\n          break;\n\n        case 1:\n          // middle line\n          //        audioWin.play();\n          console.log(\"Case 1: middle line\");\n          newScore = 0.5;\n          break;\n\n        case 2:\n          // bottom line\n          //        audioWin.play();\n          console.log(\"Case 2: bottom line\");\n          newScore = 0.5;\n          break;\n\n        case 3:\n          // V shape starting bottom left\n          //        audioWin.play();\n          console.log(\"Case 3: V shape starting bottom left\");\n          newScore = 0.2;\n          break;\n\n        case 4:\n          // V shape starting bottom right\n          //        audioWin.play();\n          console.log(\"Case 4: V shape starting bottom right\");\n          newScore = 0.2;\n          break;\n\n        case 5:\n          // W shape starting top left\n          //        audioWin.play();\n          console.log(\"Case 5: W shape starting top left\");\n          newScore = 0.3;\n          break;\n\n        case 6:\n          // M shape starting bottom left\n          //        audioWin.play();\n          console.log(\"Case 6: M shape starting bottom left\");\n          newScore = 0.3;\n          break;\n\n        case 7:\n          // M shape on top half\n          //        audioWin.play();\n          console.log(\"Case 7: M shape on top half\");\n          newScore = 0.3;\n          break;\n\n        case 8:\n          // W shape on top half\n          //        audioWin.play();\n          console.log(\"Case 8: W shape on top half\");\n          newScore = 0.3;\n          break;\n\n        case 9:\n          //W shape on bottom half\n          //        audioWin.play();\n          console.log(\"Case 8: W shape on bottom half\");\n          newScore = 0.3;\n          break;\n\n        case 10:\n          // M shape on bottom half\n          //        audioWin.play();\n          console.log(\"Case 8: M shape on bottom half\");\n          newScore = 0.3;\n          break;\n\n        case 11:\n          // U shape on top half\n          //        audioWin.play();\n          console.log(\"Case 11: U shape on top half\");\n          newScore = 0.1;\n          break;\n\n        case 12:\n          // inverse U shape on top half\n          //        audioWin.play();\n          console.log(\"Case 12: inverse U shape on top half\");\n          newScore = 0.1;\n          break;\n\n        case 13:\n          // U shape on bottom half\n          //        audioWin.play();\n          console.log(\"Case 13: U shape on bottom half\");\n          newScore = 0.1;\n          break;\n\n        case 14:\n          // inverse U shape on bottom half\n          //        audioWin.play();\n          console.log(\"Case 14: inverse U shape on bottom half\");\n          newScore = 0.1;\n          break;\n\n        case 15:\n          // inverse U shape on top half\n          //        audioWin.play();\n          console.log(\"Case 15: inverse U shape on top half\");\n          newScore = 0.1;\n          break;\n\n        case 16:\n          // Z shape from top left\n          //        audioWin.play();\n          console.log(\"Case 16: Z shape from top left\");\n          newScore = 0.2;\n          break;\n\n        case 17:\n          // Z shape from bottom left\n          //        audioWin.play();\n          console.log(\"Case 17: Z shape from bottom left\");\n          newScore = 0.2;\n          break;\n\n        case 18:\n          // JackPot\n          //        audioWinBonus.play();\n          console.log(\"Case 18: JackPot\");\n          playWinBonus();\n          newScore = 100;\n          break;\n\n        default:\n          console.log(\"Case default: zero\");\n          newScore = 0;\n      }\n\n      setMyScore(newScore);\n      return;\n    };\n\n    const checkFiveFools = () => {\n      let fl = false; //this has been changed from Constants.LINES.length;\n\n      for (let i = 0; i < Constants.LINES.length; i++) {\n        let fool = 0; //this has been changed from Constants.LINES[i].length\n\n        for (let j = 0; j < Constants.LINES[i].length; j++) {\n          let indexI = Constants.LINES[i][j][0];\n          let indexJ = Constants.LINES[i][j][1];\n\n          if (spinResults[indexI][indexJ] === \"D\") {\n            fool++;\n          }\n        }\n\n        if (fool === 5) {\n          fl = true;\n          winningLines.push(i);\n          props.winningLinesCallBack(winningLines, fl);\n          drawScore(i, true); //  highLightWinningLines(0);\n\n          break;\n        }\n      }\n\n      return fl;\n    };\n\n    const checkFourFools = () => {\n      for (let i = 0; i < Constants.LINES.length; i++) {\n        let fool = 0;\n\n        for (let j = 0; j < Constants.LINES[0].length; j++) {\n          let indexI = Constants.LINES[i][j][0];\n          let indexJ = Constants.LINES[i][j][1];\n\n          if (spinResults[indexI][indexJ] === \"D\") {\n            fool++;\n          }\n        }\n\n        if (fool === 4) {\n          winningLines.push(i);\n          drawScore(i, false);\n        }\n      }\n    };\n\n    const checkLinesElements = symbol => {\n      //        countWin++;\n      let symNr = 0;\n      let fool = 0;\n\n      for (let i = 0; i < Constants.LINES.length; i++) {\n        fool = 0;\n        symNr = 0;\n\n        for (let j = 0; j < Constants.LINES[i].length; j++) {\n          let indexI = Constants.LINES[i][j][0];\n          let indexJ = Constants.LINES[i][j][1];\n\n          if (spinResults[indexI][indexJ] === \"D\") {\n            fool++;\n          }\n\n          if (symbol === spinResults[indexI][indexJ]) {\n            symNr++;\n          }\n        }\n\n        if (fool + symNr === 5 && fool < 4) {\n          winningLines.push(i);\n        }\n      }\n\n      winningLines = uniq(winningLines);\n    };\n\n    const uniq = a => {\n      return a.sort().filter(function (item, pos, ary) {\n        return !pos || item !== ary[pos - 1];\n      });\n    };\n\n    const checkElements = () => {\n      let fool = 0;\n\n      for (let k = 0; k < 3; k++) {\n        fool = 0;\n\n        for (let i = 0; i < spinResults.length; i++) {\n          let symb = \"\";\n\n          for (let j = k; j < spinResults[i].length; j++) {\n            if (spinResults[i][j] !== \"D\") {\n              symb = spinResults[i][j];\n              j = spinResults[i].length;\n            } else {\n              fool++;\n              j = spinResults[i].length;\n            }\n          }\n\n          if (fool < 4 && symb !== \"\") {\n            symbolSellection.push(symb);\n          }\n        }\n      }\n\n      for (let i = 0; i < symbolSellection.length; i++) {\n        checkLinesElements(symbolSellection[i]);\n      }\n    };\n\n    const setBetZero = () => {\n      bet = 0;\n    };\n\n    const evaluatespinResults = () => {\n      checkFourFools();\n      checkElements();\n\n      if (winningLines.length > 0) {\n        props.winningLinesCallBack(winningLines, false);\n\n        for (let i = 0; i < winningLines.length; i++) {\n          drawScore(winningLines[i], false);\n        }\n      } else {\n        if (score - bet >= 0.2) {\n          props.looserCallBack(); //            finalScore=Math.round((score - bet) * 100) / 100;\n          //            setScore(Math.round((score - bet) * 100) / 100);\n\n          console.log(\"My finalScore in evaluateSpinResults is: \" + finalScore);\n          finalScore = Math.round((score - bet) * 100) / 100;\n\n          if (score < bet) {\n            setBetZero();\n          }\n        } else if (score - bet === 0) {\n          finalScore = score - bet;\n          setBetZero(); //            setScore(0);\n\n          finalScore = 0; //CREATE A GAME OVER SET FROM HERE    \n\n          insertToDb();\n          props.looserCallBack();\n        }\n      }\n    };\n\n    const insertToDb = async () => {\n      if (typeof window.ethereum !== \"undefined\") {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const contractAddr = \"0xDFe7ff7386e0C4321Bd1fc7d5f47887C91C7455B\";\n        const url = \"https://vast-ridge-99820.herokuapp.com\";\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const gasPrice = await provider.getGasPrice();\n        const newSigner = provider.getSigner(); //          setAccount(accounts[0]);\n\n        let contract = new ethers.Contract(contractAddr, PFPRacerNFT.abi, newSigner);\n        const dataToSend = JSON.stringify({\n          \"wallet\": accounts[0],\n          \"txtype\": \"withdrawal\",\n          \"amount\": 0\n        });\n        const link = url + \"/api/insertWallet\";\n        await fetch(link, {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: dataToSend\n        });\n      } else {\n        alert(\"Please install metamask\");\n      }\n    };\n\n    const checkWin = () => {\n      if (props.game > 0) {\n        let fool = checkFiveFools();\n\n        if (!fool) {\n          evaluatespinResults();\n        }\n      }\n    };\n    /**Testing part  */\n\n\n    setTimeout(() => {\n      //    setScore(scr);\n      checkWin();\n      setScore(finalScore);\n      props.setCallbackScore(finalScore);\n      console.log(\"My score in state is: \" + score);\n      console.log(\"My finalScore in state is: \" + finalScore);\n      show = props.game;\n    }, 7500);\n    /**END of testing part */\n\n    /******************************************/\n  }\n\n  const callbackSetMyScr = myScr => {\n    if (myScr === 0) {\n      setScore(myScr);\n      props.setCallbackScore(myScr); //   btnDisable=true;\n    } else if (myScr > 0) {\n      setScore(myScr);\n      props.setCallbackScore(myScr);\n    } //score=myScr;\n\n  };\n\n  const callBackGetScore = () => {\n    return score;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Withdrawal, {\n      blockWithdraw: props.blockWithdrawal,\n      getScoreCallback: callBackGetScore,\n      setScoreCallBack: callbackSetMyScr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Score:\", /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"score\",\n        children: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CalculateScore, \"cidTy/0QTqYWV6l0yj/74goiK7s=\");\n\n_c = CalculateScore;\nexport default CalculateScore;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalculateScore\");","map":{"version":3,"names":["React","useState","Constants","bonusWin","Withdrawal","ethers","PFPRacerNFT","show","CalculateScore","props","score","setScore","game","bet","myBet","finalScore","spinResults","winningLines","symbolSellection","audioBtn","Audio","audioSpin","audioWinBonus","playWinBonus","play","handleScore","e","console","log","Math","round","setMyScore","scr","toFixed","drawScore","lineNumberType","fool","newScore","checkFiveFools","fl","i","LINES","length","j","indexI","indexJ","push","winningLinesCallBack","checkFourFools","checkLinesElements","symbol","symNr","uniq","a","sort","filter","item","pos","ary","checkElements","k","symb","setBetZero","evaluatespinResults","looserCallBack","insertToDb","window","ethereum","accounts","request","method","contractAddr","url","provider","providers","Web3Provider","gasPrice","getGasPrice","newSigner","getSigner","contract","Contract","abi","dataToSend","JSON","stringify","link","fetch","headers","body","alert","checkWin","setTimeout","setCallbackScore","callbackSetMyScr","myScr","callBackGetScore","blockWithdrawal"],"sources":["F:/Games/slotmachinereact/src/components/CalculateScore.js"],"sourcesContent":["import React,{useState} from 'react';\r\nimport Constants from '../Constants';\r\nimport bonusWin from '../assets/sounds/winningBonus.wav'\r\nimport Withdrawal from './Withdrawal'; \r\nimport {ethers} from \"ethers\";\r\nimport PFPRacerNFT from '../artifacts/contracts/PFPRacerNFT.sol/abi.json'\r\n/*\r\nReceiving spinResults={props.resultsArray} \r\n          spinResultsIdx={props.resultsArrayIdx} \r\n          myBet={bet} \r\n          setCallbackScore={callbackScore} \r\n          game={props.game}\r\n*/\r\n\r\nlet show = 0;\r\n\r\nconst CalculateScore = (props) => {\r\n    const [score, setScore] = useState(2);\r\n /*Controling the calculation working score part !!!*********************/\r\n if(show!==props.game){\r\n\r\n    let bet =props.myBet;\r\n    let finalScore=0;\r\n    \r\n    let spinResults = props.spinResults;\r\n//    let spinResultsIdx = props.spinResultsIdx;\r\n\r\n  //  let bet = 0;\r\n    let winningLines = [];\r\n  //  let countWin = 0;\r\n    let symbolSellection = [];\r\n  //  const symbols = Constants.REEL_SYMBOLS;\r\n   \r\n\r\n  \r\n   // audioUrlBtn = require(\"../assets/sounds/buttonPress.wav\");\r\n    const audioBtn = new Audio(\"../assets/sounds/buttonPress.wav\");\r\n  \r\n   // audioUrlSpin = require(\"../assets/sounds/spinningSlotMachine.wav\");\r\n    const audioSpin = new Audio(\"../assets/sounds/spinningSlotMachine.wav\");\r\n\r\n    const audioWinBonus = new Audio(bonusWin);\r\n\r\n    const playWinBonus = () =>{\r\n          audioWinBonus.play();\r\n    }\r\n\r\n    const handleScore = (e) => {\r\n//        setScore(Math.round((score + e) * 100) / 100);\r\n        console.log(\"My e in handleScore is:\"+e)\r\n        finalScore=(Math.round((score + e) * 100) / 100);\r\n        console.log(\"My finalScore in handleScore is:\"+finalScore);\r\n      };\r\n\r\n    const setMyScore = (e) => {\r\n        let scr = 0;\r\n    \r\n        if (bet > 0 && e > 0) {\r\n\r\n        //  scr = e + bet * e;\r\n        if(e<100){\r\n          scr=(bet*e)*10; // (0.2*0.2)=0.04*10 = 0.4\r\n          scr= scr.toFixed(1);\r\n          console.log(\"My score in e<100 \"+scr);\r\n        }else if(e>=100){\r\n            scr=(bet*e)+e; //\r\n            scr=scr.toFixed(1);\r\n            console.log(\"My score in e>=100 \"+scr);\r\n        }\r\n        //  scr = Math.round(scr * 100) / 100;\r\n        // scr=Math.round(scr);\r\n        } else if (bet > 0 && e === 0) {\r\n        //  scr = e + bet * e;\r\n          scr=(bet*e)*10;\r\n          scr=scr.toFixed(1);\r\n          console.log(\"My score in (bet > 0 && e === 0 \"+scr);\r\n        //  scr = Math.round(scr * 100) / 100;\r\n        // scr=Math.round(scr);\r\n        } \r\n        // else if (bet === 0 && e > 0) {\r\n        //  scr = Math.round((scr + e) * 100) / 100;\r\n       // scr=Math.round(scr+e);\r\n        // }\r\n        handleScore(scr);\r\n      };\r\n\r\n    const drawScore = (lineNumberType, fool) => {\r\n        let newScore = 0;\r\n        if (fool) {\r\n          lineNumberType = 18;\r\n        }\r\n        switch (lineNumberType) {\r\n          case 0: // top line\r\n            console.log(\"Case 0: top line\");\r\n            newScore = 0.5;\r\n            break;\r\n          case 1: // middle line\r\n            //        audioWin.play();\r\n            console.log(\"Case 1: middle line\");\r\n            newScore = 0.5;\r\n            break;\r\n          case 2: // bottom line\r\n            //        audioWin.play();\r\n            console.log(\"Case 2: bottom line\");\r\n            newScore = 0.5;\r\n            break;\r\n          case 3: // V shape starting bottom left\r\n            //        audioWin.play();\r\n            console.log(\"Case 3: V shape starting bottom left\");\r\n            newScore = 0.2;\r\n            break;\r\n          case 4: // V shape starting bottom right\r\n            //        audioWin.play();\r\n            console.log(\"Case 4: V shape starting bottom right\");\r\n            newScore = 0.2;\r\n            break;\r\n          case 5: // W shape starting top left\r\n            //        audioWin.play();\r\n            console.log(\"Case 5: W shape starting top left\");\r\n            newScore = 0.3;\r\n            break;\r\n          case 6: // M shape starting bottom left\r\n            //        audioWin.play();\r\n            console.log(\"Case 6: M shape starting bottom left\");\r\n            newScore = 0.3;\r\n            break;\r\n          case 7: // M shape on top half\r\n            //        audioWin.play();\r\n            console.log(\"Case 7: M shape on top half\");\r\n            newScore = 0.3;\r\n            break;\r\n          case 8: // W shape on top half\r\n            //        audioWin.play();\r\n            console.log(\"Case 8: W shape on top half\");\r\n            newScore = 0.3;\r\n            break;\r\n          case 9: //W shape on bottom half\r\n            //        audioWin.play();\r\n            console.log(\"Case 8: W shape on bottom half\");\r\n            newScore = 0.3;\r\n            break;\r\n          case 10: // M shape on bottom half\r\n            //        audioWin.play();\r\n            console.log(\"Case 8: M shape on bottom half\");\r\n            newScore = 0.3;\r\n            break;\r\n          case 11: // U shape on top half\r\n            //        audioWin.play();\r\n            console.log(\"Case 11: U shape on top half\");\r\n            newScore = 0.1;\r\n            break;\r\n          case 12: // inverse U shape on top half\r\n            //        audioWin.play();\r\n            console.log(\"Case 12: inverse U shape on top half\");\r\n            newScore = 0.1;\r\n            break;\r\n          case 13: // U shape on bottom half\r\n            //        audioWin.play();\r\n            console.log(\"Case 13: U shape on bottom half\");\r\n            newScore = 0.1;\r\n            break;\r\n          case 14: // inverse U shape on bottom half\r\n            //        audioWin.play();\r\n            console.log(\"Case 14: inverse U shape on bottom half\");\r\n            newScore = 0.1;\r\n            break;\r\n          case 15: // inverse U shape on top half\r\n            //        audioWin.play();\r\n            console.log(\"Case 15: inverse U shape on top half\");\r\n            newScore = 0.1;\r\n            break;\r\n          case 16: // Z shape from top left\r\n            //        audioWin.play();\r\n            console.log(\"Case 16: Z shape from top left\");\r\n            newScore = 0.2;\r\n            break;\r\n          case 17: // Z shape from bottom left\r\n            //        audioWin.play();\r\n            console.log(\"Case 17: Z shape from bottom left\");\r\n            newScore = 0.2;\r\n            break;\r\n          case 18: // JackPot\r\n            //        audioWinBonus.play();\r\n            console.log(\"Case 18: JackPot\");\r\n            playWinBonus();\r\n            newScore = 100;\r\n            break;\r\n          default:\r\n            console.log(\"Case default: zero\");\r\n            newScore = 0;\r\n        }\r\n    \r\n        setMyScore(newScore);\r\n        \r\n        return;\r\n      };\r\n\r\n      const checkFiveFools = () => {\r\n        let fl = false;\r\n       //this has been changed from Constants.LINES.length;\r\n        for (let i = 0; i < Constants.LINES.length; i++) {\r\n          let fool = 0;\r\n          //this has been changed from Constants.LINES[i].length\r\n          for (let j = 0; j < Constants.LINES[i].length; j++) {\r\n            let indexI = Constants.LINES[i][j][0];\r\n            let indexJ = Constants.LINES[i][j][1];\r\n            if (spinResults[indexI][indexJ] === \"D\") {\r\n              fool++;\r\n            }\r\n          }\r\n     \r\n          if (fool === 5) {\r\n            fl = true;\r\n            winningLines.push(i);\r\n            props.winningLinesCallBack(winningLines, fl);\r\n            drawScore(i, true);\r\n            //  highLightWinningLines(0);\r\n            break;\r\n          }\r\n        }\r\n        return fl;\r\n      }\r\n\r\n      const checkFourFools = () => {\r\n        for (let i = 0; i < Constants.LINES.length; i++) {\r\n          let fool = 0;\r\n          for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n            let indexI = Constants.LINES[i][j][0];\r\n            let indexJ = Constants.LINES[i][j][1];\r\n       \r\n            if (spinResults[indexI][indexJ] === \"D\") {\r\n              fool++;\r\n            }\r\n          }\r\n       \r\n          if (fool === 4) {\r\n            winningLines.push(i);\r\n            drawScore(i, false);\r\n          }\r\n        }\r\n      };\r\n\r\n      const checkLinesElements = (symbol) => {\r\n//        countWin++;\r\n        let symNr = 0;\r\n        let fool = 0;\r\n        for (let i = 0; i < Constants.LINES.length; i++) {\r\n          fool = 0;\r\n          symNr = 0;\r\n          for (let j = 0; j < Constants.LINES[i].length; j++) {\r\n            let indexI = Constants.LINES[i][j][0];\r\n            let indexJ = Constants.LINES[i][j][1];\r\n    \r\n            if (spinResults[indexI][indexJ] === \"D\") {\r\n              fool++;\r\n            }\r\n            if (symbol === spinResults[indexI][indexJ]) {\r\n              symNr++;\r\n            }\r\n          }\r\n          if (fool + symNr === 5 && fool < 4) {\r\n            winningLines.push(i);\r\n          }\r\n        }\r\n        winningLines = uniq(winningLines);\r\n      };\r\n    \r\n      const uniq = (a) => {\r\n        return a.sort().filter(function (item, pos, ary) {\r\n          return !pos || item !== ary[pos - 1];\r\n        });\r\n      };\r\n\r\n      const checkElements = () => {\r\n        let fool = 0;\r\n        for (let k = 0; k < 3; k++) {\r\n          fool = 0;\r\n          for (let i = 0; i < spinResults.length; i++) {\r\n            let symb = \"\";\r\n            for (let j = k; j < spinResults[i].length; j++) {\r\n              if (spinResults[i][j] !== \"D\") {\r\n                symb = spinResults[i][j];\r\n                j = spinResults[i].length;\r\n              } else {\r\n                fool++;\r\n                j = spinResults[i].length;\r\n              }\r\n            }\r\n            if (fool < 4 && symb !== \"\") {\r\n              symbolSellection.push(symb);\r\n            }\r\n          }\r\n        }\r\n        for (let i = 0; i < symbolSellection.length; i++) {\r\n          checkLinesElements(symbolSellection[i]);\r\n        }\r\n      };\r\n    \r\n      const setBetZero = () => {\r\n        bet = 0;\r\n      };\r\n\r\n      const evaluatespinResults = () => {\r\n        checkFourFools();\r\n        checkElements();\r\n        if (winningLines.length > 0) {\r\n         props.winningLinesCallBack(winningLines, false);\r\n          for (let i = 0; i < winningLines.length; i++) {\r\n            drawScore(winningLines[i], false);\r\n          }\r\n        } else {\r\n          if (score - bet >= 0.2) {\r\n          props.looserCallBack();\r\n//            finalScore=Math.round((score - bet) * 100) / 100;\r\n//            setScore(Math.round((score - bet) * 100) / 100);\r\n            console.log(\"My finalScore in evaluateSpinResults is: \"+finalScore);\r\n            finalScore=(Math.round((score - bet) * 100) / 100);\r\n            if (score < bet) {\r\n              setBetZero();\r\n            }\r\n          } else if (score - bet === 0) {\r\n            finalScore=score-bet;\r\n            setBetZero();\r\n//            setScore(0);\r\n            finalScore=0;\r\n        //CREATE A GAME OVER SET FROM HERE    \r\n            insertToDb();\r\n            props.looserCallBack();\r\n\r\n          }\r\n        }\r\n      };\r\n\r\n      const insertToDb = async () =>{\r\n        if(typeof window.ethereum !== \"undefined\"){\r\n          const accounts = await window.ethereum.request({\r\n            method: \"eth_requestAccounts\",\r\n          });\r\n          const contractAddr = \"0xDFe7ff7386e0C4321Bd1fc7d5f47887C91C7455B\";\r\n          const url=\"https://vast-ridge-99820.herokuapp.com\";\r\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n          const gasPrice = await provider.getGasPrice();\r\n          const newSigner = provider.getSigner();\r\n//          setAccount(accounts[0]);\r\n          let contract = new ethers.Contract(\r\n                          contractAddr,\r\n                          PFPRacerNFT.abi,\r\n                          newSigner\r\n                        );\r\n\r\n                        const dataToSend = JSON.stringify({ \"wallet\": accounts[0],\r\n                                                            \"txtype\":\"withdrawal\",\r\n                                                            \"amount\":0,\r\n                                                             });\r\n                       \r\n                          const link = url+\"/api/insertWallet\";\r\n                          await fetch(link,{\r\n                          method: 'POST',\r\n                          headers: {\r\n                            'Accept': 'application/json',\r\n                            'Content-Type': 'application/json',\r\n                          },\r\n                          body: dataToSend\r\n                        })\r\n          \r\n        }else{\r\n          alert(\"Please install metamask\");\r\n        }\r\n      }\r\n\r\n      const checkWin = () => {\r\n        if (props.game > 0) {\r\n          let fool = checkFiveFools();\r\n          if (!fool) {\r\n            evaluatespinResults();\r\n          }\r\n        }\r\n    \r\n      };\r\n\r\n\r\n/**Testing part  */  \r\n  \r\nsetTimeout(()=>{\r\n    //    setScore(scr);\r\n    checkWin();\r\n    setScore(finalScore);\r\n    props.setCallbackScore(finalScore);\r\n    console.log(\"My score in state is: \"+score);\r\n    console.log(\"My finalScore in state is: \"+finalScore);\r\n    show=props.game;\r\n},7500)\r\n/**END of testing part */  \r\n\r\n/******************************************/  \r\n    }\r\n    const callbackSetMyScr = (myScr) => {\r\n      if(myScr===0){\r\n        setScore(myScr);\r\n\r\n        props.setCallbackScore(myScr);\r\n   //   btnDisable=true;\r\n    }else if(myScr>0){\r\n        setScore(myScr);\r\n        props.setCallbackScore(myScr);\r\n    }\r\n      //score=myScr;\r\n    }\r\n\r\n    const callBackGetScore = () => {\r\n      return score;\r\n    }\r\n \r\n    return (    \r\n      <> \r\n      <Withdrawal blockWithdraw={props.blockWithdrawal} getScoreCallback={callBackGetScore} setScoreCallBack={callbackSetMyScr}/>\r\n      <label>\r\n        Score:<span id=\"score\">{score}</span>\r\n      </label>\r\n    </>  \r\n    )\r\n}\r\n\r\n\r\nexport default CalculateScore;"],"mappings":"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"},"metadata":{},"sourceType":"module"}