{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // 1. (root / path to resource)\n\nconst IPFS_URI = /^ipfs:\\/\\/(.+)$/;\n\nfunction IPFSResolver() {\n  return function ipfs(uri, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const ipfsMatch = uri.match(IPFS_URI);\n\n      if (ipfsMatch) {\n        const [, resourcePath] = ipfsMatch;\n        const url = \"https://gateway.ipfs.io/ipfs/\" + resourcePath;\n        return url;\n      }\n\n      return null;\n    });\n  };\n}\n\nexports.IPFSResolver = IPFSResolver;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEA;;AACA,MAAMA,QAAQ,GAAG,iBAAjB;;AAEA,SAAgBC,YAAhB,GAA4B;EAC1B,OAAO,SAAeC,IAAf,CAAoBC,GAApB,EAAiCC,GAAjC,EAA6C;;MAClD,MAAMC,SAAS,GAAGF,GAAG,CAACG,KAAJ,CAAUN,QAAV,CAAlB;;MACA,IAAIK,SAAJ,EAAe;QACb,MAAM,GAAGE,YAAH,IAAmBF,SAAzB;QACA,MAAMG,GAAG,GAAG,kCAAkCD,YAA9C;QACA,OAAOC,GAAP;MACD;;MAED,OAAO,IAAP;IACD;EAAA,CATD;AAUD;;AAXDC","names":["IPFS_URI","IPFSResolver","ipfs","uri","ctx","ipfsMatch","match","resourcePath","url","exports"],"sources":["F:\\Games\\slotmachinereact\\node_modules\\@resolver-engine\\imports\\src\\resolvers\\ipfsresolver.ts"],"sourcesContent":["import { Context, SubResolver } from \"@resolver-engine/core\";\n\n// 1. (root / path to resource)\nconst IPFS_URI = /^ipfs:\\/\\/(.+)$/;\n\nexport function IPFSResolver(): SubResolver {\n  return async function ipfs(uri: string, ctx: Context): Promise<string | null> {\n    const ipfsMatch = uri.match(IPFS_URI);\n    if (ipfsMatch) {\n      const [, resourcePath] = ipfsMatch;\n      const url = \"https://gateway.ipfs.io/ipfs/\" + resourcePath;\n      return url;\n    }\n\n    return null;\n  };\n}\n"]},"metadata":{},"sourceType":"script"}