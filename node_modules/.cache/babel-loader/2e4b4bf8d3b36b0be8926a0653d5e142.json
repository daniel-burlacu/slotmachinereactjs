{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst hosted_git_info_1 = __importDefault(require(\"hosted-git-info\"));\n\nconst debug = debug_1.default(\"resolverengine:githubresolver\"); // hosted-git-info is a godsend, but it doesn't support specific files\n// 1st group - protocol, location, owner, repo\n// 2nd group - file inside repo\n// 3rd group - commitish\n\nconst GIT_HOSTED_INFO = /^((?:.+:\\/\\/)?[^:/]+[/:][^/]+[/][^/]+)[/](.+?)(#.+)?$/; // 1. (owner), 2. (repo), 3. (commit/file)\n\nconst BROWSER_LINK = /^https?:\\/\\/github\\.com\\/([^/]+)\\/([^/]+)\\/blob\\/((?:[^/]+[/])*[^/]+)$/; // 1. (owner), 2. (repo), 3. (file); AFAIK no support for commits\n\nconst REMIX_GITHUB_LINK = /^https?:\\/\\/github\\.com\\/([^/]+)\\/([^/]+)\\/((?:[^/]+[/])*[^/]+)$/; // TODO(ritave): Support private repositories\n\nfunction GithubResolver() {\n  return function github(what, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const fileMatchLink = what.match(BROWSER_LINK);\n\n      if (fileMatchLink) {\n        const [, owner, repo, commitAndFile] = fileMatchLink;\n        const gitRawUrl = `https://raw.githubusercontent.com/${owner}/${repo}/${commitAndFile}`;\n        debug(\"Resolved uri to:\", gitRawUrl);\n        return gitRawUrl;\n      }\n\n      const fileMatchRemix = what.match(REMIX_GITHUB_LINK);\n\n      if (fileMatchRemix) {\n        const [, owner, repo, file] = fileMatchRemix;\n        const gitRawUrl = `https://raw.githubusercontent.com/${owner}/${repo}/master/${file}`;\n        debug(\"Resolved uri to:\", gitRawUrl);\n        return gitRawUrl;\n      }\n\n      const fileMatchGitHostedInfo = what.match(GIT_HOSTED_INFO);\n\n      if (fileMatchGitHostedInfo) {\n        const [, url, file, comittish] = fileMatchGitHostedInfo;\n        const gitInfo = hosted_git_info_1.default.fromUrl(url + (comittish || \"\"));\n\n        if (!gitInfo) {\n          return null;\n        }\n\n        const fileUrl = gitInfo.file(file);\n        debug(\"Resolved uri to:\", fileUrl);\n        return fileUrl;\n      }\n\n      return null;\n    });\n  };\n}\n\nexports.GithubResolver = GithubResolver;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AAEA,MAAMA,KAAK,GAAGC,gBAAM,+BAAN,CAAd,C,CAEA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAG,uDAAxB,C,CAEA;;AACA,MAAMC,YAAY,GAAG,wEAArB,C,CAEA;;AACA,MAAMC,iBAAiB,GAAG,kEAA1B,C,CAEA;;AACA,SAAgBC,cAAhB,GAA8B;EAC5B,OAAO,SAAeC,MAAf,CAAsBC,IAAtB,EAAoCC,GAApC,EAAgD;;MACrD,MAAMC,aAAa,GAAGF,IAAI,CAACG,KAAL,CAAWP,YAAX,CAAtB;;MACA,IAAIM,aAAJ,EAAmB;QACjB,MAAM,GAAGE,KAAH,EAAUC,IAAV,EAAgBC,aAAhB,IAAiCJ,aAAvC;QACA,MAAMK,SAAS,GAAG,qCAAqCH,KAAK,IAAIC,IAAI,IAAIC,aAAa,EAArF;QACAb,KAAK,CAAC,kBAAD,EAAqBc,SAArB,CAAL;QACA,OAAOA,SAAP;MACD;;MAED,MAAMC,cAAc,GAAGR,IAAI,CAACG,KAAL,CAAWN,iBAAX,CAAvB;;MACA,IAAIW,cAAJ,EAAoB;QAClB,MAAM,GAAGJ,KAAH,EAAUC,IAAV,EAAgBI,IAAhB,IAAwBD,cAA9B;QACA,MAAMD,SAAS,GAAG,qCAAqCH,KAAK,IAAIC,IAAI,WAAWI,IAAI,EAAnF;QACAhB,KAAK,CAAC,kBAAD,EAAqBc,SAArB,CAAL;QACA,OAAOA,SAAP;MACD;;MAED,MAAMG,sBAAsB,GAAGV,IAAI,CAACG,KAAL,CAAWR,eAAX,CAA/B;;MACA,IAAIe,sBAAJ,EAA4B;QAC1B,MAAM,GAAGC,GAAH,EAAQF,IAAR,EAAcG,SAAd,IAA2BF,sBAAjC;QACA,MAAMG,OAAO,GAAGC,0BAAQC,OAAR,CAAgBJ,GAAG,IAAIC,SAAS,IAAI,EAAjB,CAAnB,CAAhB;;QACA,IAAI,CAACC,OAAL,EAAc;UACZ,OAAO,IAAP;QACD;;QACD,MAAMG,OAAO,GAAGH,OAAO,CAACJ,IAAR,CAAaA,IAAb,CAAhB;QACAhB,KAAK,CAAC,kBAAD,EAAqBuB,OAArB,CAAL;QACA,OAAOA,OAAP;MACD;;MAED,OAAO,IAAP;IACD;EAAA,CA9BD;AA+BD;;AAhCDC","names":["debug","debug_1","GIT_HOSTED_INFO","BROWSER_LINK","REMIX_GITHUB_LINK","GithubResolver","github","what","ctx","fileMatchLink","match","owner","repo","commitAndFile","gitRawUrl","fileMatchRemix","file","fileMatchGitHostedInfo","url","comittish","gitInfo","hosted_git_info_1","fromUrl","fileUrl","exports"],"sources":["F:\\Games\\slotmachinereact\\node_modules\\@resolver-engine\\imports\\src\\resolvers\\githubresolver.ts"],"sourcesContent":["import { Context, SubResolver } from \"@resolver-engine/core\";\nimport Debug from \"debug\";\nimport GitInfo from \"hosted-git-info\";\n\nconst debug = Debug(\"resolverengine:githubresolver\");\n\n// hosted-git-info is a godsend, but it doesn't support specific files\n// 1st group - protocol, location, owner, repo\n// 2nd group - file inside repo\n// 3rd group - commitish\nconst GIT_HOSTED_INFO = /^((?:.+:\\/\\/)?[^:/]+[/:][^/]+[/][^/]+)[/](.+?)(#.+)?$/;\n\n// 1. (owner), 2. (repo), 3. (commit/file)\nconst BROWSER_LINK = /^https?:\\/\\/github\\.com\\/([^/]+)\\/([^/]+)\\/blob\\/((?:[^/]+[/])*[^/]+)$/;\n\n// 1. (owner), 2. (repo), 3. (file); AFAIK no support for commits\nconst REMIX_GITHUB_LINK = /^https?:\\/\\/github\\.com\\/([^/]+)\\/([^/]+)\\/((?:[^/]+[/])*[^/]+)$/;\n\n// TODO(ritave): Support private repositories\nexport function GithubResolver(): SubResolver {\n  return async function github(what: string, ctx: Context): Promise<string | null> {\n    const fileMatchLink = what.match(BROWSER_LINK);\n    if (fileMatchLink) {\n      const [, owner, repo, commitAndFile] = fileMatchLink;\n      const gitRawUrl = `https://raw.githubusercontent.com/${owner}/${repo}/${commitAndFile}`;\n      debug(\"Resolved uri to:\", gitRawUrl);\n      return gitRawUrl;\n    }\n\n    const fileMatchRemix = what.match(REMIX_GITHUB_LINK);\n    if (fileMatchRemix) {\n      const [, owner, repo, file] = fileMatchRemix;\n      const gitRawUrl = `https://raw.githubusercontent.com/${owner}/${repo}/master/${file}`;\n      debug(\"Resolved uri to:\", gitRawUrl);\n      return gitRawUrl;\n    }\n\n    const fileMatchGitHostedInfo = what.match(GIT_HOSTED_INFO);\n    if (fileMatchGitHostedInfo) {\n      const [, url, file, comittish] = fileMatchGitHostedInfo;\n      const gitInfo = GitInfo.fromUrl(url + (comittish || \"\"));\n      if (!gitInfo) {\n        return null;\n      }\n      const fileUrl = gitInfo.file(file);\n      debug(\"Resolved uri to:\", fileUrl);\n      return fileUrl;\n    }\n\n    return null;\n  };\n}\n"]},"metadata":{},"sourceType":"script"}