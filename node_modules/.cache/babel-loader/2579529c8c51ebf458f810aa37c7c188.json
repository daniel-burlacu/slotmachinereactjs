{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\ReelSet.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Constants from \"../Constants\";\nimport Bet from \"./Bet\";\nimport Withdrawal from \"./Withdrawal\";\nimport \"../assets/css/App.css\";\nimport Reel from \"./Reel\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet score = 2;\nlet bet = 0;\n\nconst ReelSet = props => {\n  _s();\n\n  //  const [spinReel, setSpinReel] = useState(false)\n  const [gameOn, setGameOn] = useState(0);\n  const [opacity, setOpacity] = useState(1);\n  let randomNrList = []; //  let [bet, setBet] = useState(0)\n  //  const [startGame, setStartGa] = useState(2);\n  //let gameOn=0;\n\n  const [rolling, setRolling] = useState(false);\n  let scoreRef = 0; //let score = 2;\n\n  let reel = [];\n  let spinResults = [];\n  let results = []; //  let bet = 0;\n\n  let winningLines = [];\n  let countWin = 0;\n  let symbolSellection = [];\n  let randomNr = 0; //  const symbols = \"DDDGNNSSVVVCCFFRRYYIIJJZZMMOOLLTTPPBBQQAAG\";\n  //const symbols = \"DDDGNNSS\"\n\n  const symbols = Constants.REEL_SYMBOLS;\n\n  const handleScore = e => {\n    // /  const [gameScore, setGameScore] = useState({score:0, bet:0})\n    score = Math.round((score + e) * 100) / 100; //  console.log(\"mySetGameScore = \"+gameScore.score);\n    //setGameScore(score);\n    // props.dadCallback(score)\n  };\n\n  const createArray = (randomNr, index) => {\n    randomNrList.push(-(randomNr / 242));\n\n    for (let i = 0; i < 3; i++) {\n      results.push(symbols[index][-(randomNr / 242) + i]);\n    }\n  };\n\n  const getRandomNr = index => {\n    if (gameOn > 0) {\n      randomNr = -(Math.floor(Math.random() * (symbols[index].length - 3) + 3) * 242);\n      createArray(randomNr, index);\n    }\n\n    return randomNr;\n  };\n\n  const playGame = () => {\n    let reels = [];\n\n    if (gameOn === 0 && opacity === 1) {\n      reels = renderReelsNoSpin();\n    }\n\n    if (gameOn > 0 && opacity === 1) {\n      reels = renderReelsSpin();\n    }\n\n    if (gameOn > 0 && opacity < 1) {\n      reels = renderReelsSpinLightsOff();\n    }\n\n    console.log(\"My randomNrList is: \" + randomNrList);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: reels\n    }, void 0, false);\n  };\n\n  const renderReelsSpinLightsOff = () => {\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\n      console.log(\"My random nr is\" + randomNrList[idx]);\n      return /*#__PURE__*/_jsxDEV(Reel, {\n        reel: el,\n        index: idx,\n        gameOn: randomNrList[idx],\n        opacity: opacity\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 14\n      }, this);\n    });\n    return reelList;\n  };\n\n  const renderReelsNoSpin = () => {\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\n      return /*#__PURE__*/_jsxDEV(Reel, {\n        reel: el,\n        index: idx,\n        gameOn: getRandomNr(idx),\n        opacity: opacity\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 14\n      }, this);\n    });\n    randomNr = 0;\n    return reelList;\n  };\n\n  useEffect(() => {\n    if (gameOn > 0) {\n      console.log(\"On mount \" + gameOn);\n    }\n\n    return () => {\n      if (gameOn > 0) {\n        console.log(\"Change has changed !!!\");\n      }\n    };\n  }, [gameOn]);\n\n  const renderReelsSpin = () => {\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\n      return /*#__PURE__*/_jsxDEV(Reel, {\n        reel: el,\n        index: idx,\n        gameOn: getRandomNr(idx),\n        opacity: opacity\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 14\n      }, this);\n    });\n    randomNr = 0;\n    createResults();\n    return reelList;\n  };\n\n  const drawScore = (lineNumberType, fool) => {\n    let newScore = 0;\n\n    if (fool) {\n      lineNumberType = 18;\n    }\n\n    switch (lineNumberType) {\n      case 0:\n        // top line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 1:\n        // middle line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 2:\n        // bottom line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 3:\n        // V shape starting bottom left\n        //        audioWin.play();\n        newScore = 0.2;\n        break;\n\n      case 4:\n        // V shape starting bottom right\n        //        audioWin.play();\n        newScore = 0.2;\n        break;\n\n      case 5:\n        // W shape starting top left\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 6:\n        // M shape starting bottom left\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 7:\n        // M shape on top half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 8:\n        // W shape on top half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 9:\n        //W shape on bottom half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 10:\n        // M shape on bottom half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 11:\n        // U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 12:\n        // inverse U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 13:\n        // U shape on bottom half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 14:\n        // inverse U shape on bottom half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 15:\n        // inverse U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 16:\n        // Z shape from top left\n        //        audioWin.play();\n        newScore = 0.4;\n        break;\n\n      case 17:\n        // Z shape from bottom left\n        //        audioWin.play();\n        newScore = 0.4;\n        break;\n\n      case 18:\n        // Z shape from bottom left\n        //        audioWinBonus.play();\n        newScore = 100;\n        break;\n\n      default:\n        newScore = 0;\n    }\n\n    if (gameOn > 0) {\n      setMyScore(newScore);\n    }\n\n    return;\n  };\n\n  const createResults = () => {\n    let myResults = [];\n    let j = 0;\n\n    for (let i = 0; i <= results.length; i++) {\n      myResults[j] = results[i];\n      j++;\n\n      if (j === 3) {\n        spinResults.push(myResults);\n        myResults = [];\n        j = 0;\n      }\n    }\n\n    checkWin(); // score=score+scr;\n    // handleScore();\n    // setScore(scr);\n  };\n\n  const spinReel = () => {\n    if (bet === 0 && score > 0) {\n      alert(\"Please set a bet !!!\");\n    } else if (bet === 0 && score === 0) {\n      alert(\"Game Over !!! You are you are out of cash !!!\");\n    } else {\n      setGameOn(gameOn + 1); //   opacity=0.3;\n      //  checkWin();\n      //  game=1+gameOn;\n      // /  console.log(\"My spinReel game=\"+game);\n      // props.parrentCallBack(score);\n    }\n  };\n\n  const callbackBet = e => {\n    //bet=e;\n    //setBet(()=>({bet:e}));\n    bet = e;\n  };\n\n  const checkLinesElements = symbol => {\n    countWin++;\n    let symNr = 0;\n    let fool = 0;\n\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      fool = 0;\n      symNr = 0;\n\n      for (let j = 0; j < Constants.LINES[i].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n\n        if (symbol === spinResults[indexI][indexJ]) {\n          symNr++;\n        }\n      }\n\n      if (fool + symNr === 5 && fool < 4) {\n        winningLines.push(i);\n      }\n    }\n\n    winningLines = uniq(winningLines);\n  };\n\n  const uniq = a => {\n    return a.sort().filter(function (item, pos, ary) {\n      return !pos || item !== ary[pos - 1];\n    });\n  };\n\n  const checkElements = () => {\n    let fool = 0;\n\n    for (let k = 0; k < 3; k++) {\n      fool = 0;\n\n      for (let i = 0; i < spinResults.length; i++) {\n        let symb = \"\";\n\n        for (let j = k; j < spinResults[i].length; j++) {\n          if (spinResults[i][j] !== \"D\") {\n            symb = spinResults[i][j];\n            j = spinResults[i].length;\n          } else {\n            fool++;\n            j = spinResults[i].length;\n          }\n        }\n\n        if (fool < 4 && symb !== \"\") {\n          symbolSellection.push(symb);\n        }\n      }\n    }\n\n    for (let i = 0; i < symbolSellection.length; i++) {\n      checkLinesElements(symbolSellection[i]);\n    }\n  };\n\n  const setBetZero = () => {\n    bet = 0;\n  };\n\n  const setMyScore = e => {\n    let scr = 0;\n\n    if (bet > 0 && e > 0) {\n      scr = scr + (e + bet * e);\n      scr = Math.round(scr * 100) / 100;\n    } else if (bet > 0 && e === 0) {\n      scr = scr - (e + bet * e);\n      scr = Math.round(scr * 100) / 100;\n    } else if (bet === 0 && e > 0) {\n      scr = Math.round((scr + e) * 100) / 100;\n    }\n\n    handleScore(scr); //  setScore(scr);\n  };\n\n  const checkFourFools = () => {\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      let fool = 0;\n\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n      }\n\n      if (fool === 4) {\n        winningLines.push(i);\n        drawScore(i, false);\n      }\n    }\n  };\n\n  const evaluateResults = () => {\n    checkFourFools();\n    checkElements(); //highLightWinningLines(0);\n\n    if (winningLines.length > 0) {\n      for (let i = 0; i < winningLines.length; i++) {\n        drawScore(winningLines[i], false);\n      }\n    } else {\n      if (score - bet >= 0.2) {\n        score = Math.round((score - bet) * 100) / 100; //  setScore(scr);\n        //handleScore(scr);\n\n        if (score < bet) {\n          setBetZero();\n        }\n      } else if (score - bet === 0) {\n        setBetZero();\n        score = 0; //  setScore(scr);\n        //handleScore(scr);\n      }\n    } //winningLines=[];\n\n  };\n\n  const checkFiveFools = () => {\n    let fl = false;\n\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      let fool = 0;\n\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n      }\n\n      if (fool === 5) {\n        fl = true;\n        winningLines.push(i);\n        drawScore(i, true); //  highLightWinningLines(0);\n\n        break;\n      }\n    }\n\n    return fl;\n  };\n\n  const checkWin = () => {\n    if (gameOn > 0) {\n      let fool = checkFiveFools();\n\n      if (!fool) {\n        evaluateResults();\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"jackpot\",\n      children: [\"Jackpot: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reelSet\",\n          children: playGame()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: !rolling ? \"roll rolling\" : \"roll\",\n        onClick: () => {\n          spinReel();\n        },\n        disabled: rolling,\n        children: rolling ? \"Rolling...\" : \"ROLL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Withdrawal, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bet, {\n        score: score,\n        setBet: callbackBet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Score:\", /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"score\",\n          children: score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ReelSet, \"TRVPgdceWRsMhfsB2ETgXOSacmY=\");\n\n_c = ReelSet;\nexport default ReelSet;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReelSet\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Constants","Bet","Withdrawal","Reel","score","bet","ReelSet","props","gameOn","setGameOn","opacity","setOpacity","randomNrList","rolling","setRolling","scoreRef","reel","spinResults","results","winningLines","countWin","symbolSellection","randomNr","symbols","REEL_SYMBOLS","handleScore","e","Math","round","createArray","index","push","i","getRandomNr","floor","random","length","playGame","reels","renderReelsNoSpin","renderReelsSpin","renderReelsSpinLightsOff","console","log","reelList","Array","apply","REELS","map","el","idx","createResults","drawScore","lineNumberType","fool","newScore","setMyScore","myResults","j","checkWin","spinReel","alert","callbackBet","checkLinesElements","symbol","symNr","LINES","indexI","indexJ","uniq","a","sort","filter","item","pos","ary","checkElements","k","symb","setBetZero","scr","checkFourFools","evaluateResults","checkFiveFools","fl"],"sources":["F:/Games/slotmachinereact/src/components/ReelSet.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport Constants from \"../Constants\";\r\nimport Bet from \"./Bet\";\r\nimport Withdrawal from \"./Withdrawal\";\r\nimport \"../assets/css/App.css\";\r\nimport Reel from \"./Reel\";\r\n\r\nlet score = 2;\r\nlet bet = 0;\r\n\r\nconst ReelSet = (props) => {\r\n  //  const [spinReel, setSpinReel] = useState(false)\r\n  const [gameOn, setGameOn] = useState(0);\r\n  const [opacity, setOpacity] = useState(1);\r\n\r\n  let randomNrList=[];\r\n  //  let [bet, setBet] = useState(0)\r\n  //  const [startGame, setStartGa] = useState(2);\r\n  //let gameOn=0;\r\n  const [rolling, setRolling] = useState(false);\r\n\r\n  let scoreRef = 0;\r\n  //let score = 2;\r\n  let reel=[];\r\n  let spinResults = [];\r\n  let results = [];\r\n\r\n  //  let bet = 0;\r\n\r\n  let winningLines = [];\r\n  let countWin = 0;\r\n  let symbolSellection = [];\r\n  let randomNr = 0;\r\n  //  const symbols = \"DDDGNNSSVVVCCFFRRYYIIJJZZMMOOLLTTPPBBQQAAG\";\r\n  //const symbols = \"DDDGNNSS\"\r\n  const symbols = Constants.REEL_SYMBOLS;\r\n\r\n  const handleScore = (e) => {\r\n    // /  const [gameScore, setGameScore] = useState({score:0, bet:0})\r\n    score = Math.round((score + e) * 100) / 100;\r\n\r\n    //  console.log(\"mySetGameScore = \"+gameScore.score);\r\n\r\n    //setGameScore(score);\r\n    // props.dadCallback(score)\r\n  };\r\n  const createArray = (randomNr, index) => {\r\n    randomNrList.push(-(randomNr/242));\r\n    for (let i = 0; i < 3; i++) {\r\n      results.push(symbols[index][-(randomNr / 242) + i]);\r\n    }\r\n  };\r\n\r\n  const getRandomNr = (index) => {\r\n    if (gameOn > 0) {\r\n      randomNr = -(\r\n        Math.floor(Math.random() * (symbols[index].length - 3) + 3) * 242\r\n      );\r\n      createArray(randomNr, index);\r\n    }\r\n    return randomNr;\r\n  };\r\n\r\n  const playGame = () =>{\r\n    let reels = [];\r\n    if(gameOn===0 && opacity===1){\r\n      reels=renderReelsNoSpin();\r\n    }\r\n    if(gameOn>0 && opacity === 1){\r\n      reels=renderReelsSpin();\r\n    }if( gameOn>0 && opacity < 1){\r\n      reels=renderReelsSpinLightsOff();\r\n    }\r\n    console.log(\"My randomNrList is: \"+randomNrList);\r\n\r\n    return <>{reels}</>\r\n  }\r\n\r\n  const renderReelsSpinLightsOff = () => {\r\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\r\n      console.log(\"My random nr is\"+randomNrList[idx])\r\n      return <Reel reel={el} key={idx} index={idx} gameOn={randomNrList[idx]} opacity={opacity} />;\r\n    });\r\n    return reelList;\r\n  }\r\n\r\n  const renderReelsNoSpin = () => {\r\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\r\n      return <Reel reel={el} key={idx} index={idx} gameOn={getRandomNr(idx)} opacity={opacity} />;\r\n    });\r\n    randomNr = 0;\r\n\r\n    return reelList;\r\n  }\r\n  useEffect(()=>{\r\n    if(gameOn>0){\r\n     console.log(\"On mount \"+ gameOn);\r\n    }\r\n\r\n    return () => {\r\n      if(gameOn>0){\r\n        console.log(\"Change has changed !!!\");\r\n      }\r\n    }\r\n\r\n  },[gameOn])\r\n\r\n  const renderReelsSpin = () => {\r\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\r\n      return <Reel reel={el} key={idx} index={idx} gameOn={getRandomNr(idx)} opacity={opacity} />;\r\n    });\r\n    randomNr = 0;\r\n    \r\n    createResults();\r\n    return reelList;\r\n  }\r\n\r\n  const drawScore = (lineNumberType, fool) => {\r\n    let newScore = 0;\r\n    if (fool) {\r\n      lineNumberType = 18;\r\n    }\r\n    switch (lineNumberType) {\r\n      case 0: // top line\r\n        //        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 1: // middle line\r\n        //        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 2: // bottom line\r\n        //        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 3: // V shape starting bottom left\r\n        //        audioWin.play();\r\n        newScore = 0.2;\r\n        break;\r\n      case 4: // V shape starting bottom right\r\n        //        audioWin.play();\r\n        newScore = 0.2;\r\n        break;\r\n      case 5: // W shape starting top left\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 6: // M shape starting bottom left\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 7: // M shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 8: // W shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 9: //W shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 10: // M shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 11: // U shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 12: // inverse U shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 13: // U shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 14: // inverse U shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 15: // inverse U shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 16: // Z shape from top left\r\n        //        audioWin.play();\r\n        newScore = 0.4;\r\n        break;\r\n      case 17: // Z shape from bottom left\r\n        //        audioWin.play();\r\n        newScore = 0.4;\r\n        break;\r\n      case 18: // Z shape from bottom left\r\n        //        audioWinBonus.play();\r\n        newScore = 100;\r\n        break;\r\n      default:\r\n        newScore = 0;\r\n    }\r\n\r\n    if (gameOn > 0) {\r\n      setMyScore(newScore);\r\n    }\r\n    return;\r\n  };\r\n\r\n  const createResults = () => {\r\n    let myResults = [];\r\n    let j = 0;\r\n\r\n    for (let i = 0; i <= results.length; i++) {\r\n      myResults[j] = results[i];\r\n      j++;\r\n\r\n      if (j === 3) {\r\n        spinResults.push(myResults);\r\n        myResults = [];\r\n        j = 0;\r\n      }\r\n    }\r\n\r\n    checkWin();\r\n    // score=score+scr;\r\n    // handleScore();\r\n    // setScore(scr);\r\n  };\r\n\r\n  const spinReel = () => {\r\n    if (bet === 0 && score > 0) {\r\n      alert(\"Please set a bet !!!\");\r\n    } else if (bet === 0 && score === 0) {\r\n      alert(\"Game Over !!! You are you are out of cash !!!\");\r\n    } else {\r\n      setGameOn(gameOn + 1);\r\n      \r\n    //   opacity=0.3;\r\n      //  checkWin();\r\n      //  game=1+gameOn;\r\n      // /  console.log(\"My spinReel game=\"+game);\r\n\r\n      // props.parrentCallBack(score);\r\n    }\r\n  };\r\n\r\n  const callbackBet = (e) => {\r\n    //bet=e;\r\n    //setBet(()=>({bet:e}));\r\n\r\n    bet = e;\r\n  };\r\n\r\n  const checkLinesElements = (symbol) => {\r\n    countWin++;\r\n    let symNr = 0;\r\n    let fool = 0;\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      fool = 0;\r\n      symNr = 0;\r\n      for (let j = 0; j < Constants.LINES[i].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n\r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n          fool++;\r\n        }\r\n        if (symbol === spinResults[indexI][indexJ]) {\r\n          symNr++;\r\n        }\r\n      }\r\n      if (fool + symNr === 5 && fool < 4) {\r\n        winningLines.push(i);\r\n      }\r\n    }\r\n    winningLines = uniq(winningLines);\r\n  };\r\n\r\n  const uniq = (a) => {\r\n    return a.sort().filter(function (item, pos, ary) {\r\n      return !pos || item !== ary[pos - 1];\r\n    });\r\n  };\r\n\r\n  const checkElements = () => {\r\n    let fool = 0;\r\n    for (let k = 0; k < 3; k++) {\r\n      fool = 0;\r\n      for (let i = 0; i < spinResults.length; i++) {\r\n        let symb = \"\";\r\n        for (let j = k; j < spinResults[i].length; j++) {\r\n          if (spinResults[i][j] !== \"D\") {\r\n            symb = spinResults[i][j];\r\n            j = spinResults[i].length;\r\n          } else {\r\n            fool++;\r\n            j = spinResults[i].length;\r\n          }\r\n        }\r\n        if (fool < 4 && symb !== \"\") {\r\n          symbolSellection.push(symb);\r\n        }\r\n      }\r\n    }\r\n    for (let i = 0; i < symbolSellection.length; i++) {\r\n      checkLinesElements(symbolSellection[i]);\r\n    }\r\n  };\r\n\r\n  const setBetZero = () => {\r\n    bet = 0;\r\n  };\r\n\r\n  const setMyScore = (e) => {\r\n    let scr = 0;\r\n\r\n    if (bet > 0 && e > 0) {\r\n      scr = scr + (e + bet * e);\r\n      scr = Math.round(scr * 100) / 100;\r\n    } else if (bet > 0 && e === 0) {\r\n      scr = scr - (e + bet * e);\r\n     \r\n      scr = Math.round(scr * 100) / 100;\r\n    } else if (bet === 0 && e > 0) {\r\n    \r\n      scr = Math.round((scr + e) * 100) / 100;\r\n    }\r\n   \r\n    handleScore(scr);\r\n    //  setScore(scr);\r\n  };\r\n\r\n  const checkFourFools = () => {\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      let fool = 0;\r\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n   \r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n          fool++;\r\n        }\r\n      }\r\n   \r\n      if (fool === 4) {\r\n        winningLines.push(i);\r\n        drawScore(i, false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const evaluateResults = () => {\r\n    checkFourFools();\r\n    checkElements();\r\n    //highLightWinningLines(0);\r\n    if (winningLines.length > 0) {\r\n      for (let i = 0; i < winningLines.length; i++) {\r\n        drawScore(winningLines[i], false);\r\n      }\r\n    } else {\r\n\r\n      if (score - bet >= 0.2) {\r\n        score = Math.round((score - bet) * 100) / 100;\r\n        //  setScore(scr);\r\n        //handleScore(scr);\r\n\r\n        if (score < bet) {\r\n          setBetZero();\r\n        }\r\n      } else if (score - bet === 0) {\r\n        setBetZero();\r\n        score = 0;\r\n        //  setScore(scr);\r\n        //handleScore(scr);\r\n      }\r\n    }\r\n    //winningLines=[];\r\n  };\r\n  const checkFiveFools = () => {\r\n    let fl = false;\r\n\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      let fool = 0;\r\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n\r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n          fool++;\r\n        }\r\n      }\r\n \r\n      if (fool === 5) {\r\n        fl = true;\r\n        winningLines.push(i);\r\n        drawScore(i, true);\r\n        //  highLightWinningLines(0);\r\n        break;\r\n      }\r\n    }\r\n\r\n    return fl;\r\n  };\r\n\r\n  const checkWin = () => {\r\n\r\n    if (gameOn > 0) {\r\n      let fool = checkFiveFools();\r\n      if (!fool) {\r\n        evaluateResults();\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div id=\"jackpot\">\r\n        Jackpot: <span>100</span>\r\n      </div>\r\n      <div className=\"container\">\r\n        <div className=\"playContainer\">\r\n          <div className=\"reelSet\">\r\n            {playGame()}\r\n            </div>\r\n        </div>\r\n      </div>\r\n      <div id=\"controls\">\r\n        <div\r\n          className={!rolling ? \"roll rolling\" : \"roll\"}\r\n          onClick={() => {\r\n            spinReel();\r\n          }}\r\n          disabled={rolling}\r\n        >\r\n          {rolling ? \"Rolling...\" : \"ROLL\"}\r\n        </div>\r\n        <Withdrawal />\r\n        <Bet score={score} setBet={callbackBet} />\r\n        <label>\r\n          Score:<span id=\"score\">{score}</span>\r\n        </label>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReelSet;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}