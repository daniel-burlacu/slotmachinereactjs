{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst glob = require(\"glob\");\n\nconst deps_1 = require(\"./deps\");\n\nconst util_1 = require(\"util\");\n\nconst path_1 = require(\"path\");\n\nconst outputTransformers_1 = require(\"./outputTransformers\");\n\nconst stats = {\n  filesGenerated: 0\n};\n\nasync function tsGenerator(cfg, plugins_, deps_) {\n  const deps = deps_ || deps_1.createDeps();\n  const plugins = util_1.isArray(plugins_) ? plugins_ : [plugins_];\n  const {\n    cwd\n  } = cfg;\n  const {\n    fs,\n    logger\n  } = deps;\n  logger.lvl = cfg.loggingLvl || \"error\";\n\n  for (const plugin of plugins) {\n    logger.info(`Running ${plugin.name}`);\n    logger.verbose(\"Running before hook for\", logger.accent(plugin.name));\n    processOutput(deps, cfg, await plugin.beforeRun());\n    const filePaths = glob.sync(plugin.ctx.rawConfig.files, {\n      ignore: \"node_modules/**\",\n      absolute: true,\n      cwd\n    });\n    logger.info(`${plugin.ctx.rawConfig.files} matched ${filePaths.length} files.`);\n    const fileDescs = filePaths.map(path => ({\n      path,\n      contents: fs.readFileSync(path, \"utf8\")\n    }));\n\n    for (const fd of fileDescs) {\n      logger.info(`Processing ${logger.accent(path_1.relative(cwd, fd.path))}`);\n      processOutput(deps, cfg, await plugin.transformFile(fd));\n    }\n\n    logger.verbose(\"Running after hook for\", logger.accent(plugin.name));\n    processOutput(deps, cfg, await plugin.afterRun());\n  }\n\n  logger.info(`ðŸ’Ž All done! Generated files: ${stats.filesGenerated}`);\n}\n\nexports.tsGenerator = tsGenerator;\n\nfunction processOutput(deps, cfg, output) {\n  const {\n    fs,\n    logger,\n    mkdirp\n  } = deps;\n\n  if (!output) {\n    return;\n  }\n\n  const outputFds = util_1.isArray(output) ? output : [output];\n  outputFds.forEach(fd => {\n    // ensure directory first\n    mkdirp(path_1.dirname(fd.path));\n    const finalOutput = outputTransformers_1.outputTransformers.reduce((content, transformer) => transformer(content, deps, cfg), fd.contents);\n    logger.info(`Writing file: ${logger.accent(path_1.relative(cfg.cwd, fd.path))}`);\n    stats.filesGenerated++;\n    fs.writeFileSync(fd.path, finalOutput, \"utf8\");\n  });\n}\n\nexports.processOutput = processOutput;","map":{"version":3,"names":["Object","defineProperty","exports","value","glob","require","deps_1","util_1","path_1","outputTransformers_1","stats","filesGenerated","tsGenerator","cfg","plugins_","deps_","deps","createDeps","plugins","isArray","cwd","fs","logger","lvl","loggingLvl","plugin","info","name","verbose","accent","processOutput","beforeRun","filePaths","sync","ctx","rawConfig","files","ignore","absolute","length","fileDescs","map","path","contents","readFileSync","fd","relative","transformFile","afterRun","output","mkdirp","outputFds","forEach","dirname","finalOutput","outputTransformers","reduce","content","transformer","writeFileSync"],"sources":["F:/Games/slotmachinereact/node_modules/ts-generator/dist/tsGenerator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst glob = require(\"glob\");\nconst deps_1 = require(\"./deps\");\nconst util_1 = require(\"util\");\nconst path_1 = require(\"path\");\nconst outputTransformers_1 = require(\"./outputTransformers\");\nconst stats = {\n    filesGenerated: 0,\n};\nasync function tsGenerator(cfg, plugins_, deps_) {\n    const deps = deps_ || deps_1.createDeps();\n    const plugins = util_1.isArray(plugins_) ? plugins_ : [plugins_];\n    const { cwd } = cfg;\n    const { fs, logger } = deps;\n    logger.lvl = cfg.loggingLvl || \"error\";\n    for (const plugin of plugins) {\n        logger.info(`Running ${plugin.name}`);\n        logger.verbose(\"Running before hook for\", logger.accent(plugin.name));\n        processOutput(deps, cfg, await plugin.beforeRun());\n        const filePaths = glob.sync(plugin.ctx.rawConfig.files, { ignore: \"node_modules/**\", absolute: true, cwd });\n        logger.info(`${plugin.ctx.rawConfig.files} matched ${filePaths.length} files.`);\n        const fileDescs = filePaths.map((path) => ({\n            path,\n            contents: fs.readFileSync(path, \"utf8\"),\n        }));\n        for (const fd of fileDescs) {\n            logger.info(`Processing ${logger.accent(path_1.relative(cwd, fd.path))}`);\n            processOutput(deps, cfg, await plugin.transformFile(fd));\n        }\n        logger.verbose(\"Running after hook for\", logger.accent(plugin.name));\n        processOutput(deps, cfg, await plugin.afterRun());\n    }\n    logger.info(`ðŸ’Ž All done! Generated files: ${stats.filesGenerated}`);\n}\nexports.tsGenerator = tsGenerator;\nfunction processOutput(deps, cfg, output) {\n    const { fs, logger, mkdirp } = deps;\n    if (!output) {\n        return;\n    }\n    const outputFds = util_1.isArray(output) ? output : [output];\n    outputFds.forEach((fd) => {\n        // ensure directory first\n        mkdirp(path_1.dirname(fd.path));\n        const finalOutput = outputTransformers_1.outputTransformers.reduce((content, transformer) => transformer(content, deps, cfg), fd.contents);\n        logger.info(`Writing file: ${logger.accent(path_1.relative(cfg.cwd, fd.path))}`);\n        stats.filesGenerated++;\n        fs.writeFileSync(fd.path, finalOutput, \"utf8\");\n    });\n}\nexports.processOutput = processOutput;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}