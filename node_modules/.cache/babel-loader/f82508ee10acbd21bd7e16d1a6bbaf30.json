{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst core_1 = require(\"@resolver-engine/core\");\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"resolverengine:importparser\");\n\nfunction ImportParser(sourceParsers) {\n  return (url, ctx) => __awaiter(this, void 0, void 0, function* () {\n    const source = yield core_1.firstResult(sourceParsers, parser => parser(url, ctx));\n\n    if (!source) {\n      debug(`Can't find source for ${url}`);\n      return null;\n    }\n\n    const provider = ctx.resolver;\n    return {\n      url,\n      source: source.result,\n      provider\n    };\n  });\n}\n\nexports.ImportParser = ImportParser;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA,MAAMA,KAAK,GAAGC,gBAAM,6BAAN,CAAd;;AAQA,SAAgBC,YAAhB,CAA6BC,aAA7B,EAAoE;EAClE,OAAO,CAAOC,GAAP,EAAoBC,GAApB,KAAgEC;IACrE,MAAMC,MAAM,GAAG,MAAMC,mBAAYL,aAAZ,EAA2BM,MAAM,IAAIA,MAAM,CAACL,GAAD,EAAMC,GAAN,CAA3C,CAArB;;IACA,IAAI,CAACE,MAAL,EAAa;MACXP,KAAK,CAAC,yBAAyBI,GAAG,EAA7B,CAAL;MACA,OAAO,IAAP;IACD;;IACD,MAAMM,QAAQ,GAAGL,GAAG,CAACM,QAArB;IACA,OAAO;MACLP,GADK;MAELG,MAAM,EAAEA,MAAM,CAACK,MAFV;MAGLF;IAHK,CAAP;EAKD,CAZsE,CAAvE;AAaD;;AAdDG","names":["debug","debug_1","ImportParser","sourceParsers","url","ctx","__awaiter","source","core_1","parser","provider","resolver","result","exports"],"sources":["F:\\Games\\slotmachinereact\\node_modules\\@resolver-engine\\imports\\src\\parsers\\importparser.ts"],"sourcesContent":["import { Context, firstResult, SubParser } from \"@resolver-engine/core\";\nimport Debug from \"debug\";\n\nconst debug = Debug(\"resolverengine:importparser\");\n\nexport interface ImportFile {\n  url: string;\n  source: string;\n  provider: string;\n}\n\nexport function ImportParser(sourceParsers: Array<SubParser<string>>): SubParser<ImportFile> {\n  return async (url: string, ctx: Context): Promise<ImportFile | null> => {\n    const source = await firstResult(sourceParsers, parser => parser(url, ctx));\n    if (!source) {\n      debug(`Can't find source for ${url}`);\n      return null;\n    }\n    const provider = ctx.resolver;\n    return {\n      url,\n      source: source.result,\n      provider,\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"script"}