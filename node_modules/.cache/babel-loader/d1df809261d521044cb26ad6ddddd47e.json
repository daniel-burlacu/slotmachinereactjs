{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, concat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nexport function checkResultErrors(result) {\n  // Find the first error (if any)\n  const errors = [];\n\n  const checkErrors = function (path, object) {\n    if (!Array.isArray(object)) {\n      return;\n    }\n\n    for (let key in object) {\n      const childPath = path.slice();\n      childPath.push(key);\n\n      try {\n        checkErrors(childPath, object[key]);\n      } catch (error) {\n        errors.push({\n          path: childPath,\n          error: error\n        });\n      }\n    }\n  };\n\n  checkErrors([], result);\n  return errors;\n}\nexport class Coder {\n  constructor(name, type, localName, dynamic) {\n    // @TODO: defineReadOnly these\n    this.name = name;\n    this.type = type;\n    this.localName = localName;\n    this.dynamic = dynamic;\n  }\n\n  _throwError(message, value) {\n    logger.throwArgumentError(message, this.localName, value);\n  }\n\n}\nexport class Writer {\n  constructor(wordSize) {\n    defineReadOnly(this, \"wordSize\", wordSize || 32);\n    this._data = arrayify([]);\n    this._padding = new Uint8Array(wordSize);\n  }\n\n  get data() {\n    return hexlify(this._data);\n  }\n\n  get length() {\n    return this._data.length;\n  }\n\n  _writeData(data) {\n    this._data = concat([this._data, data]);\n    return data.length;\n  } // Arrayish items; padded on the right to wordSize\n\n\n  writeBytes(value) {\n    let bytes = arrayify(value);\n\n    if (bytes.length % this.wordSize) {\n      bytes = concat([bytes, this._padding.slice(bytes.length % this.wordSize)]);\n    }\n\n    return this._writeData(bytes);\n  }\n\n  _getValue(value) {\n    let bytes = arrayify(BigNumber.from(value));\n\n    if (bytes.length > this.wordSize) {\n      logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n        length: this.wordSize,\n        offset: bytes.length\n      });\n    }\n\n    if (bytes.length % this.wordSize) {\n      bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n    }\n\n    return bytes;\n  } // BigNumberish items; padded on the left to wordSize\n\n\n  writeValue(value) {\n    return this._writeData(this._getValue(value));\n  }\n\n  writeUpdatableValue() {\n    let offset = this.length;\n    this.writeValue(0);\n    return value => {\n      this._data.set(this._getValue(value), offset);\n    };\n  }\n\n}\nexport class Reader {\n  constructor(data, wordSize, coerceFunc) {\n    defineReadOnly(this, \"_data\", arrayify(data));\n    defineReadOnly(this, \"wordSize\", wordSize || 32);\n    defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n    this._offset = 0;\n  }\n\n  get data() {\n    return hexlify(this._data);\n  }\n\n  get consumed() {\n    return this._offset;\n  } // The default Coerce function\n\n\n  static coerce(name, value) {\n    let match = name.match(\"^u?int([0-9]+)$\");\n\n    if (match && parseInt(match[1]) <= 48) {\n      value = value.toNumber();\n    }\n\n    return value;\n  }\n\n  coerce(name, value) {\n    if (this._coerceFunc) {\n      return this._coerceFunc(name, value);\n    }\n\n    return Reader.coerce(name, value);\n  }\n\n  _peekBytes(offset, length) {\n    let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n\n    if (this._offset + alignedLength > this._data.length) {\n      logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n        length: this._data.length,\n        offset: this._offset + alignedLength\n      });\n    }\n\n    return this._data.slice(this._offset, this._offset + alignedLength);\n  }\n\n  subReader(offset) {\n    return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc);\n  }\n\n  readBytes(length) {\n    let bytes = this._peekBytes(0, length);\n\n    this._offset += bytes.length; // @TODO: Make sure the length..end bytes are all 0?\n\n    return bytes.slice(0, length);\n  }\n\n  readValue() {\n    return BigNumber.from(this.readBytes(this.wordSize));\n  }\n\n}","map":{"version":3,"names":["arrayify","concat","hexlify","BigNumber","defineReadOnly","Logger","version","logger","checkResultErrors","result","errors","checkErrors","path","object","Array","isArray","key","childPath","slice","push","error","Coder","constructor","name","type","localName","dynamic","_throwError","message","value","throwArgumentError","Writer","wordSize","_data","_padding","Uint8Array","data","length","_writeData","writeBytes","bytes","_getValue","from","throwError","BUFFER_OVERRUN","offset","writeValue","writeUpdatableValue","set","Reader","coerceFunc","_offset","consumed","coerce","match","parseInt","toNumber","_coerceFunc","_peekBytes","alignedLength","Math","ceil","subReader","readBytes","readValue"],"sources":["F:/Games/slotmachinereact/node_modules/ganache-core/node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"],"sourcesContent":["\"use strict\";\nimport { arrayify, concat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nexport function checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function (path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            }\n            catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nexport class Coder {\n    constructor(name, type, localName, dynamic) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n    _throwError(message, value) {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n}\nexport class Writer {\n    constructor(wordSize) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = arrayify([]);\n        this._padding = new Uint8Array(wordSize);\n    }\n    get data() { return hexlify(this._data); }\n    get length() { return this._data.length; }\n    _writeData(data) {\n        this._data = concat([this._data, data]);\n        return data.length;\n    }\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value) {\n        let bytes = arrayify(value);\n        if (bytes.length % this.wordSize) {\n            bytes = concat([bytes, this._padding.slice(bytes.length % this.wordSize)]);\n        }\n        return this._writeData(bytes);\n    }\n    _getValue(value) {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n        }\n        return bytes;\n    }\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value) {\n        return this._writeData(this._getValue(value));\n    }\n    writeUpdatableValue() {\n        let offset = this.length;\n        this.writeValue(0);\n        return (value) => {\n            this._data.set(this._getValue(value), offset);\n        };\n    }\n}\nexport class Reader {\n    constructor(data, wordSize, coerceFunc) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        this._offset = 0;\n    }\n    get data() { return hexlify(this._data); }\n    get consumed() { return this._offset; }\n    // The default Coerce function\n    static coerce(name, value) {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) {\n            value = value.toNumber();\n        }\n        return value;\n    }\n    coerce(name, value) {\n        if (this._coerceFunc) {\n            return this._coerceFunc(name, value);\n        }\n        return Reader.coerce(name, value);\n    }\n    _peekBytes(offset, length) {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this._data.length,\n                offset: this._offset + alignedLength\n            });\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength);\n    }\n    subReader(offset) {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc);\n    }\n    readBytes(length) {\n        let bytes = this._peekBytes(0, length);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    readValue() {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}