{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Address = void 0;\n\nvar assert = require('assert');\n\nvar BN = require(\"bn.js\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar account_1 = require(\"./account\");\n\nvar Address =\n/** @class */\nfunction () {\n  function Address(buf) {\n    assert(buf.length === 20, 'Invalid address length');\n    this.buf = buf;\n  }\n  /**\n   * Returns the zero address.\n   */\n\n\n  Address.zero = function () {\n    return new Address(bytes_1.zeros(20));\n  };\n  /**\n   * Returns an Address object from a hex-encoded string.\n   * @param str - Hex-encoded address\n   */\n\n\n  Address.fromString = function (str) {\n    assert(account_1.isValidAddress(str), 'Invalid address');\n    return new Address(bytes_1.toBuffer(str));\n  };\n  /**\n   * Returns an address for a given public key.\n   * @param pubKey The two points of an uncompressed key\n   */\n\n\n  Address.fromPublicKey = function (pubKey) {\n    assert(Buffer.isBuffer(pubKey), 'Public key should be Buffer');\n    var buf = account_1.pubToAddress(pubKey);\n    return new Address(buf);\n  };\n  /**\n   * Returns an address for a given private key.\n   * @param privateKey A private key must be 256 bits wide\n   */\n\n\n  Address.fromPrivateKey = function (privateKey) {\n    assert(Buffer.isBuffer(privateKey), 'Private key should be Buffer');\n    var buf = account_1.privateToAddress(privateKey);\n    return new Address(buf);\n  };\n  /**\n   * Generates an address for a newly created contract.\n   * @param from The address which is creating this new address\n   * @param nonce The nonce of the from account\n   */\n\n\n  Address.generate = function (from, nonce) {\n    assert(BN.isBN(nonce));\n    return new Address(account_1.generateAddress(from.buf, nonce.toArrayLike(Buffer)));\n  };\n  /**\n   * Generates an address for a contract created using CREATE2.\n   * @param from The address which is creating this new address\n   * @param salt A salt\n   * @param initCode The init code of the contract being created\n   */\n\n\n  Address.generate2 = function (from, salt, initCode) {\n    assert(Buffer.isBuffer(salt));\n    assert(Buffer.isBuffer(initCode));\n    return new Address(account_1.generateAddress2(from.buf, salt, initCode));\n  };\n  /**\n   * Is address zero.\n   */\n\n\n  Address.prototype.isZero = function () {\n    return this.buf.equals(Address.zero().buf);\n  };\n  /**\n   * Returns hex encoding of address.\n   */\n\n\n  Address.prototype.toString = function () {\n    return '0x' + this.buf.toString('hex');\n  };\n  /**\n   * Returns Buffer representation of address.\n   */\n\n\n  Address.prototype.toBuffer = function () {\n    return Buffer.from(this.buf);\n  };\n\n  return Address;\n}();\n\nexports.Address = Address;","map":{"version":3,"mappings":";;;;;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA;;AACA;;AACA;;AAQA;AAAA;AAAA;EAGE,iBAAYC,GAAZ,EAAuB;IACrBF,MAAM,CAACE,GAAG,CAACC,MAAJ,KAAe,EAAhB,EAAoB,wBAApB,CAAN;IACA,KAAKD,GAAL,GAAWA,GAAX;EACD;EAED;;;;;EAGOE,eAAP;IACE,OAAO,IAAIA,OAAJ,CAAYC,cAAM,EAAN,CAAZ,CAAP;EACD,CAFM;EAIP;;;;;;EAIOD,qBAAP,UAAkBE,GAAlB,EAA6B;IAC3BN,MAAM,CAACO,yBAAeD,GAAf,CAAD,EAAsB,iBAAtB,CAAN;IACA,OAAO,IAAIF,OAAJ,CAAYC,iBAASC,GAAT,CAAZ,CAAP;EACD,CAHM;EAKP;;;;;;EAIOF,wBAAP,UAAqBI,MAArB,EAAmC;IACjCR,MAAM,CAACS,MAAM,CAACC,QAAP,CAAgBF,MAAhB,CAAD,EAA0B,6BAA1B,CAAN;IACA,IAAMN,GAAG,GAAGK,uBAAaC,MAAb,CAAZ;IACA,OAAO,IAAIJ,OAAJ,CAAYF,GAAZ,CAAP;EACD,CAJM;EAMP;;;;;;EAIOE,yBAAP,UAAsBO,UAAtB,EAAwC;IACtCX,MAAM,CAACS,MAAM,CAACC,QAAP,CAAgBC,UAAhB,CAAD,EAA8B,8BAA9B,CAAN;IACA,IAAMT,GAAG,GAAGK,2BAAiBI,UAAjB,CAAZ;IACA,OAAO,IAAIP,OAAJ,CAAYF,GAAZ,CAAP;EACD,CAJM;EAMP;;;;;;;EAKOE,mBAAP,UAAgBQ,IAAhB,EAA+BC,KAA/B,EAAwC;IACtCb,MAAM,CAACc,EAAE,CAACC,IAAH,CAAQF,KAAR,CAAD,CAAN;IACA,OAAO,IAAIT,OAAJ,CAAYG,0BAAgBK,IAAI,CAACV,GAArB,EAA0BW,KAAK,CAACG,WAAN,CAAkBP,MAAlB,CAA1B,CAAZ,CAAP;EACD,CAHM;EAKP;;;;;;;;EAMOL,oBAAP,UAAiBQ,IAAjB,EAAgCK,IAAhC,EAA8CC,QAA9C,EAA8D;IAC5DlB,MAAM,CAACS,MAAM,CAACC,QAAP,CAAgBO,IAAhB,CAAD,CAAN;IACAjB,MAAM,CAACS,MAAM,CAACC,QAAP,CAAgBQ,QAAhB,CAAD,CAAN;IACA,OAAO,IAAId,OAAJ,CAAYG,2BAAiBK,IAAI,CAACV,GAAtB,EAA2Be,IAA3B,EAAiCC,QAAjC,CAAZ,CAAP;EACD,CAJM;EAMP;;;;;EAGAd;IACE,OAAO,KAAKF,GAAL,CAASiB,MAAT,CAAgBf,OAAO,CAACgB,IAAR,GAAelB,GAA/B,CAAP;EACD,CAFD;EAIA;;;;;EAGAE;IACE,OAAO,OAAO,KAAKF,GAAL,CAASmB,QAAT,CAAkB,KAAlB,CAAd;EACD,CAFD;EAIA;;;;;EAGAjB;IACE,OAAOK,MAAM,CAACG,IAAP,CAAY,KAAKV,GAAjB,CAAP;EACD,CAFD;;EAGF;AAAC,CAtFD;;AAAaoB","names":["assert","require","buf","length","Address","bytes_1","str","account_1","pubKey","Buffer","isBuffer","privateKey","from","nonce","BN","isBN","toArrayLike","salt","initCode","equals","zero","toString","exports"],"sources":["../src/address.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}