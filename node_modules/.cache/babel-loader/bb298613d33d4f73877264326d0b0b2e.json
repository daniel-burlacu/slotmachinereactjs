{"ast":null,"code":"/*\nCopyright (c) 2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\nimport traverse from '@babel/traverse';\nimport generate from '@babel/generator';\nimport * as t from '@babel/types';\nimport { parse as babelParse } from '@babel/parser';\nimport { getAstJsxElement, formatAstAndPrint } from './code-generator';\nexport const parse = code => babelParse(code, {\n  sourceType: 'module',\n  plugins: ['jsx', 'flowComments', 'typescript', 'asyncGenerators', 'classProperties', 'classPrivateProperties', 'classPrivateMethods', ['decorators', {\n    decoratorsBeforeExport: true\n  }], 'doExpressions', 'dynamicImport', 'exportDefaultFrom', 'exportNamespaceFrom', 'functionBind', 'functionSent', 'importMeta', 'logicalAssignment', 'nullishCoalescingOperator', 'numericSeparator', 'objectRestSpread', 'optionalCatchBinding', 'optionalChaining', 'partialApplication', 'throwExpressions', 'topLevelAwait']\n}); // creates a call expression that synchronizes view state\n\nconst getInstrumentOnChange = (what, into) => t.callExpression(t.identifier('__reactViewOnChange'), [t.identifier(what), t.stringLiteral(into)]); // appends a call expression to a function body\n\n\nconst fnBodyAppend = (path, callExpression) => {\n  if (path.node.type !== 'JSXExpressionContainer') {\n    return;\n  }\n\n  const callbackBody = path.get('expression').get('body');\n\n  if (callbackBody.type === 'BlockStatement') {\n    // when the callback body is a block\n    // e.g.: e => { setValue(e.target.value) }\n    callbackBody.pushContainer('body', callExpression);\n  } else {\n    // when it is a single statement like e => setValue(e.target.value)\n    // we have to create a BlockStatement first\n    callbackBody.replaceWith(t.blockStatement([t.expressionStatement(callbackBody.node), t.expressionStatement(callExpression)]));\n  }\n}; // removing all imports, exports and top level\n// variable declaration, add __reactViewOnChange instrumentation when needed\n\n\nexport const transformBeforeCompilation = (ast, elementName, propsConfig) => {\n  try {\n    traverse(ast, {\n      VariableDeclaration(path) {\n        if (path.parent.type === 'Program') {\n          //@ts-ignore\n          path.replaceWith(path.node.declarations[0].init);\n        }\n      },\n\n      ImportDeclaration(path) {\n        path.remove();\n      },\n\n      ExportDefaultDeclaration(path) {\n        if (path.node.declaration.type === 'ArrowFunctionExpression' || path.node.declaration.type === 'FunctionDeclaration') {\n          path.replaceWith(path.node.declaration);\n        } else {\n          path.remove();\n        }\n      },\n\n      // adds internal state instrumentation through __reactViewOnChange callback\n      JSXElement(path) {\n        if (path.node.openingElement.type === 'JSXOpeningElement' && //@ts-ignore\n        path.node.openingElement.name.name === elementName) {\n          if (propsConfig['children'] && propsConfig['children'].propHook) {\n            const propHook = propsConfig['children'].propHook;\n            path.get('children').forEach(child => {\n              typeof propHook === 'object' ? fnBodyAppend(child, getInstrumentOnChange(propHook.what, propHook.into)) : child.traverse(propHook({\n                getInstrumentOnChange,\n                fnBodyAppend\n              }));\n            });\n          }\n\n          path.get('openingElement').get('attributes').forEach(attr => {\n            const name = attr.get('name').node.name;\n            const propHook = propsConfig[name].propHook;\n\n            if (typeof propHook !== 'undefined') {\n              typeof propHook === 'object' ? fnBodyAppend(attr.get('value'), getInstrumentOnChange(propHook.what, propHook.into)) : attr.traverse(propHook({\n                getInstrumentOnChange,\n                fnBodyAppend\n              }));\n            }\n          });\n        }\n      }\n\n    });\n  } catch (e) {}\n\n  return ast;\n};\nexport function parseCode(code, elementName, parseProvider) {\n  const propValues = {};\n  const stateValues = {};\n  let parsedProvider = undefined;\n\n  try {\n    const ast = parse(code);\n    traverse(ast, {\n      JSXElement(path) {\n        if (Object.keys(propValues).length === 0 && // process just the first element\n        path.node.openingElement.type === 'JSXOpeningElement' && //@ts-ignore\n        path.node.openingElement.name.name === elementName) {\n          path.node.openingElement.attributes.forEach(attr => {\n            const name = attr.name.name;\n            let value = null;\n\n            if (attr.value === null) {\n              //boolean prop without value\n              value = true;\n            } else {\n              if (attr.value.type === 'StringLiteral') {\n                value = attr.value.value;\n              } else if (attr.value.type === 'JSXExpressionContainer') {\n                if (attr.value.expression.type === 'BooleanLiteral') {\n                  value = attr.value.expression.value;\n                } else {\n                  value = formatAstAndPrint( //@ts-ignore\n                  t.program([t.expressionStatement(attr.value.expression)]), 30);\n\n                  if (attr.value.expression.type === 'ObjectExpression') {\n                    // the generated code is ({ .... }), this removes the brackets to\n                    // keep the input more readable\n                    value = value.slice(1, -1);\n                  }\n\n                  if (attr.value.expression.type === 'MemberExpression' && attr.value.expression.computed) {\n                    // turn a['hello-world'] into a.hello-world so we don't have to deal with two\n                    // variants in the enum knob UI\n                    value = `${attr.value.expression.object.name}.${attr.value.expression.property.value}`;\n                  }\n                }\n              }\n            }\n\n            propValues[name] = value;\n          });\n          propValues['children'] = formatAstAndPrint(getAstJsxElement('ViewRoot', [], path.node.children), 30).replace(/\\n  /g, '\\n').replace(/^<ViewRoot>\\n?/, '').replace(/<\\/ViewRoot>$/, '').replace(/\\s*<ViewRoot \\/>\\s*/, '');\n        }\n      },\n\n      VariableDeclarator(path) {\n        // looking for React.useState()\n        const node = path.node;\n\n        if (node.id.type === 'ArrayPattern' && node.init.type === 'CallExpression' && node.init.callee.property.name === 'useState') {\n          const name = node.id.elements[0].name;\n          const valueNode = node.init.arguments[0];\n\n          if (valueNode.type === 'StringLiteral' || valueNode.type === 'BooleanLiteral') {\n            stateValues[name] = valueNode.value;\n          } else {\n            stateValues[name] = generate(valueNode).code;\n          }\n        }\n      }\n\n    });\n\n    if (parseProvider) {\n      parsedProvider = parseProvider(ast);\n    }\n  } catch (e) {\n    throw new Error(\"Code is not valid and can't be parsed.\");\n  } // override props by local state (React hooks)\n\n\n  Object.keys(stateValues).forEach(stateValueKey => {\n    Object.keys(propValues).forEach(propValueKey => {\n      if (propValues[propValueKey] === stateValueKey) {\n        propValues[propValueKey] = stateValues[stateValueKey];\n      }\n    });\n  });\n  return {\n    parsedProps: propValues,\n    parsedProvider\n  };\n}","map":{"version":3,"mappings":"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","names":["traverse","generate","t","parse","babelParse","getAstJsxElement","formatAstAndPrint","code","sourceType","plugins","decoratorsBeforeExport","getInstrumentOnChange","what","into","callExpression","identifier","stringLiteral","fnBodyAppend","path","node","type","callbackBody","get","pushContainer","replaceWith","blockStatement","expressionStatement","transformBeforeCompilation","ast","elementName","propsConfig","VariableDeclaration","parent","declarations","init","ImportDeclaration","remove","ExportDefaultDeclaration","declaration","JSXElement","openingElement","name","propHook","forEach","child","attr","e","parseCode","parseProvider","propValues","stateValues","parsedProvider","undefined","Object","keys","length","attributes","value","expression","program","slice","computed","object","property","children","replace","VariableDeclarator","id","callee","elements","valueNode","arguments","Error","stateValueKey","propValueKey","parsedProps"],"sources":["../../src/ast.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}