{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\ReelSet.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Constants from \"../Constants\";\nimport \"../assets/css/App.css\";\nimport Reel from \"./Reel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ReelSet = props => {\n  //  const [spinReel, setSpinReel] = useState(false)\n  let spinResults = [];\n  const winningLines = [];\n  let reels = [];\n\n  const getRandomNr = () => {\n    let randomNr = 0;\n\n    if (props.startGame > 0) {\n      randomNr = -(Math.floor(Math.random() * 42) * 242);\n    }\n\n    return randomNr;\n  };\n\n  const renderReels = () => {\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\n      return /*#__PURE__*/_jsxDEV(Reel, {\n        reel: el,\n        index: idx,\n        gameOn: getRandomNr(),\n        ref: ref => {\n          this.reels[idx] = ref;\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 14\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: reelList\n    }, void 0, false);\n  };\n\n  console.log(\"My spin results are \" + reels.length);\n\n  const checkFiveFools = () => {\n    let fl = false;\n\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      let fool = 0;\n\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (this.spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n      }\n\n      if (fool === 5) {\n        fl = true;\n        winningLines.push(i); //  drawScore(i,true);\n        //  highLightWinningLines(0);\n\n        break;\n      }\n    }\n\n    return fl;\n  };\n\n  const checkWin = () => {\n    let fool = checkFiveFools();\n\n    if (!fool) {\n      evaluateResults();\n    } //  this.setScoreState();\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"jackpot\",\n      children: [\"Jackpot: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reelSet\",\n          children: renderReels()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c = ReelSet;\nexport default ReelSet;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReelSet\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Constants","Reel","ReelSet","props","spinResults","winningLines","reels","getRandomNr","randomNr","startGame","Math","floor","random","renderReels","reelList","Array","apply","REELS","map","el","idx","ref","console","log","length","checkFiveFools","fl","i","LINES","fool","j","indexI","indexJ","push","checkWin","evaluateResults"],"sources":["F:/Games/slotmachinereact/src/components/ReelSet.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport Constants from \"../Constants\";\r\nimport \"../assets/css/App.css\";\r\nimport Reel from \"./Reel\";\r\n\r\nconst ReelSet = (props) => {\r\n  //  const [spinReel, setSpinReel] = useState(false)\r\n  let spinResults = [];\r\n  const winningLines = [];\r\n  let reels= [];\r\n\r\n  const getRandomNr = () => {\r\n    let randomNr = 0;\r\n    if (props.startGame > 0) {\r\n      randomNr = -(Math.floor(Math.random() * 42) * 242);\r\n    }\r\n    return randomNr;\r\n  };\r\n  \r\n  const renderReels = () => {\r\n      let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\r\n      return <Reel reel={el} key={idx} index={idx} gameOn={getRandomNr()} ref={(ref) => {\r\n        this.reels[idx] = ref}}/>;\r\n    });\r\n\r\n    return <>{reelList}</>;\r\n  };\r\n\r\n  console.log(\"My spin results are \"+ reels.length);\r\nconst checkFiveFools = () => {\r\n    let fl = false;\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      let fool = 0;\r\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n        if (this.spinResults[indexI][indexJ] === \"D\") {\r\n          fool++;\r\n        }\r\n      }\r\n      if (fool === 5) {\r\n        fl = true;\r\n        winningLines.push(i);\r\n      //  drawScore(i,true);\r\n      //  highLightWinningLines(0);\r\n        break;\r\n      }\r\n    }\r\n    return fl;\r\n  };\r\n\r\n  const checkWin = () => {\r\n    let fool = checkFiveFools();\r\n    if (!fool) {\r\n      evaluateResults();\r\n    }\r\n  //  this.setScoreState();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div id=\"jackpot\">\r\n        Jackpot: <span>100</span>\r\n      </div>\r\n      <div className=\"container\">\r\n        <div className=\"playContainer\">\r\n          <div className=\"reelSet\" >{\r\n          renderReels() \r\n          }</div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReelSet;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}