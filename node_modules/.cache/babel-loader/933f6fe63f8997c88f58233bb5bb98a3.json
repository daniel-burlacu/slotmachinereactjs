{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction firstResult(things, check, ctx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    for (let index = 0; index < things.length; index++) {\n      const result = yield check(things[index]);\n\n      if (result) {\n        return {\n          result,\n          index\n        };\n      }\n    }\n\n    return null;\n  });\n}\n\nexports.firstResult = firstResult;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAsBA,WAAtB,CACEC,MADF,EAEEC,KAFF,EAGEC,GAHF,EAGe;;IAEb,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,MAAM,CAACI,MAAnC,EAA2CD,KAAK,EAAhD,EAAoD;MAClD,MAAME,MAAM,GAAG,MAAMJ,KAAK,CAACD,MAAM,CAACG,KAAD,CAAP,CAA1B;;MACA,IAAIE,MAAJ,EAAY;QACV,OAAO;UAAEA,MAAF;UAAUF;QAAV,CAAP;MACD;IACF;;IACD,OAAO,IAAP;EACD;AAAA;;AAZDG","names":["firstResult","things","check","ctx","index","length","result","exports"],"sources":["F:\\Games\\slotmachinereact\\node_modules\\@resolver-engine\\core\\src\\utils.ts"],"sourcesContent":["import { Context } from \".\";\n\nexport async function firstResult<T, R>(\n  things: T[],\n  check: (thing: T) => Promise<R | null>,\n  ctx?: Context,\n): Promise<{ result: R; index: number } | null> {\n  for (let index = 0; index < things.length; index++) {\n    const result = await check(things[index]);\n    if (result) {\n      return { result, index };\n    }\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"script"}