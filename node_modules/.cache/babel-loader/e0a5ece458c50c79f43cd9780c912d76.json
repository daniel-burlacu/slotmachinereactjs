{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Set = require('core-js-pure/es/set');\n\nvar Trie = require('merkle-patricia-tree/secure.js');\n\nvar asyncLib = require('async');\n\nvar utils = require(\"ethereumjs-util\");\n\nvar BN = require(\"bn.js\");\n\nvar rlp_1 = require(\"rlp\");\n\nvar ethereumjs_common_1 = require(\"ethereumjs-common\");\n\nvar genesisStates_1 = require(\"ethereumjs-common/dist/genesisStates\");\n\nvar ethereumjs_account_1 = require(\"ethereumjs-account\");\n\nvar cache_1 = require(\"./cache\");\n\nvar precompiles_1 = require(\"../evm/precompiles\");\n/**\n * Interface for getting and setting data from an underlying\n * state trie.\n */\n\n\nvar StateManager =\n/** @class */\nfunction () {\n  /**\n   * Instantiate the StateManager interface.\n   */\n  function StateManager(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var common = opts.common;\n\n    if (!common) {\n      common = new ethereumjs_common_1.default('mainnet', 'petersburg');\n    }\n\n    this._common = common;\n    this._trie = opts.trie || new Trie();\n    this._storageTries = {}; // the storage trie cache\n\n    this._cache = new cache_1.default(this._trie);\n    this._touched = new Set();\n    this._touchedStack = [];\n    this._checkpointCount = 0;\n    this._originalStorageCache = new Map();\n  }\n  /**\n   * Copies the current instance of the `StateManager`\n   * at the last fully committed point, i.e. as if all current\n   * checkpoints were reverted.\n   */\n\n\n  StateManager.prototype.copy = function () {\n    return new StateManager({\n      trie: this._trie.copy(),\n      common: this._common\n    });\n  };\n  /**\n   * Callback for `getAccount` method.\n   * @callback getAccount~callback\n   * @param error - an error that may have happened or `null`\n   * @param account - An [`ethereumjs-account`](https://github.com/ethereumjs/ethereumjs-account)\n   * instance corresponding to the provided `address`\n   */\n\n  /**\n   * Gets the [`ethereumjs-account`](https://github.com/ethereumjs/ethereumjs-account)\n   * associated with `address`. Returns an empty account if the account does not exist.\n   * @param address - Address of the `account` to get\n   * @param {getAccount~callback} cb\n   */\n\n\n  StateManager.prototype.getAccount = function (address, cb) {\n    this._cache.getOrLoad(address, cb);\n  };\n  /**\n   * Saves an [`ethereumjs-account`](https://github.com/ethereumjs/ethereumjs-account)\n   * into state under the provided `address`.\n   * @param address - Address under which to store `account`\n   * @param account - The [`ethereumjs-account`](https://github.com/ethereumjs/ethereumjs-account) to store\n   * @param cb - Callback function\n   */\n\n\n  StateManager.prototype.putAccount = function (address, account, cb) {\n    // TODO: dont save newly created accounts that have no balance\n    // if (toAccount.balance.toString('hex') === '00') {\n    // if they have money or a non-zero nonce or code, then write to tree\n    this._cache.put(address, account);\n\n    this.touchAccount(address); // self._trie.put(addressHex, account.serialize(), cb)\n\n    cb();\n  };\n  /**\n   * Marks an account as touched, according to the definition\n   * in [EIP-158](https://eips.ethereum.org/EIPS/eip-158).\n   * This happens when the account is triggered for a state-changing\n   * event. Touched accounts that are empty will be cleared\n   * at the end of the tx.\n   */\n\n\n  StateManager.prototype.touchAccount = function (address) {\n    this._touched.add(address.toString('hex'));\n  };\n  /**\n   * Adds `value` to the state trie as code, and sets `codeHash` on the account\n   * corresponding to `address` to reference this.\n   * @param address - Address of the `account` to add the `code` for\n   * @param value - The value of the `code`\n   * @param cb - Callback function\n   */\n\n\n  StateManager.prototype.putContractCode = function (address, value, cb) {\n    var _this = this;\n\n    this.getAccount(address, function (err, account) {\n      if (err) {\n        return cb(err);\n      } // TODO: setCode use trie.setRaw which creates a storage leak\n\n\n      account.setCode(_this._trie, value, function (err) {\n        if (err) {\n          return cb(err);\n        }\n\n        _this.putAccount(address, account, cb);\n      });\n    });\n  };\n  /**\n   * Callback for `getContractCode` method\n   * @callback getContractCode~callback\n   * @param error - an error that may have happened or `null`\n   * @param code - The code corresponding to the provided address.\n   * Returns an empty `Buffer` if the account has no associated code.\n   */\n\n  /**\n   * Gets the code corresponding to the provided `address`.\n   * @param address - Address to get the `code` for\n   * @param {getContractCode~callback} cb\n   */\n\n\n  StateManager.prototype.getContractCode = function (address, cb) {\n    var _this = this;\n\n    this.getAccount(address, function (err, account) {\n      if (err) {\n        return cb(err);\n      }\n\n      account.getCode(_this._trie, cb);\n    });\n  };\n  /**\n   * Creates a storage trie from the primary storage trie\n   * for an account and saves this in the storage cache.\n   * @private\n   */\n\n\n  StateManager.prototype._lookupStorageTrie = function (address, cb) {\n    var _this = this; // from state trie\n\n\n    this.getAccount(address, function (err, account) {\n      if (err) {\n        return cb(err);\n      }\n\n      var storageTrie = _this._trie.copy();\n\n      storageTrie.root = account.stateRoot;\n      storageTrie._checkpoints = [];\n      cb(null, storageTrie);\n    });\n  };\n  /**\n   * Gets the storage trie for an account from the storage\n   * cache or does a lookup.\n   * @private\n   */\n\n\n  StateManager.prototype._getStorageTrie = function (address, cb) {\n    var storageTrie = this._storageTries[address.toString('hex')]; // from storage cache\n\n\n    if (storageTrie) {\n      return cb(null, storageTrie);\n    } // lookup from state\n\n\n    this._lookupStorageTrie(address, cb);\n  };\n  /**\n   * Callback for `getContractStorage` method\n   * @callback getContractStorage~callback\n   * @param {Error} error an error that may have happened or `null`\n   * @param {Buffer} storageValue The storage value for the account\n   * corresponding to the provided address at the provided key.\n   * If this does not exists an empty `Buffer` is returned\n   */\n\n  /**\n   * Gets the storage value associated with the provided `address` and `key`. This method returns\n   * the shortest representation of the stored value.\n   * @param address -  Address of the account to get the storage for\n   * @param key - Key in the account's storage to get the value for. Must be 32 bytes long.\n   * @param {getContractCode~callback} cb.\n   */\n\n\n  StateManager.prototype.getContractStorage = function (address, key, cb) {\n    if (key.length !== 32) {\n      return cb(new Error('Storage key must be 32 bytes long'));\n    }\n\n    this._getStorageTrie(address, function (err, trie) {\n      if (err) {\n        return cb(err);\n      }\n\n      trie.get(key, function (err, value) {\n        if (err) {\n          return cb(err);\n        }\n\n        var decoded = rlp_1.decode(value);\n        cb(null, decoded);\n      });\n    });\n  };\n  /**\n   * Caches the storage value associated with the provided `address` and `key`\n   * on first invocation, and returns the cached (original) value from then\n   * onwards. This is used to get the original value of a storage slot for\n   * computing gas costs according to EIP-1283.\n   * @param address - Address of the account to get the storage for\n   * @param key - Key in the account's storage to get the value for. Must be 32 bytes long.\n   */\n\n\n  StateManager.prototype.getOriginalContractStorage = function (address, key, cb) {\n    if (key.length !== 32) {\n      return cb(new Error('Storage key must be 32 bytes long'));\n    }\n\n    var addressHex = address.toString('hex');\n    var keyHex = key.toString('hex');\n    var map;\n\n    if (!this._originalStorageCache.has(addressHex)) {\n      map = new Map();\n\n      this._originalStorageCache.set(addressHex, map);\n    } else {\n      map = this._originalStorageCache.get(addressHex);\n    }\n\n    if (map.has(keyHex)) {\n      cb(null, map.get(keyHex));\n    } else {\n      this.getContractStorage(address, key, function (err, current) {\n        if (err) return cb(err);\n        map.set(keyHex, current);\n        cb(null, current);\n      });\n    }\n  };\n  /**\n   * Modifies the storage trie of an account\n   * @private\n   * @param address -  Address of the account whose storage is to be modified\n   * @param modifyTrie - Function to modify the storage trie of the account\n   */\n\n\n  StateManager.prototype._modifyContractStorage = function (address, modifyTrie, cb) {\n    var _this = this;\n\n    this._getStorageTrie(address, function (err, storageTrie) {\n      if (err) {\n        return cb(err);\n      }\n\n      modifyTrie(storageTrie, function (err) {\n        if (err) return cb(err); // update storage cache\n\n        _this._storageTries[address.toString('hex')] = storageTrie; // update contract stateRoot\n\n        var contract = _this._cache.get(address);\n\n        contract.stateRoot = storageTrie.root;\n\n        _this.putAccount(address, contract, cb);\n\n        _this.touchAccount(address);\n      });\n    });\n  };\n  /**\n   * Adds value to the state trie for the `account`\n   * corresponding to `address` at the provided `key`.\n   * @param address -  Address to set a storage value for\n   * @param key - Key to set the value at. Must be 32 bytes long.\n   * @param value - Value to set at `key` for account corresponding to `address`\n   * @param cb - Callback function\n   */\n\n\n  StateManager.prototype.putContractStorage = function (address, key, value, cb) {\n    if (key.length !== 32) {\n      return cb(new Error('Storage key must be 32 bytes long'));\n    }\n\n    this._modifyContractStorage(address, function (storageTrie, done) {\n      if (value && value.length) {\n        // format input\n        var encodedValue = rlp_1.encode(value);\n        storageTrie.put(key, encodedValue, done);\n      } else {\n        // deleting a value\n        storageTrie.del(key, done);\n      }\n    }, cb);\n  };\n  /**\n   * Clears all storage entries for the account corresponding to `address`.\n   * @param address -  Address to clear the storage of\n   * @param cb - Callback function\n   */\n\n\n  StateManager.prototype.clearContractStorage = function (address, cb) {\n    this._modifyContractStorage(address, function (storageTrie, done) {\n      storageTrie.root = storageTrie.EMPTY_TRIE_ROOT;\n      done();\n    }, cb);\n  };\n  /**\n   * Checkpoints the current state of the StateManager instance.\n   * State changes that follow can then be committed by calling\n   * `commit` or `reverted` by calling rollback.\n   * @param cb - Callback function\n   */\n\n\n  StateManager.prototype.checkpoint = function (cb) {\n    this._trie.checkpoint();\n\n    this._cache.checkpoint();\n\n    this._touchedStack.push(new Set(Array.from(this._touched)));\n\n    this._checkpointCount++;\n    cb();\n  };\n  /**\n   * Commits the current change-set to the instance since the\n   * last call to checkpoint.\n   * @param cb - Callback function\n   */\n\n\n  StateManager.prototype.commit = function (cb) {\n    var _this = this; // setup trie checkpointing\n\n\n    this._trie.commit(function () {\n      // setup cache checkpointing\n      _this._cache.commit();\n\n      _this._touchedStack.pop();\n\n      _this._checkpointCount--;\n      if (_this._checkpointCount === 0) _this._cache.flush(cb);else cb();\n    });\n  };\n  /**\n   * Reverts the current change-set to the instance since the\n   * last call to checkpoint.\n   * @param cb - Callback function\n   */\n\n\n  StateManager.prototype.revert = function (cb) {\n    // setup trie checkpointing\n    this._trie.revert(); // setup cache checkpointing\n\n\n    this._cache.revert();\n\n    this._storageTries = {};\n\n    var touched = this._touchedStack.pop();\n\n    if (!touched) {\n      throw new Error('Reverting to invalid state checkpoint failed');\n    } // Exceptional case due to consensus issue in Geth and Parity.\n    // See [EIP issue #716](https://github.com/ethereum/EIPs/issues/716) for context.\n    // The RIPEMD precompile has to remain *touched* even when the call reverts,\n    // and be considered for deletion.\n\n\n    if (this._touched.has(precompiles_1.ripemdPrecompileAddress)) {\n      touched.add(precompiles_1.ripemdPrecompileAddress);\n    }\n\n    this._touched = touched;\n    this._checkpointCount--;\n    if (this._checkpointCount === 0) this._cache.flush(cb);else cb();\n  };\n  /**\n   * Callback for `getStateRoot` method\n   * @callback getStateRoot~callback\n   * @param {Error} error an error that may have happened or `null`.\n   * Will be an error if the un-committed checkpoints on the instance.\n   * @param {Buffer} stateRoot The state-root of the `StateManager`\n   */\n\n  /**\n   * Gets the state-root of the Merkle-Patricia trie representation\n   * of the state of this StateManager. Will error if there are uncommitted\n   * checkpoints on the instance.\n   * @param {getStateRoot~callback} cb\n   */\n\n\n  StateManager.prototype.getStateRoot = function (cb) {\n    var _this = this;\n\n    if (this._checkpointCount !== 0) {\n      return cb(new Error('Cannot get state root with uncommitted checkpoints'));\n    }\n\n    this._cache.flush(function (err) {\n      if (err) {\n        return cb(err);\n      }\n\n      var stateRoot = _this._trie.root;\n      cb(null, stateRoot);\n    });\n  };\n  /**\n   * Sets the state of the instance to that represented\n   * by the provided `stateRoot`. Will error if there are uncommitted\n   * checkpoints on the instance or if the state root does not exist in\n   * the state trie.\n   * @param stateRoot - The state-root to reset the instance to\n   * @param cb - Callback function\n   */\n\n\n  StateManager.prototype.setStateRoot = function (stateRoot, cb) {\n    var _this = this;\n\n    if (this._checkpointCount !== 0) {\n      return cb(new Error('Cannot set state root with uncommitted checkpoints'));\n    }\n\n    this._cache.flush(function (err) {\n      if (err) {\n        return cb(err);\n      }\n\n      if (stateRoot === _this._trie.EMPTY_TRIE_ROOT) {\n        _this._trie.root = stateRoot;\n\n        _this._cache.clear();\n\n        _this._storageTries = {};\n        return cb();\n      }\n\n      _this._trie.checkRoot(stateRoot, function (err, hasRoot) {\n        if (err || !hasRoot) {\n          cb(err || new Error('State trie does not contain state root'));\n        } else {\n          _this._trie.root = stateRoot;\n\n          _this._cache.clear();\n\n          _this._storageTries = {};\n          cb();\n        }\n      });\n    });\n  };\n  /**\n   * Callback for `dumpStorage` method\n   * @callback dumpStorage~callback\n   * @param {Error} error an error that may have happened or `null`\n   * @param {Object} accountState The state of the account as an `Object` map.\n   * Keys are are the storage keys, values are the storage values as strings.\n   * Both are represented as hex strings without the `0x` prefix.\n   */\n\n  /**\n   * Dumps the the storage values for an `account` specified by `address`.\n   * @param address - The address of the `account` to return storage for\n   * @param {dumpStorage~callback} cb\n   */\n\n\n  StateManager.prototype.dumpStorage = function (address, cb) {\n    this._getStorageTrie(address, function (err, trie) {\n      if (err) {\n        return cb(err);\n      }\n\n      var storage = {};\n      var stream = trie.createReadStream();\n      stream.on('data', function (val) {\n        storage[val.key.toString('hex')] = val.value.toString('hex');\n      });\n      stream.on('end', function () {\n        cb(storage);\n      });\n    });\n  };\n  /**\n   * Callback for `hasGenesisState` method\n   * @callback hasGenesisState~callback\n   * @param {Error} error an error that may have happened or `null`\n   * @param {Boolean} hasGenesisState Whether the storage trie contains the\n   * canonical genesis state for the configured chain parameters.\n   */\n\n  /**\n   * Checks whether the current instance has the canonical genesis state\n   * for the configured chain parameters.\n   * @param {hasGenesisState~callback} cb\n   */\n\n\n  StateManager.prototype.hasGenesisState = function (cb) {\n    var root = this._common.genesis().stateRoot;\n\n    this._trie.checkRoot(root, cb);\n  };\n  /**\n   * Generates a canonical genesis state on the instance based on the\n   * configured chain parameters. Will error if there are uncommitted\n   * checkpoints on the instance.\n   * @param cb - Callback function\n   */\n\n\n  StateManager.prototype.generateCanonicalGenesis = function (cb) {\n    var _this = this;\n\n    if (this._checkpointCount !== 0) {\n      return cb(new Error('Cannot create genesis state with uncommitted checkpoints'));\n    }\n\n    this.hasGenesisState(function (err, genesis) {\n      if (!genesis && !err) {\n        _this.generateGenesis(genesisStates_1.genesisStateByName(_this._common.chainName()), cb);\n      } else {\n        cb(err);\n      }\n    });\n  };\n  /**\n   * Initializes the provided genesis state into the state trie\n   * @param initState - Object (address -> balance)\n   * @param cb - Callback function\n   */\n\n\n  StateManager.prototype.generateGenesis = function (initState, cb) {\n    var _this = this;\n\n    if (this._checkpointCount !== 0) {\n      return cb(new Error('Cannot create genesis state with uncommitted checkpoints'));\n    }\n\n    var addresses = Object.keys(initState);\n    asyncLib.eachSeries(addresses, function (address, done) {\n      var account = new ethereumjs_account_1.default();\n\n      if (initState[address].slice(0, 2) === '0x') {\n        account.balance = new BN(initState[address].slice(2), 16).toArrayLike(Buffer);\n      } else {\n        account.balance = new BN(initState[address]).toArrayLike(Buffer);\n      }\n\n      var addressBuffer = utils.toBuffer(address);\n\n      _this._trie.put(addressBuffer, account.serialize(), done);\n    }, cb);\n  };\n  /**\n   * Callback for `accountIsEmpty` method\n   * @callback accountIsEmpty~callback\n   * @param {Error} error an error that may have happened or `null`\n   * @param {Boolean} empty True if the account is empty false otherwise\n   */\n\n  /**\n   * Checks if the `account` corresponding to `address` is empty as defined in\n   * EIP-161 (https://eips.ethereum.org/EIPS/eip-161).\n   * @param address - Address to check\n   * @param {accountIsEmpty~callback} cb\n   */\n\n\n  StateManager.prototype.accountIsEmpty = function (address, cb) {\n    this.getAccount.bind(this)(address, function (err, account) {\n      if (err) {\n        return cb(err);\n      } // should be replaced by account.isEmpty() once updated\n\n\n      cb(null, account.nonce.toString('hex') === '' && account.balance.toString('hex') === '' && account.codeHash.toString('hex') === utils.KECCAK256_NULL_S);\n    });\n  };\n  /**\n   * Removes accounts form the state trie that have been touched,\n   * as defined in EIP-161 (https://eips.ethereum.org/EIPS/eip-161).\n   * @param cb - Callback function\n   */\n\n\n  StateManager.prototype.cleanupTouchedAccounts = function (cb) {\n    var _this = this;\n\n    var touchedArray = Array.from(this._touched);\n    asyncLib.forEach(touchedArray, function (addressHex, next) {\n      var address = Buffer.from(addressHex, 'hex');\n\n      _this.accountIsEmpty(address, function (err, empty) {\n        if (err) {\n          next(err);\n          return;\n        }\n\n        if (empty) {\n          _this._cache.del(address);\n        }\n\n        next(null);\n      });\n    }, function () {\n      _this._touched.clear();\n\n      cb();\n    });\n  };\n  /**\n   * Clears the original storage cache. Refer to [[getOriginalContractStorage]]\n   * for more explanation.\n   * @ignore\n   */\n\n\n  StateManager.prototype._clearOriginalStorageCache = function () {\n    this._originalStorageCache = new Map();\n  };\n\n  return StateManager;\n}();\n\nexports.default = StateManager;","map":{"version":3,"mappings":";;;;;;AAAA,IAAMA,GAAG,GAAGC,OAAO,CAAC,qBAAD,CAAnB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,gCAAD,CAApB;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,OAAD,CAAxB;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;AAuBA;;;;;;AAIA;AAAA;AAAA;EAUE;;;EAGA,sBAAYG,IAAZ,EAAuC;IAA3B;MAAAA;IAA2B;;IACrC,IAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;;IACA,IAAI,CAACA,MAAL,EAAa;MACXA,MAAM,GAAG,IAAIC,2BAAJ,CAAW,SAAX,EAAsB,YAAtB,CAAT;IACD;;IACD,KAAKC,OAAL,GAAeF,MAAf;IAEA,KAAKG,KAAL,GAAaJ,IAAI,CAACK,IAAL,IAAa,IAAIP,IAAJ,EAA1B;IACA,KAAKQ,aAAL,GAAqB,EAArB,CARqC,CAQb;;IACxB,KAAKC,MAAL,GAAc,IAAIC,eAAJ,CAAU,KAAKJ,KAAf,CAAd;IACA,KAAKK,QAAL,GAAgB,IAAIb,GAAJ,EAAhB;IACA,KAAKc,aAAL,GAAqB,EAArB;IACA,KAAKC,gBAAL,GAAwB,CAAxB;IACA,KAAKC,qBAAL,GAA6B,IAAIC,GAAJ,EAA7B;EACD;EAED;;;;;;;EAKAC;IACE,OAAO,IAAIA,YAAJ,CAAiB;MAAET,IAAI,EAAE,KAAKD,KAAL,CAAWW,IAAX,EAAR;MAA2Bd,MAAM,EAAE,KAAKE;IAAxC,CAAjB,CAAP;EACD,CAFD;EAIA;;;;;;;;EAQA;;;;;;;;EAMAW,8CAAWE,OAAX,EAA4BC,EAA5B,EAAmC;IACjC,KAAKV,MAAL,CAAYW,SAAZ,CAAsBF,OAAtB,EAA+BC,EAA/B;EACD,CAFD;EAIA;;;;;;;;;EAOAH,8CAAWE,OAAX,EAA4BG,OAA5B,EAA8CF,EAA9C,EAAqD;IACnD;IACA;IACA;IACA,KAAKV,MAAL,CAAYa,GAAZ,CAAgBJ,OAAhB,EAAyBG,OAAzB;;IACA,KAAKE,YAAL,CAAkBL,OAAlB,EALmD,CAMnD;;IACAC,EAAE;EACH,CARD;EAUA;;;;;;;;;EAOAH,gDAAaE,OAAb,EAA4B;IAC1B,KAAKP,QAAL,CAAca,GAAd,CAAkBN,OAAO,CAACO,QAAR,CAAiB,KAAjB,CAAlB;EACD,CAFD;EAIA;;;;;;;;;EAOAT,mDAAgBE,OAAhB,EAAiCQ,KAAjC,EAAgDP,EAAhD,EAAuD;IAAvD;;IACE,KAAKQ,UAAL,CAAgBT,OAAhB,EAAyB,UAACU,GAAD,EAAaP,OAAb,EAA6B;MACpD,IAAIO,GAAJ,EAAS;QACP,OAAOT,EAAE,CAACS,GAAD,CAAT;MACD,CAHmD,CAIpD;;;MACAP,OAAO,CAACQ,OAAR,CAAgBC,KAAI,CAACxB,KAArB,EAA4BoB,KAA5B,EAAmC,eAAG;QACpC,IAAIE,GAAJ,EAAS;UACP,OAAOT,EAAE,CAACS,GAAD,CAAT;QACD;;QACDE,KAAI,CAACC,UAAL,CAAgBb,OAAhB,EAAyBG,OAAzB,EAAkCF,EAAlC;MACD,CALD;IAMD,CAXD;EAYD,CAbD;EAeA;;;;;;;;EAQA;;;;;;;EAKAH,mDAAgBE,OAAhB,EAAiCC,EAAjC,EAAwC;IAAxC;;IACE,KAAKQ,UAAL,CAAgBT,OAAhB,EAAyB,UAACU,GAAD,EAAaP,OAAb,EAA6B;MACpD,IAAIO,GAAJ,EAAS;QACP,OAAOT,EAAE,CAACS,GAAD,CAAT;MACD;;MACDP,OAAO,CAACW,OAAR,CAAgBF,KAAI,CAACxB,KAArB,EAA4Ba,EAA5B;IACD,CALD;EAMD,CAPD;EASA;;;;;;;EAKAH,sDAAmBE,OAAnB,EAAoCC,EAApC,EAA2C;IAA3C,iBAA2C,CACzC;;;IACA,KAAKQ,UAAL,CAAgBT,OAAhB,EAAyB,UAACU,GAAD,EAAaP,OAAb,EAA6B;MACpD,IAAIO,GAAJ,EAAS;QACP,OAAOT,EAAE,CAACS,GAAD,CAAT;MACD;;MACD,IAAMK,WAAW,GAAGH,KAAI,CAACxB,KAAL,CAAWW,IAAX,EAApB;;MACAgB,WAAW,CAACC,IAAZ,GAAmBb,OAAO,CAACc,SAA3B;MACAF,WAAW,CAACG,YAAZ,GAA2B,EAA3B;MACAjB,EAAE,CAAC,IAAD,EAAOc,WAAP,CAAF;IACD,CARD;EASD,CAXD;EAaA;;;;;;;EAKAjB,mDAAgBE,OAAhB,EAAiCC,EAAjC,EAAwC;IACtC,IAAMc,WAAW,GAAG,KAAKzB,aAAL,CAAmBU,OAAO,CAACO,QAAR,CAAiB,KAAjB,CAAnB,CAApB,CADsC,CAEtC;;;IACA,IAAIQ,WAAJ,EAAiB;MACf,OAAOd,EAAE,CAAC,IAAD,EAAOc,WAAP,CAAT;IACD,CALqC,CAMtC;;;IACA,KAAKI,kBAAL,CAAwBnB,OAAxB,EAAiCC,EAAjC;EACD,CARD;EAUA;;;;;;;;;EASA;;;;;;;;;EAOAH,sDAAmBE,OAAnB,EAAoCoB,GAApC,EAAiDnB,EAAjD,EAAwD;IACtD,IAAImB,GAAG,CAACC,MAAJ,KAAe,EAAnB,EAAuB;MACrB,OAAOpB,EAAE,CAAC,IAAIqB,KAAJ,CAAU,mCAAV,CAAD,CAAT;IACD;;IAED,KAAKC,eAAL,CAAqBvB,OAArB,EAA8B,UAACU,GAAD,EAAarB,IAAb,EAAsB;MAClD,IAAIqB,GAAJ,EAAS;QACP,OAAOT,EAAE,CAACS,GAAD,CAAT;MACD;;MACDrB,IAAI,CAACmC,GAAL,CAASJ,GAAT,EAAc,UAACV,GAAD,EAAaF,KAAb,EAA0B;QACtC,IAAIE,GAAJ,EAAS;UACP,OAAOT,EAAE,CAACS,GAAD,CAAT;QACD;;QACD,IAAMe,OAAO,GAAGC,aAAOlB,KAAP,CAAhB;QACAP,EAAE,CAAC,IAAD,EAAOwB,OAAP,CAAF;MACD,CAND;IAOD,CAXD;EAYD,CAjBD;EAmBA;;;;;;;;;;EAQA3B,8DAA2BE,OAA3B,EAA4CoB,GAA5C,EAAyDnB,EAAzD,EAAgE;IAC9D,IAAImB,GAAG,CAACC,MAAJ,KAAe,EAAnB,EAAuB;MACrB,OAAOpB,EAAE,CAAC,IAAIqB,KAAJ,CAAU,mCAAV,CAAD,CAAT;IACD;;IAED,IAAMK,UAAU,GAAG3B,OAAO,CAACO,QAAR,CAAiB,KAAjB,CAAnB;IACA,IAAMqB,MAAM,GAAGR,GAAG,CAACb,QAAJ,CAAa,KAAb,CAAf;IAEA,IAAIsB,GAAJ;;IACA,IAAI,CAAC,KAAKjC,qBAAL,CAA2BkC,GAA3B,CAA+BH,UAA/B,CAAL,EAAiD;MAC/CE,GAAG,GAAG,IAAIhC,GAAJ,EAAN;;MACA,KAAKD,qBAAL,CAA2BmC,GAA3B,CAA+BJ,UAA/B,EAA2CE,GAA3C;IACD,CAHD,MAGO;MACLA,GAAG,GAAG,KAAKjC,qBAAL,CAA2B4B,GAA3B,CAA+BG,UAA/B,CAAN;IACD;;IAED,IAAIE,GAAG,CAACC,GAAJ,CAAQF,MAAR,CAAJ,EAAqB;MACnB3B,EAAE,CAAC,IAAD,EAAO4B,GAAG,CAACL,GAAJ,CAAQI,MAAR,CAAP,CAAF;IACD,CAFD,MAEO;MACL,KAAKI,kBAAL,CAAwBhC,OAAxB,EAAiCoB,GAAjC,EAAsC,UAACV,GAAD,EAAauB,OAAb,EAA4B;QAChE,IAAIvB,GAAJ,EAAS,OAAOT,EAAE,CAACS,GAAD,CAAT;QAETmB,GAAG,CAACE,GAAJ,CAAQH,MAAR,EAAgBK,OAAhB;QACAhC,EAAE,CAAC,IAAD,EAAOgC,OAAP,CAAF;MACD,CALD;IAMD;EACF,CA1BD;EA4BA;;;;;;;;EAMAnC,0DAAuBE,OAAvB,EAAwCkC,UAAxC,EAAyDjC,EAAzD,EAAgE;IAAhE;;IACE,KAAKsB,eAAL,CAAqBvB,OAArB,EAA8B,UAACU,GAAD,EAAaK,WAAb,EAA6B;MACzD,IAAIL,GAAJ,EAAS;QACP,OAAOT,EAAE,CAACS,GAAD,CAAT;MACD;;MAEDwB,UAAU,CAACnB,WAAD,EAAc,UAACL,GAAD,EAAW;QACjC,IAAIA,GAAJ,EAAS,OAAOT,EAAE,CAACS,GAAD,CAAT,CADwB,CAEjC;;QACAE,KAAI,CAACtB,aAAL,CAAmBU,OAAO,CAACO,QAAR,CAAiB,KAAjB,CAAnB,IAA8CQ,WAA9C,CAHiC,CAIjC;;QACA,IAAMoB,QAAQ,GAAGvB,KAAI,CAACrB,MAAL,CAAYiC,GAAZ,CAAgBxB,OAAhB,CAAjB;;QACAmC,QAAQ,CAAClB,SAAT,GAAqBF,WAAW,CAACC,IAAjC;;QACAJ,KAAI,CAACC,UAAL,CAAgBb,OAAhB,EAAyBmC,QAAzB,EAAmClC,EAAnC;;QACAW,KAAI,CAACP,YAAL,CAAkBL,OAAlB;MACD,CATS,CAAV;IAUD,CAfD;EAgBD,CAjBD;EAmBA;;;;;;;;;;EAQAF,sDAAmBE,OAAnB,EAAoCoB,GAApC,EAAiDZ,KAAjD,EAAgEP,EAAhE,EAAuE;IACrE,IAAImB,GAAG,CAACC,MAAJ,KAAe,EAAnB,EAAuB;MACrB,OAAOpB,EAAE,CAAC,IAAIqB,KAAJ,CAAU,mCAAV,CAAD,CAAT;IACD;;IAED,KAAKc,sBAAL,CACEpC,OADF,EAEE,UAACe,WAAD,EAAmBsB,IAAnB,EAA4B;MAC1B,IAAI7B,KAAK,IAAIA,KAAK,CAACa,MAAnB,EAA2B;QACzB;QACA,IAAMiB,YAAY,GAAGZ,aAAOlB,KAAP,CAArB;QACAO,WAAW,CAACX,GAAZ,CAAgBgB,GAAhB,EAAqBkB,YAArB,EAAmCD,IAAnC;MACD,CAJD,MAIO;QACL;QACAtB,WAAW,CAACwB,GAAZ,CAAgBnB,GAAhB,EAAqBiB,IAArB;MACD;IACF,CAXH,EAYEpC,EAZF;EAcD,CAnBD;EAqBA;;;;;;;EAKAH,wDAAqBE,OAArB,EAAsCC,EAAtC,EAA6C;IAC3C,KAAKmC,sBAAL,CACEpC,OADF,EAEE,UAACe,WAAD,EAAmBsB,IAAnB,EAA4B;MAC1BtB,WAAW,CAACC,IAAZ,GAAmBD,WAAW,CAACyB,eAA/B;MACAH,IAAI;IACL,CALH,EAMEpC,EANF;EAQD,CATD;EAWA;;;;;;;;EAMAH,8CAAWG,EAAX,EAAkB;IAChB,KAAKb,KAAL,CAAWqD,UAAX;;IACA,KAAKlD,MAAL,CAAYkD,UAAZ;;IACA,KAAK/C,aAAL,CAAmBgD,IAAnB,CAAwB,IAAI9D,GAAJ,CAAQ+D,KAAK,CAACC,IAAN,CAAW,KAAKnD,QAAhB,CAAR,CAAxB;;IACA,KAAKE,gBAAL;IACAM,EAAE;EACH,CAND;EAQA;;;;;;;EAKAH,0CAAOG,EAAP,EAAc;IAAd,iBAAc,CACZ;;;IACA,KAAKb,KAAL,CAAWyD,MAAX,CAAkB;MAChB;MACAjC,KAAI,CAACrB,MAAL,CAAYsD,MAAZ;;MACAjC,KAAI,CAAClB,aAAL,CAAmBoD,GAAnB;;MACAlC,KAAI,CAACjB,gBAAL;MAEA,IAAIiB,KAAI,CAACjB,gBAAL,KAA0B,CAA9B,EAAiCiB,KAAI,CAACrB,MAAL,CAAYwD,KAAZ,CAAkB9C,EAAlB,EAAjC,KACKA,EAAE;IACR,CARD;EASD,CAXD;EAaA;;;;;;;EAKAH,0CAAOG,EAAP,EAAc;IACZ;IACA,KAAKb,KAAL,CAAW4D,MAAX,GAFY,CAGZ;;;IACA,KAAKzD,MAAL,CAAYyD,MAAZ;;IACA,KAAK1D,aAAL,GAAqB,EAArB;;IACA,IAAM2D,OAAO,GAAG,KAAKvD,aAAL,CAAmBoD,GAAnB,EAAhB;;IACA,IAAI,CAACG,OAAL,EAAc;MACZ,MAAM,IAAI3B,KAAJ,CAAU,8CAAV,CAAN;IACD,CATW,CAUZ;IACA;IACA;IACA;;;IACA,IAAI,KAAK7B,QAAL,CAAcqC,GAAd,CAAkBoB,qCAAlB,CAAJ,EAAgD;MAC9CD,OAAO,CAAC3C,GAAR,CAAY4C,qCAAZ;IACD;;IACD,KAAKzD,QAAL,GAAgBwD,OAAhB;IACA,KAAKtD,gBAAL;IAEA,IAAI,KAAKA,gBAAL,KAA0B,CAA9B,EAAiC,KAAKJ,MAAL,CAAYwD,KAAZ,CAAkB9C,EAAlB,EAAjC,KACKA,EAAE;EACR,CAtBD;EAwBA;;;;;;;;EAQA;;;;;;;;EAMAH,gDAAaG,EAAb,EAAoB;IAApB;;IACE,IAAI,KAAKN,gBAAL,KAA0B,CAA9B,EAAiC;MAC/B,OAAOM,EAAE,CAAC,IAAIqB,KAAJ,CAAU,oDAAV,CAAD,CAAT;IACD;;IAED,KAAK/B,MAAL,CAAYwD,KAAZ,CAAkB,UAACrC,GAAD,EAAW;MAC3B,IAAIA,GAAJ,EAAS;QACP,OAAOT,EAAE,CAACS,GAAD,CAAT;MACD;;MACD,IAAMO,SAAS,GAAGL,KAAI,CAACxB,KAAL,CAAW4B,IAA7B;MACAf,EAAE,CAAC,IAAD,EAAOgB,SAAP,CAAF;IACD,CAND;EAOD,CAZD;EAcA;;;;;;;;;;EAQAnB,gDAAamB,SAAb,EAAgChB,EAAhC,EAAuC;IAAvC;;IACE,IAAI,KAAKN,gBAAL,KAA0B,CAA9B,EAAiC;MAC/B,OAAOM,EAAE,CAAC,IAAIqB,KAAJ,CAAU,oDAAV,CAAD,CAAT;IACD;;IAED,KAAK/B,MAAL,CAAYwD,KAAZ,CAAkB,UAACrC,GAAD,EAAW;MAC3B,IAAIA,GAAJ,EAAS;QACP,OAAOT,EAAE,CAACS,GAAD,CAAT;MACD;;MACD,IAAIO,SAAS,KAAKL,KAAI,CAACxB,KAAL,CAAWoD,eAA7B,EAA8C;QAC5C5B,KAAI,CAACxB,KAAL,CAAW4B,IAAX,GAAkBC,SAAlB;;QACAL,KAAI,CAACrB,MAAL,CAAY4D,KAAZ;;QACAvC,KAAI,CAACtB,aAAL,GAAqB,EAArB;QACA,OAAOW,EAAE,EAAT;MACD;;MACDW,KAAI,CAACxB,KAAL,CAAWgE,SAAX,CAAqBnC,SAArB,EAAgC,UAACP,GAAD,EAAa2C,OAAb,EAA6B;QAC3D,IAAI3C,GAAG,IAAI,CAAC2C,OAAZ,EAAqB;UACnBpD,EAAE,CAACS,GAAG,IAAI,IAAIY,KAAJ,CAAU,wCAAV,CAAR,CAAF;QACD,CAFD,MAEO;UACLV,KAAI,CAACxB,KAAL,CAAW4B,IAAX,GAAkBC,SAAlB;;UACAL,KAAI,CAACrB,MAAL,CAAY4D,KAAZ;;UACAvC,KAAI,CAACtB,aAAL,GAAqB,EAArB;UACAW,EAAE;QACH;MACF,CATD;IAUD,CApBD;EAqBD,CA1BD;EA4BA;;;;;;;;;EASA;;;;;;;EAKAH,+CAAYE,OAAZ,EAA6BC,EAA7B,EAAoC;IAClC,KAAKsB,eAAL,CAAqBvB,OAArB,EAA8B,UAACU,GAAD,EAAarB,IAAb,EAAsB;MAClD,IAAIqB,GAAJ,EAAS;QACP,OAAOT,EAAE,CAACS,GAAD,CAAT;MACD;;MACD,IAAM4C,OAAO,GAAgB,EAA7B;MACA,IAAMC,MAAM,GAAGlE,IAAI,CAACmE,gBAAL,EAAf;MACAD,MAAM,CAACE,EAAP,CAAU,MAAV,EAAkB,UAACC,GAAD,EAAS;QACzBJ,OAAO,CAACI,GAAG,CAACtC,GAAJ,CAAQb,QAAR,CAAiB,KAAjB,CAAD,CAAP,GAAmCmD,GAAG,CAAClD,KAAJ,CAAUD,QAAV,CAAmB,KAAnB,CAAnC;MACD,CAFD;MAGAgD,MAAM,CAACE,EAAP,CAAU,KAAV,EAAiB;QACfxD,EAAE,CAACqD,OAAD,CAAF;MACD,CAFD;IAGD,CAZD;EAaD,CAdD;EAgBA;;;;;;;;EAQA;;;;;;;EAKAxD,mDAAgBG,EAAhB,EAAuB;IACrB,IAAMe,IAAI,GAAG,KAAK7B,OAAL,CAAawE,OAAb,GAAuB1C,SAApC;;IACA,KAAK7B,KAAL,CAAWgE,SAAX,CAAqBpC,IAArB,EAA2Bf,EAA3B;EACD,CAHD;EAKA;;;;;;;;EAMAH,4DAAyBG,EAAzB,EAAgC;IAAhC;;IACE,IAAI,KAAKN,gBAAL,KAA0B,CAA9B,EAAiC;MAC/B,OAAOM,EAAE,CAAC,IAAIqB,KAAJ,CAAU,0DAAV,CAAD,CAAT;IACD;;IAED,KAAKsC,eAAL,CAAqB,UAAClD,GAAD,EAAaiD,OAAb,EAA6B;MAChD,IAAI,CAACA,OAAD,IAAY,CAACjD,GAAjB,EAAsB;QACpBE,KAAI,CAACiD,eAAL,CAAqBC,mCAAmBlD,KAAI,CAACzB,OAAL,CAAa4E,SAAb,EAAnB,CAArB,EAAmE9D,EAAnE;MACD,CAFD,MAEO;QACLA,EAAE,CAACS,GAAD,CAAF;MACD;IACF,CAND;EAOD,CAZD;EAcA;;;;;;;EAKAZ,mDAAgBkE,SAAhB,EAAgC/D,EAAhC,EAAuC;IAAvC;;IACE,IAAI,KAAKN,gBAAL,KAA0B,CAA9B,EAAiC;MAC/B,OAAOM,EAAE,CAAC,IAAIqB,KAAJ,CAAU,0DAAV,CAAD,CAAT;IACD;;IAED,IAAM2C,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYH,SAAZ,CAAlB;IACAjF,QAAQ,CAACqF,UAAT,CACEH,SADF,EAEE,UAACjE,OAAD,EAAkBqC,IAAlB,EAA2B;MACzB,IAAMlC,OAAO,GAAG,IAAIkE,4BAAJ,EAAhB;;MACA,IAAIL,SAAS,CAAChE,OAAD,CAAT,CAAmBsE,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,MAAmC,IAAvC,EAA6C;QAC3CnE,OAAO,CAACoE,OAAR,GAAkB,IAAIC,EAAJ,CAAOR,SAAS,CAAChE,OAAD,CAAT,CAAmBsE,KAAnB,CAAyB,CAAzB,CAAP,EAAoC,EAApC,EAAwCG,WAAxC,CAAoDC,MAApD,CAAlB;MACD,CAFD,MAEO;QACLvE,OAAO,CAACoE,OAAR,GAAkB,IAAIC,EAAJ,CAAOR,SAAS,CAAChE,OAAD,CAAhB,EAA2ByE,WAA3B,CAAuCC,MAAvC,CAAlB;MACD;;MACD,IAAMC,aAAa,GAAGC,KAAK,CAACC,QAAN,CAAe7E,OAAf,CAAtB;;MACAY,KAAI,CAACxB,KAAL,CAAWgB,GAAX,CAAeuE,aAAf,EAA8BxE,OAAO,CAAC2E,SAAR,EAA9B,EAAmDzC,IAAnD;IACD,CAXH,EAYEpC,EAZF;EAcD,CApBD;EAsBA;;;;;;;EAOA;;;;;;;;EAMAH,kDAAeE,OAAf,EAAgCC,EAAhC,EAAuC;IACrC,KAAKQ,UAAL,CAAgBsE,IAAhB,CAAqB,IAArB,EAA2B/E,OAA3B,EAAoC,UAACU,GAAD,EAAaP,OAAb,EAA6B;MAC/D,IAAIO,GAAJ,EAAS;QACP,OAAOT,EAAE,CAACS,GAAD,CAAT;MACD,CAH8D,CAK/D;;;MACAT,EAAE,CACA,IADA,EAEAE,OAAO,CAAC6E,KAAR,CAAczE,QAAd,CAAuB,KAAvB,MAAkC,EAAlC,IACEJ,OAAO,CAACoE,OAAR,CAAgBhE,QAAhB,CAAyB,KAAzB,MAAoC,EADtC,IAEEJ,OAAO,CAAC8E,QAAR,CAAiB1E,QAAjB,CAA0B,KAA1B,MAAqCqE,KAAK,CAACM,gBAJ7C,CAAF;IAMD,CAZD;EAaD,CAdD;EAgBA;;;;;;;EAKApF,0DAAuBG,EAAvB,EAA8B;IAA9B;;IACE,IAAMkF,YAAY,GAAGxC,KAAK,CAACC,IAAN,CAAW,KAAKnD,QAAhB,CAArB;IACAV,QAAQ,CAACqG,OAAT,CACED,YADF,EAEE,UAACxD,UAAD,EAAqB0D,IAArB,EAA8B;MAC5B,IAAMrF,OAAO,GAAG0E,MAAM,CAAC9B,IAAP,CAAYjB,UAAZ,EAAwB,KAAxB,CAAhB;;MACAf,KAAI,CAAC0E,cAAL,CAAoBtF,OAApB,EAA6B,UAACU,GAAD,EAAa6E,KAAb,EAA2B;QACtD,IAAI7E,GAAJ,EAAS;UACP2E,IAAI,CAAC3E,GAAD,CAAJ;UACA;QACD;;QAED,IAAI6E,KAAJ,EAAW;UACT3E,KAAI,CAACrB,MAAL,CAAYgD,GAAZ,CAAgBvC,OAAhB;QACD;;QACDqF,IAAI,CAAC,IAAD,CAAJ;MACD,CAVD;IAWD,CAfH,EAgBE;MACEzE,KAAI,CAACnB,QAAL,CAAc0D,KAAd;;MACAlD,EAAE;IACH,CAnBH;EAqBD,CAvBD;EAyBA;;;;;;;EAKAH;IACE,KAAKF,qBAAL,GAA6B,IAAIC,GAAJ,EAA7B;EACD,CAFD;;EAGF;AAAC,CA7kBD","names":["Set","require","Trie","asyncLib","opts","common","ethereumjs_common_1","_common","_trie","trie","_storageTries","_cache","cache_1","_touched","_touchedStack","_checkpointCount","_originalStorageCache","Map","StateManager","copy","address","cb","getOrLoad","account","put","touchAccount","add","toString","value","getAccount","err","setCode","_this","putAccount","getCode","storageTrie","root","stateRoot","_checkpoints","_lookupStorageTrie","key","length","Error","_getStorageTrie","get","decoded","rlp_1","addressHex","keyHex","map","has","set","getContractStorage","current","modifyTrie","contract","_modifyContractStorage","done","encodedValue","del","EMPTY_TRIE_ROOT","checkpoint","push","Array","from","commit","pop","flush","revert","touched","precompiles_1","clear","checkRoot","hasRoot","storage","stream","createReadStream","on","val","genesis","hasGenesisState","generateGenesis","genesisStates_1","chainName","initState","addresses","Object","keys","eachSeries","ethereumjs_account_1","slice","balance","BN","toArrayLike","Buffer","addressBuffer","utils","toBuffer","serialize","bind","nonce","codeHash","KECCAK256_NULL_S","touchedArray","forEach","next","accountIsEmpty","empty"],"sources":["../../lib/state/stateManager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}