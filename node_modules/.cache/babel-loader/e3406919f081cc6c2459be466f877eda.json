{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar assert = require(\"assert\");\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar BYTE_SIZE = 256;\n\nvar Bloom =\n/** @class */\nfunction () {\n  /**\n   * Represents a Bloom filter.\n   */\n  function Bloom(bitvector) {\n    if (!bitvector) {\n      this.bitvector = ethereumjs_util_1.zeros(BYTE_SIZE);\n    } else {\n      assert(bitvector.length === BYTE_SIZE, 'bitvectors must be 2048 bits long');\n      this.bitvector = bitvector;\n    }\n  }\n  /**\n   * Adds an element to a bit vector of a 64 byte bloom filter.\n   * @param e - The element to add\n   */\n\n\n  Bloom.prototype.add = function (e) {\n    assert(Buffer.isBuffer(e), 'Element should be buffer');\n    e = ethereumjs_util_1.keccak256(e);\n    var mask = 2047; // binary 11111111111\n\n    for (var i = 0; i < 3; i++) {\n      var first2bytes = e.readUInt16BE(i * 2);\n      var loc = mask & first2bytes;\n      var byteLoc = loc >> 3;\n      var bitLoc = 1 << loc % 8;\n      this.bitvector[BYTE_SIZE - byteLoc - 1] |= bitLoc;\n    }\n  };\n  /**\n   * Checks if an element is in the bloom.\n   * @param e - The element to check\n   */\n\n\n  Bloom.prototype.check = function (e) {\n    assert(Buffer.isBuffer(e), 'Element should be Buffer');\n    e = ethereumjs_util_1.keccak256(e);\n    var mask = 2047; // binary 11111111111\n\n    var match = true;\n\n    for (var i = 0; i < 3 && match; i++) {\n      var first2bytes = e.readUInt16BE(i * 2);\n      var loc = mask & first2bytes;\n      var byteLoc = loc >> 3;\n      var bitLoc = 1 << loc % 8;\n      match = (this.bitvector[BYTE_SIZE - byteLoc - 1] & bitLoc) !== 0;\n    }\n\n    return Boolean(match);\n  };\n  /**\n   * Checks if multiple topics are in a bloom.\n   * @returns `true` if every topic is in the bloom\n   */\n\n\n  Bloom.prototype.multiCheck = function (topics) {\n    var _this = this;\n\n    return topics.every(function (t) {\n      return _this.check(t);\n    });\n  };\n  /**\n   * Bitwise or blooms together.\n   */\n\n\n  Bloom.prototype.or = function (bloom) {\n    if (bloom) {\n      for (var i = 0; i <= BYTE_SIZE; i++) {\n        this.bitvector[i] = this.bitvector[i] | bloom.bitvector[i];\n      }\n    }\n  };\n\n  return Bloom;\n}();\n\nexports.default = Bloom;","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;;AAEA,IAAMA,SAAS,GAAG,GAAlB;;AAEA;AAAA;AAAA;EAGE;;;EAGA,eAAYC,SAAZ,EAA8B;IAC5B,IAAI,CAACA,SAAL,EAAgB;MACd,KAAKA,SAAL,GAAiBC,wBAAMF,SAAN,CAAjB;IACD,CAFD,MAEO;MACLG,MAAM,CAACF,SAAS,CAACG,MAAV,KAAqBJ,SAAtB,EAAiC,mCAAjC,CAAN;MACA,KAAKC,SAAL,GAAiBA,SAAjB;IACD;EACF;EAED;;;;;;EAIAI,gCAAIC,CAAJ,EAAa;IACXH,MAAM,CAACI,MAAM,CAACC,QAAP,CAAgBF,CAAhB,CAAD,EAAqB,0BAArB,CAAN;IACAA,CAAC,GAAGJ,4BAAUI,CAAV,CAAJ;IACA,IAAMG,IAAI,GAAG,IAAb,CAHW,CAGO;;IAElB,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;MAC1B,IAAMC,WAAW,GAAGL,CAAC,CAACM,YAAF,CAAeF,CAAC,GAAG,CAAnB,CAApB;MACA,IAAMG,GAAG,GAAGJ,IAAI,GAAGE,WAAnB;MACA,IAAMG,OAAO,GAAGD,GAAG,IAAI,CAAvB;MACA,IAAME,MAAM,GAAG,KAAKF,GAAG,GAAG,CAA1B;MACA,KAAKZ,SAAL,CAAeD,SAAS,GAAGc,OAAZ,GAAsB,CAArC,KAA2CC,MAA3C;IACD;EACF,CAZD;EAcA;;;;;;EAIAV,kCAAMC,CAAN,EAAe;IACbH,MAAM,CAACI,MAAM,CAACC,QAAP,CAAgBF,CAAhB,CAAD,EAAqB,0BAArB,CAAN;IACAA,CAAC,GAAGJ,4BAAUI,CAAV,CAAJ;IACA,IAAMG,IAAI,GAAG,IAAb,CAHa,CAGK;;IAClB,IAAIO,KAAK,GAAG,IAAZ;;IAEA,KAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAAJ,IAASM,KAAzB,EAAgCN,CAAC,EAAjC,EAAqC;MACnC,IAAMC,WAAW,GAAGL,CAAC,CAACM,YAAF,CAAeF,CAAC,GAAG,CAAnB,CAApB;MACA,IAAMG,GAAG,GAAGJ,IAAI,GAAGE,WAAnB;MACA,IAAMG,OAAO,GAAGD,GAAG,IAAI,CAAvB;MACA,IAAME,MAAM,GAAG,KAAKF,GAAG,GAAG,CAA1B;MACAG,KAAK,GAAG,CAAC,KAAKf,SAAL,CAAeD,SAAS,GAAGc,OAAZ,GAAsB,CAArC,IAA0CC,MAA3C,MAAuD,CAA/D;IACD;;IAED,OAAOE,OAAO,CAACD,KAAD,CAAd;EACD,CAfD;EAiBA;;;;;;EAIAX,uCAAWa,MAAX,EAA2B;IAA3B;;IACE,OAAOA,MAAM,CAACC,KAAP,CAAa,UAACC,CAAD,EAAU;MAAK,YAAI,CAACC,KAAL,CAAWD,CAAX;IAAa,CAAzC,CAAP;EACD,CAFD;EAIA;;;;;EAGAf,+BAAGiB,KAAH,EAAe;IACb,IAAIA,KAAJ,EAAW;MACT,KAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIV,SAArB,EAAgCU,CAAC,EAAjC,EAAqC;QACnC,KAAKT,SAAL,CAAeS,CAAf,IAAoB,KAAKT,SAAL,CAAeS,CAAf,IAAoBY,KAAK,CAACrB,SAAN,CAAgBS,CAAhB,CAAxC;MACD;IACF;EACF,CAND;;EAOF;AAAC,CAxED","names":["BYTE_SIZE","bitvector","ethereumjs_util_1","assert","length","Bloom","e","Buffer","isBuffer","mask","i","first2bytes","readUInt16BE","loc","byteLoc","bitLoc","match","Boolean","topics","every","t","check","bloom"],"sources":["../../lib/bloom/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}