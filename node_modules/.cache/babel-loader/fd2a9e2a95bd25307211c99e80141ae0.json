{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inputToConfig = void 0;\n\nconst defaultConfig_1 = require(\"./defaultConfig\");\n\nfunction inputToConfig(input) {\n  const result = { ...defaultConfig_1.defaultConfig\n  };\n\n  for (const key in input) {\n    if (input[key] !== undefined) {\n      if (key in defaultConfig_1.defaultConfig) {\n        result[key] = input[key];\n      } else if (key !== 'name') {\n        console.warn(`Warning: Config key \"${key}\" not supported.`);\n      }\n    }\n  }\n\n  validate(result);\n  return result;\n}\n\nexports.inputToConfig = inputToConfig;\n\nfunction validate(config) {\n  function checkConfigProperty(property, validator) {\n    if (!validator(config[property])) {\n      throw new TypeError(`Invalid config. Check the value of \"${property}\"`);\n    }\n  }\n\n  checkConfigProperty('sourceDirectory', checkSourceDirectory);\n  checkConfigProperty('outputDirectory', checkOutputDirectory);\n  checkConfigProperty('flattenOutputDirectory', checkFlattenOutputDirectory);\n  checkConfigProperty('nodeModulesDirectory', checkNodeModulesDirectory);\n  checkConfigProperty('compilerType', checkCompilerType);\n  checkConfigProperty('compilerVersion', checkCompilerVersion);\n  checkConfigProperty('compilerAllowedPaths', checkCompilerAllowedPaths);\n  checkConfigProperty('compilerOptions', checkCompilerOptions);\n  checkConfigProperty('outputHumanReadableAbi', checkOutputHumanReadableAbi);\n  checkConfigProperty('outputType', checkOutputType);\n}\n\nconst checkSourceDirectory = checkType('sourceDirectory', 'string');\nconst checkOutputDirectory = checkType('outputDirectory', 'string');\nconst checkFlattenOutputDirectory = checkType('flattenOutputDirectory', 'string');\nconst checkNodeModulesDirectory = checkType('nodeModulesDirectory', 'string');\nconst checkCompilerType = checkEnum('compilerType', ['native', 'dockerized-solc', 'solcjs', 'dockerized-vyper']);\nconst checkCompilerVersion = checkType('compilerVersion', 'string');\n\nfunction checkCompilerAllowedPaths(compilerAllowedPaths) {\n  if (!Array.isArray(compilerAllowedPaths)) {\n    console.warn('Warning: compilerAllowedPaths must be string[], but is not an array');\n    return false;\n  } else if (compilerAllowedPaths.some(x => typeof x !== 'string')) {\n    console.warn('Warning: compilerAllowedPaths must be string[], but some of the values are not strings');\n    return false;\n  }\n\n  return true;\n}\n\nconst checkCompilerOptions = checkType('compilerOptions', 'object');\nconst checkOutputHumanReadableAbi = checkType('outputHumanReadableAbi', 'boolean');\nconst checkOutputType = checkEnum('outputType', ['multiple', 'combined', 'all', 'minimal']);\n\nfunction checkType(key, type) {\n  return function (value) {\n    if (typeof value !== type) {\n      // eslint-disable-line valid-typeof\n      console.warn(`Warning: \"${key}\" must have type of ${type}. Received: ${typeof value}.`);\n      return false;\n    }\n\n    return true;\n  };\n}\n\nfunction checkEnum(key, values) {\n  return function (value) {\n    if (!values.includes(value)) {\n      console.warn(`Warning: ${key} must be one of: ${values.join(', ')}. Received: ${value}.`);\n      return false;\n    }\n\n    return true;\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","inputToConfig","defaultConfig_1","require","input","result","defaultConfig","key","undefined","console","warn","validate","config","checkConfigProperty","property","validator","TypeError","checkSourceDirectory","checkOutputDirectory","checkFlattenOutputDirectory","checkNodeModulesDirectory","checkCompilerType","checkCompilerVersion","checkCompilerAllowedPaths","checkCompilerOptions","checkOutputHumanReadableAbi","checkOutputType","checkType","checkEnum","compilerAllowedPaths","Array","isArray","some","x","type","values","includes","join"],"sources":["F:/Games/slotmachinereact/node_modules/@ethereum-waffle/compiler/dist/cjs/config/inputToConfig.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.inputToConfig = void 0;\nconst defaultConfig_1 = require(\"./defaultConfig\");\nfunction inputToConfig(input) {\n    const result = { ...defaultConfig_1.defaultConfig };\n    for (const key in input) {\n        if (input[key] !== undefined) {\n            if (key in defaultConfig_1.defaultConfig) {\n                result[key] = input[key];\n            }\n            else if (key !== 'name') {\n                console.warn(`Warning: Config key \"${key}\" not supported.`);\n            }\n        }\n    }\n    validate(result);\n    return result;\n}\nexports.inputToConfig = inputToConfig;\nfunction validate(config) {\n    function checkConfigProperty(property, validator) {\n        if (!validator(config[property])) {\n            throw new TypeError(`Invalid config. Check the value of \"${property}\"`);\n        }\n    }\n    checkConfigProperty('sourceDirectory', checkSourceDirectory);\n    checkConfigProperty('outputDirectory', checkOutputDirectory);\n    checkConfigProperty('flattenOutputDirectory', checkFlattenOutputDirectory);\n    checkConfigProperty('nodeModulesDirectory', checkNodeModulesDirectory);\n    checkConfigProperty('compilerType', checkCompilerType);\n    checkConfigProperty('compilerVersion', checkCompilerVersion);\n    checkConfigProperty('compilerAllowedPaths', checkCompilerAllowedPaths);\n    checkConfigProperty('compilerOptions', checkCompilerOptions);\n    checkConfigProperty('outputHumanReadableAbi', checkOutputHumanReadableAbi);\n    checkConfigProperty('outputType', checkOutputType);\n}\nconst checkSourceDirectory = checkType('sourceDirectory', 'string');\nconst checkOutputDirectory = checkType('outputDirectory', 'string');\nconst checkFlattenOutputDirectory = checkType('flattenOutputDirectory', 'string');\nconst checkNodeModulesDirectory = checkType('nodeModulesDirectory', 'string');\nconst checkCompilerType = checkEnum('compilerType', ['native', 'dockerized-solc', 'solcjs', 'dockerized-vyper']);\nconst checkCompilerVersion = checkType('compilerVersion', 'string');\nfunction checkCompilerAllowedPaths(compilerAllowedPaths) {\n    if (!Array.isArray(compilerAllowedPaths)) {\n        console.warn('Warning: compilerAllowedPaths must be string[], but is not an array');\n        return false;\n    }\n    else if (compilerAllowedPaths.some(x => typeof x !== 'string')) {\n        console.warn('Warning: compilerAllowedPaths must be string[], but some of the values are not strings');\n        return false;\n    }\n    return true;\n}\nconst checkCompilerOptions = checkType('compilerOptions', 'object');\nconst checkOutputHumanReadableAbi = checkType('outputHumanReadableAbi', 'boolean');\nconst checkOutputType = checkEnum('outputType', ['multiple', 'combined', 'all', 'minimal']);\nfunction checkType(key, type) {\n    return function (value) {\n        if (typeof value !== type) { // eslint-disable-line valid-typeof\n            console.warn(`Warning: \"${key}\" must have type of ${type}. Received: ${typeof value}.`);\n            return false;\n        }\n        return true;\n    };\n}\nfunction checkEnum(key, values) {\n    return function (value) {\n        if (!values.includes(value)) {\n            console.warn(`Warning: ${key} must be one of: ${values.join(', ')}. Received: ${value}.`);\n            return false;\n        }\n        return true;\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}