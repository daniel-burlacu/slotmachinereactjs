{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst is_url_1 = __importDefault(require(\"is-url\"));\n\nfunction UriResolver() {\n  return function http(uri, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!is_url_1.default(uri)) {\n        return null;\n      }\n\n      return new URL(uri).href;\n    });\n  };\n}\n\nexports.UriResolver = UriResolver;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAIA,SAAgBA,WAAhB,GAA2B;EACzB,OAAO,SAAeC,IAAf,CAAoBC,GAApB,EAAiCC,GAAjC,EAA6C;;MAClD,IAAI,CAACC,iBAAMF,GAAN,CAAL,EAAiB;QACf,OAAO,IAAP;MACD;;MACD,OAAO,IAAIG,GAAJ,CAAQH,GAAR,EAAaI,IAApB;IACD;EAAA,CALD;AAMD;;AAPDC","names":["UriResolver","http","uri","ctx","is_url_1","URL","href","exports"],"sources":["F:\\Games\\slotmachinereact\\node_modules\\@resolver-engine\\core\\src\\resolvers\\uriresolver.ts"],"sourcesContent":["import isUrl from \"is-url\";\nimport { Context } from \"..\";\nimport { SubResolver } from \"./subresolver\";\n\nexport function UriResolver(): SubResolver {\n  return async function http(uri: string, ctx: Context): Promise<string | null> {\n    if (!isUrl(uri)) {\n      return null;\n    }\n    return new URL(uri).href;\n  };\n}\n"]},"metadata":{},"sourceType":"script"}