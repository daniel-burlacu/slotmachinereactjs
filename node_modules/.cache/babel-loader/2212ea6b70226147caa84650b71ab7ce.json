{"ast":null,"code":"/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\"use strict\";\n\nconst {\n  callbackify\n} = require('util');\n\nvar _ = require('underscore');\n\nvar errors = require('web3-core-helpers').errors;\n\nvar Jsonrpc = require('./jsonrpc.js');\n\nvar BatchManager = require('./batch.js');\n\nvar givenProvider = require('./givenProvider.js');\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n *\n * @param {string|Object}provider\n * @param {Net.Socket} net\n *\n * @constructor\n */\n\n\nvar RequestManager = function RequestManager(provider, net) {\n  this.provider = null;\n  this.providers = RequestManager.providers;\n  this.setProvider(provider, net);\n  this.subscriptions = new Map();\n};\n\nRequestManager.givenProvider = givenProvider;\nRequestManager.providers = {\n  WebsocketProvider: require('web3-providers-ws'),\n  HttpProvider: require('web3-providers-http'),\n  IpcProvider: require('web3-providers-ipc')\n};\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n *\n * @param {Object} provider\n * @param {net.Socket} net\n *\n * @returns void\n */\n\nRequestManager.prototype.setProvider = function (provider, net) {\n  var _this = this; // autodetect provider\n\n\n  if (provider && typeof provider === 'string' && this.providers) {\n    // HTTP\n    if (/^http(s)?:\\/\\//i.test(provider)) {\n      provider = new this.providers.HttpProvider(provider); // WS\n    } else if (/^ws(s)?:\\/\\//i.test(provider)) {\n      provider = new this.providers.WebsocketProvider(provider); // IPC\n    } else if (provider && typeof net === 'object' && typeof net.connect === 'function') {\n      provider = new this.providers.IpcProvider(provider, net);\n    } else if (provider) {\n      throw new Error('Can\\'t autodetect provider for \"' + provider + '\"');\n    }\n  } // reset the old one before changing, if still connected\n\n\n  if (this.provider && this.provider.connected) this.clearSubscriptions();\n  this.provider = provider || null; // listen to incoming notifications\n\n  if (this.provider && this.provider.on) {\n    this.provider.on('data', function data(result, deprecatedResult) {\n      result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n      // check for result.method, to prevent old providers errors to pass as result\n\n      if (result.method && _this.subscriptions.has(result.params.subscription)) {\n        _this.subscriptions.get(result.params.subscription).callback(null, result.params.result);\n      }\n    }); // resubscribe if the provider has reconnected\n\n    this.provider.on('connect', function connect() {\n      _this.subscriptions.forEach(function (subscription) {\n        subscription.subscription.resubscribe();\n      });\n    }); // notify all subscriptions about the error condition\n\n    this.provider.on('error', function error(error) {\n      _this.subscriptions.forEach(function (subscription) {\n        subscription.callback(error);\n      });\n    }); // notify all subscriptions about bad close conditions\n\n    this.provider.on('close', function close(event) {\n      if (!_this._isCleanCloseEvent(event) || _this._isIpcCloseError(event)) {\n        _this.subscriptions.forEach(function (subscription) {\n          subscription.callback(errors.ConnectionCloseError(event));\n\n          _this.subscriptions.delete(subscription.subscription.id);\n        });\n\n        if (_this.provider && _this.provider.emit) {\n          _this.provider.emit('error', errors.ConnectionCloseError(event));\n        }\n      }\n\n      if (_this.provider && _this.provider.emit) {\n        _this.provider.emit('end', event);\n      }\n    }); // TODO add end, timeout??\n  }\n};\n/**\n * Asynchronously send request to provider.\n * Prefers to use the `request` method available on the provider as specified in [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).\n * If `request` is not available, falls back to `sendAsync` and `send` respectively.\n * @method send\n * @param {Object} data\n * @param {Function} callback\n */\n\n\nRequestManager.prototype.send = function (data, callback) {\n  callback = callback || function () {};\n\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n\n  const payload = Jsonrpc.toPayload(data.method, data.params);\n\n  const onJsonrpcResult = function (err, result) {\n    if (result && result.id && payload.id !== result.id) {\n      return callback(new Error(`Wrong response id ${result.id} (expected: ${payload.id}) in ${JSON.stringify(payload)}`));\n    }\n\n    if (err) {\n      return callback(err);\n    }\n\n    if (result && result.error) {\n      return callback(errors.ErrorResponse(result));\n    }\n\n    if (!Jsonrpc.isValidResponse(result)) {\n      return callback(errors.InvalidResponse(result));\n    }\n\n    callback(null, result.result);\n  };\n\n  if (this.provider.request) {\n    callbackify(this.provider.request.bind(this.provider))(payload, callback);\n  } else if (this.provider.sendAsync) {\n    this.provider.sendAsync(payload, onJsonrpcResult);\n  } else if (this.provider.send) {\n    this.provider.send(payload, onJsonrpcResult);\n  } else {\n    throw new Error('Provider does not have a request or send method to use.');\n  }\n};\n/**\n * Asynchronously send batch request.\n * Only works if provider supports batch methods through `sendAsync` or `send`.\n * @method sendBatch\n * @param {Array} data - array of payload objects\n * @param {Function} callback\n */\n\n\nRequestManager.prototype.sendBatch = function (data, callback) {\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n\n  var payload = Jsonrpc.toBatchPayload(data);\n  this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!_.isArray(results)) {\n      return callback(errors.InvalidResponse(results));\n    }\n\n    callback(null, results);\n  });\n};\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {Subscription} subscription         the subscription\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */\n\n\nRequestManager.prototype.addSubscription = function (subscription, callback) {\n  if (this.provider.on) {\n    this.subscriptions.set(subscription.id, {\n      callback: callback,\n      subscription: subscription\n    });\n  } else {\n    throw new Error('The provider doesn\\'t support subscriptions: ' + this.provider.constructor.name);\n  }\n};\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */\n\n\nRequestManager.prototype.removeSubscription = function (id, callback) {\n  if (this.subscriptions.has(id)) {\n    var type = this.subscriptions.get(id).subscription.options.type; // remove subscription first to avoid reentry\n\n    this.subscriptions.delete(id); // then, try to actually unsubscribe\n\n    this.send({\n      method: type + '_unsubscribe',\n      params: [id]\n    }, callback);\n    return;\n  }\n\n  if (typeof callback === 'function') {\n    // call the callback if the subscription was already removed\n    callback(null);\n  }\n};\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n */\n\n\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n  var _this = this; // uninstall all subscriptions\n\n\n  if (this.subscriptions.size > 0) {\n    this.subscriptions.forEach(function (value, id) {\n      if (!keepIsSyncing || value.name !== 'syncing') _this.removeSubscription(id);\n    });\n  } //  reset notification callbacks etc.\n\n\n  if (this.provider.reset) this.provider.reset();\n};\n/**\n * Evaluates WS close event\n *\n * @method _isCleanClose\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\n\n\nRequestManager.prototype._isCleanCloseEvent = function (event) {\n  return typeof event === 'object' && ([1000].includes(event.code) || event.wasClean === true);\n};\n/**\n * Detects Ipc close error. The node.net module emits ('close', isException)\n *\n * @method _isIpcCloseError\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\n\n\nRequestManager.prototype._isIpcCloseError = function (event) {\n  return typeof event === 'boolean' && event;\n};\n\nmodule.exports = {\n  Manager: RequestManager,\n  BatchManager: BatchManager\n};","map":{"version":3,"names":["callbackify","require","_","errors","Jsonrpc","BatchManager","givenProvider","RequestManager","provider","net","providers","setProvider","subscriptions","Map","WebsocketProvider","HttpProvider","IpcProvider","prototype","_this","test","connect","Error","connected","clearSubscriptions","on","data","result","deprecatedResult","method","has","params","subscription","get","callback","forEach","resubscribe","error","close","event","_isCleanCloseEvent","_isIpcCloseError","ConnectionCloseError","delete","id","emit","send","InvalidProvider","payload","toPayload","onJsonrpcResult","err","JSON","stringify","ErrorResponse","isValidResponse","InvalidResponse","request","bind","sendAsync","sendBatch","toBatchPayload","results","isArray","addSubscription","set","constructor","name","removeSubscription","type","options","keepIsSyncing","size","value","reset","includes","code","wasClean","module","exports","Manager"],"sources":["F:/Games/slotmachinereact/node_modules/ganache-core/node_modules/web3-core-requestmanager/src/index.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\n\nconst { callbackify } = require('util');\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar Jsonrpc = require('./jsonrpc.js');\nvar BatchManager = require('./batch.js');\nvar givenProvider = require('./givenProvider.js');\n\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n *\n * @param {string|Object}provider\n * @param {Net.Socket} net\n *\n * @constructor\n */\nvar RequestManager = function RequestManager(provider, net) {\n    this.provider = null;\n    this.providers = RequestManager.providers;\n\n    this.setProvider(provider, net);\n    this.subscriptions = new Map();\n};\n\n\nRequestManager.givenProvider = givenProvider;\n\nRequestManager.providers = {\n    WebsocketProvider: require('web3-providers-ws'),\n    HttpProvider: require('web3-providers-http'),\n    IpcProvider: require('web3-providers-ipc')\n};\n\n\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n *\n * @param {Object} provider\n * @param {net.Socket} net\n *\n * @returns void\n */\nRequestManager.prototype.setProvider = function (provider, net) {\n    var _this = this;\n\n    // autodetect provider\n    if (provider && typeof provider === 'string' && this.providers) {\n\n        // HTTP\n        if (/^http(s)?:\\/\\//i.test(provider)) {\n            provider = new this.providers.HttpProvider(provider);\n\n            // WS\n        } else if (/^ws(s)?:\\/\\//i.test(provider)) {\n            provider = new this.providers.WebsocketProvider(provider);\n\n            // IPC\n        } else if (provider && typeof net === 'object' && typeof net.connect === 'function') {\n            provider = new this.providers.IpcProvider(provider, net);\n\n        } else if (provider) {\n            throw new Error('Can\\'t autodetect provider for \"' + provider + '\"');\n        }\n    }\n\n\n    // reset the old one before changing, if still connected\n    if(this.provider && this.provider.connected)\n        this.clearSubscriptions();\n\n    this.provider = provider || null;\n\n    // listen to incoming notifications\n    if (this.provider && this.provider.on) {\n        this.provider.on('data', function data(result, deprecatedResult) {\n            result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n\n            // check for result.method, to prevent old providers errors to pass as result\n            if (result.method && _this.subscriptions.has(result.params.subscription)) {\n                _this.subscriptions.get(result.params.subscription).callback(null, result.params.result);\n            }\n        });\n\n        // resubscribe if the provider has reconnected\n        this.provider.on('connect', function connect() {\n            _this.subscriptions.forEach(function (subscription) {\n                subscription.subscription.resubscribe();\n            });\n        });\n\n        // notify all subscriptions about the error condition\n        this.provider.on('error', function error(error) {\n            _this.subscriptions.forEach(function (subscription) {\n                subscription.callback(error);\n            });\n        });\n\n        // notify all subscriptions about bad close conditions\n        this.provider.on('close', function close(event) {\n            if (!_this._isCleanCloseEvent(event) || _this._isIpcCloseError(event)){\n                _this.subscriptions.forEach(function (subscription) {\n                    subscription.callback(errors.ConnectionCloseError(event));\n                    _this.subscriptions.delete(subscription.subscription.id);\n                });\n\n                if(_this.provider && _this.provider.emit){\n                    _this.provider.emit('error', errors.ConnectionCloseError(event));\n                }\n            }\n            if(_this.provider && _this.provider.emit){\n                _this.provider.emit('end', event);\n            }\n        });\n\n        // TODO add end, timeout??\n    }\n};\n\n/**\n * Asynchronously send request to provider.\n * Prefers to use the `request` method available on the provider as specified in [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).\n * If `request` is not available, falls back to `sendAsync` and `send` respectively.\n * @method send\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.send = function (data, callback) {\n    callback = callback || function () {};\n\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    const payload = Jsonrpc.toPayload(data.method, data.params);\n\n    const onJsonrpcResult = function (err, result) {\n        if(result && result.id && payload.id !== result.id) {\n            return callback(new Error(`Wrong response id ${result.id} (expected: ${payload.id}) in ${JSON.stringify(payload)}`));\n        }\n\n        if (err) {\n            return callback(err);\n        }\n\n        if (result && result.error) {\n            return callback(errors.ErrorResponse(result));\n        }\n\n        if (!Jsonrpc.isValidResponse(result)) {\n            return callback(errors.InvalidResponse(result));\n        }\n\n        callback(null, result.result);\n    };\n\n    if (this.provider.request) {\n        callbackify(this.provider.request.bind(this.provider))(payload, callback);\n    } else if (this.provider.sendAsync) {\n        this.provider.sendAsync(payload, onJsonrpcResult);\n    } else if (this.provider.send) {\n        this.provider.send(payload, onJsonrpcResult);\n    } else {\n        throw new Error('Provider does not have a request or send method to use.');\n    }\n};\n\n/**\n * Asynchronously send batch request.\n * Only works if provider supports batch methods through `sendAsync` or `send`.\n * @method sendBatch\n * @param {Array} data - array of payload objects\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.toBatchPayload(data);\n    this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n        if (err) {\n            return callback(err);\n        }\n\n        if (!_.isArray(results)) {\n            return callback(errors.InvalidResponse(results));\n        }\n\n        callback(null, results);\n    });\n};\n\n\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {Subscription} subscription         the subscription\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */\nRequestManager.prototype.addSubscription = function (subscription, callback) {\n    if (this.provider.on) {\n        this.subscriptions.set(\n            subscription.id,\n            {\n                callback: callback,\n                subscription: subscription\n            }\n        );\n    } else {\n        throw new Error('The provider doesn\\'t support subscriptions: '+ this.provider.constructor.name);\n    }\n};\n\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */\nRequestManager.prototype.removeSubscription = function (id, callback) {\n    if (this.subscriptions.has(id)) {\n        var type = this.subscriptions.get(id).subscription.options.type;\n\n        // remove subscription first to avoid reentry\n        this.subscriptions.delete(id);\n\n        // then, try to actually unsubscribe\n        this.send({\n            method: type + '_unsubscribe',\n            params: [id]\n        }, callback);\n\n        return;\n    }\n\n    if (typeof callback === 'function') {\n        // call the callback if the subscription was already removed\n        callback(null);\n    }\n};\n\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n */\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n    var _this = this;\n\n    // uninstall all subscriptions\n    if (this.subscriptions.size > 0) {\n        this.subscriptions.forEach(function (value, id) {\n            if (!keepIsSyncing || value.name !== 'syncing')\n                _this.removeSubscription(id);\n        });\n    }\n\n    //  reset notification callbacks etc.\n    if(this.provider.reset)\n        this.provider.reset();\n};\n\n/**\n * Evaluates WS close event\n *\n * @method _isCleanClose\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isCleanCloseEvent = function (event) {\n    return typeof event === 'object' && ([1000].includes(event.code) || event.wasClean === true);\n};\n\n/**\n * Detects Ipc close error. The node.net module emits ('close', isException)\n *\n * @method _isIpcCloseError\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isIpcCloseError = function (event) {\n    return typeof event === 'boolean' && event;\n};\n\nmodule.exports = {\n    Manager: RequestManager,\n    BatchManager: BatchManager\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}