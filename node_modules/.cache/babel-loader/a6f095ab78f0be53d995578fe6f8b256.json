{"ast":null,"code":"\"use strict\";\n\nvar rlp = require('rlp');\n\nvar ethUtil = require('ethereumjs-util');\n\nmodule.exports = TrieNode;\n\nfunction TrieNode(type, key, value) {\n  if (Array.isArray(type)) {\n    // parse raw node\n    this.parseNode(type);\n  } else {\n    this.type = type;\n\n    if (type === 'branch') {\n      var values = key;\n      this.raw = Array.apply(null, Array(17));\n\n      if (values) {\n        values.forEach(function (keyVal) {\n          this.set.apply(this, keyVal);\n        });\n      }\n    } else {\n      this.raw = Array(2);\n      this.setValue(value);\n      this.setKey(key);\n    }\n  }\n}\n\nTrieNode.isRawNode = isRawNode;\nTrieNode.addHexPrefix = addHexPrefix;\nTrieNode.removeHexPrefix = removeHexPrefix;\nTrieNode.isTerminator = isTerminator;\nTrieNode.stringToNibbles = stringToNibbles;\nTrieNode.nibblesToBuffer = nibblesToBuffer;\nTrieNode.getNodeType = getNodeType;\nObject.defineProperty(TrieNode.prototype, 'value', {\n  get: function get() {\n    return this.getValue();\n  },\n  set: function set(v) {\n    this.setValue(v);\n  }\n});\nObject.defineProperty(TrieNode.prototype, 'key', {\n  get: function get() {\n    return this.getKey();\n  },\n  set: function set(k) {\n    this.setKey(k);\n  }\n}); // parses a raw node\n\nTrieNode.prototype.parseNode = function (rawNode) {\n  this.raw = rawNode;\n  this.type = getNodeType(rawNode);\n}; // sets the value of the node\n\n\nTrieNode.prototype.setValue = function (key, value) {\n  if (this.type !== 'branch') {\n    this.raw[1] = key;\n  } else {\n    if (arguments.length === 1) {\n      value = key;\n      key = 16;\n    }\n\n    this.raw[key] = value;\n  }\n};\n\nTrieNode.prototype.getValue = function (key) {\n  if (this.type === 'branch') {\n    if (arguments.length === 0) {\n      key = 16;\n    }\n\n    var val = this.raw[key];\n\n    if (val !== null && val !== undefined && val.length !== 0) {\n      return val;\n    }\n  } else {\n    return this.raw[1];\n  }\n};\n\nTrieNode.prototype.setKey = function (key) {\n  if (this.type !== 'branch') {\n    if (Buffer.isBuffer(key)) {\n      key = stringToNibbles(key);\n    } else {\n      key = key.slice(0); // copy the key\n    }\n\n    key = addHexPrefix(key, this.type === 'leaf');\n    this.raw[0] = nibblesToBuffer(key);\n  }\n}; // returns the key as a nibble\n\n\nTrieNode.prototype.getKey = function () {\n  if (this.type !== 'branch') {\n    var key = this.raw[0];\n    key = removeHexPrefix(stringToNibbles(key));\n    return key;\n  }\n};\n\nTrieNode.prototype.serialize = function () {\n  return rlp.encode(this.raw);\n};\n\nTrieNode.prototype.hash = function () {\n  return ethUtil.sha3(this.serialize());\n};\n\nTrieNode.prototype.toString = function () {\n  var out = this.type;\n  out += ': [';\n  this.raw.forEach(function (el) {\n    if (Buffer.isBuffer(el)) {\n      out += el.toString('hex') + ', ';\n    } else if (el) {\n      out += 'object, ';\n    } else {\n      out += 'empty, ';\n    }\n  });\n  out = out.slice(0, -2);\n  out += ']';\n  return out;\n};\n\nTrieNode.prototype.getChildren = function () {\n  var children = [];\n\n  switch (this.type) {\n    case 'leaf':\n      // no children\n      break;\n\n    case 'extention':\n      // one child\n      children.push([this.key, this.getValue()]);\n      break;\n\n    case 'branch':\n      for (var index = 0, end = 16; index < end; index++) {\n        var value = this.getValue(index);\n\n        if (value) {\n          children.push([[index], value]);\n        }\n      }\n\n      break;\n  }\n\n  return children;\n};\n/**\n * @param {Array} dataArr\n * @returns {Buffer} - returns buffer of encoded data\n * hexPrefix\n **/\n\n\nfunction addHexPrefix(key, terminator) {\n  // odd\n  if (key.length % 2) {\n    key.unshift(1);\n  } else {\n    // even\n    key.unshift(0);\n    key.unshift(0);\n  }\n\n  if (terminator) {\n    key[0] += 2;\n  }\n\n  return key;\n}\n\nfunction removeHexPrefix(val) {\n  if (val[0] % 2) {\n    val = val.slice(1);\n  } else {\n    val = val.slice(2);\n  }\n\n  return val;\n}\n/**\n * Determines if a key has Arnold Schwarzenegger in it.\n * @method isTerminator\n * @private\n * @param {Array} key - an hexprefixed array of nibbles\n */\n\n\nfunction isTerminator(key) {\n  return key[0] > 1;\n}\n/**\n * Converts a string OR a buffer to a nibble array.\n * @method stringToNibbles\n * @private\n * @param {Buffer| String} key\n */\n\n\nfunction stringToNibbles(key) {\n  var bkey = new Buffer(key);\n  var nibbles = [];\n\n  for (var i = 0; i < bkey.length; i++) {\n    var q = i * 2;\n    nibbles[q] = bkey[i] >> 4;\n    ++q;\n    nibbles[q] = bkey[i] % 16;\n  }\n\n  return nibbles;\n}\n/**\n * Converts a nibble array into a buffer.\n * @method nibblesToBuffer\n * @private\n * @param arr\n */\n\n\nfunction nibblesToBuffer(arr) {\n  var buf = new Buffer(arr.length / 2);\n\n  for (var i = 0; i < buf.length; i++) {\n    var q = i * 2;\n    buf[i] = (arr[q] << 4) + arr[++q];\n  }\n\n  return buf;\n}\n/**\n * Determines the node type.\n * @private\n * @returns {String} - the node type\n *   - leaf - if the node is a leaf\n *   - branch - if the node is a branch\n *   - extention - if the node is an extention\n *   - unknown - if something else got borked\n */\n\n\nfunction getNodeType(node) {\n  if (node.length === 17) {\n    return 'branch';\n  } else if (node.length === 2) {\n    var key = stringToNibbles(node[0]);\n\n    if (isTerminator(key)) {\n      return 'leaf';\n    }\n\n    return 'extention';\n  }\n}\n\nfunction isRawNode(node) {\n  return Array.isArray(node) && !Buffer.isBuffer(node);\n}","map":{"version":3,"names":["rlp","require","ethUtil","module","exports","TrieNode","type","key","value","Array","isArray","parseNode","values","raw","apply","forEach","keyVal","set","setValue","setKey","isRawNode","addHexPrefix","removeHexPrefix","isTerminator","stringToNibbles","nibblesToBuffer","getNodeType","Object","defineProperty","prototype","get","getValue","v","getKey","k","rawNode","arguments","length","val","undefined","Buffer","isBuffer","slice","serialize","encode","hash","sha3","toString","out","el","getChildren","children","push","index","end","terminator","unshift","bkey","nibbles","i","q","arr","buf","node"],"sources":["F:/Games/slotmachinereact/node_modules/ganache-core/node_modules/merkle-patricia-tree/trieNode.js"],"sourcesContent":["\"use strict\";\n\nvar rlp = require('rlp');\n\nvar ethUtil = require('ethereumjs-util');\n\nmodule.exports = TrieNode;\n\nfunction TrieNode(type, key, value) {\n  if (Array.isArray(type)) {\n    // parse raw node\n    this.parseNode(type);\n  } else {\n    this.type = type;\n\n    if (type === 'branch') {\n      var values = key;\n      this.raw = Array.apply(null, Array(17));\n\n      if (values) {\n        values.forEach(function (keyVal) {\n          this.set.apply(this, keyVal);\n        });\n      }\n    } else {\n      this.raw = Array(2);\n      this.setValue(value);\n      this.setKey(key);\n    }\n  }\n}\n\nTrieNode.isRawNode = isRawNode;\nTrieNode.addHexPrefix = addHexPrefix;\nTrieNode.removeHexPrefix = removeHexPrefix;\nTrieNode.isTerminator = isTerminator;\nTrieNode.stringToNibbles = stringToNibbles;\nTrieNode.nibblesToBuffer = nibblesToBuffer;\nTrieNode.getNodeType = getNodeType;\nObject.defineProperty(TrieNode.prototype, 'value', {\n  get: function get() {\n    return this.getValue();\n  },\n  set: function set(v) {\n    this.setValue(v);\n  }\n});\nObject.defineProperty(TrieNode.prototype, 'key', {\n  get: function get() {\n    return this.getKey();\n  },\n  set: function set(k) {\n    this.setKey(k);\n  }\n}); // parses a raw node\n\nTrieNode.prototype.parseNode = function (rawNode) {\n  this.raw = rawNode;\n  this.type = getNodeType(rawNode);\n}; // sets the value of the node\n\n\nTrieNode.prototype.setValue = function (key, value) {\n  if (this.type !== 'branch') {\n    this.raw[1] = key;\n  } else {\n    if (arguments.length === 1) {\n      value = key;\n      key = 16;\n    }\n\n    this.raw[key] = value;\n  }\n};\n\nTrieNode.prototype.getValue = function (key) {\n  if (this.type === 'branch') {\n    if (arguments.length === 0) {\n      key = 16;\n    }\n\n    var val = this.raw[key];\n\n    if (val !== null && val !== undefined && val.length !== 0) {\n      return val;\n    }\n  } else {\n    return this.raw[1];\n  }\n};\n\nTrieNode.prototype.setKey = function (key) {\n  if (this.type !== 'branch') {\n    if (Buffer.isBuffer(key)) {\n      key = stringToNibbles(key);\n    } else {\n      key = key.slice(0); // copy the key\n    }\n\n    key = addHexPrefix(key, this.type === 'leaf');\n    this.raw[0] = nibblesToBuffer(key);\n  }\n}; // returns the key as a nibble\n\n\nTrieNode.prototype.getKey = function () {\n  if (this.type !== 'branch') {\n    var key = this.raw[0];\n    key = removeHexPrefix(stringToNibbles(key));\n    return key;\n  }\n};\n\nTrieNode.prototype.serialize = function () {\n  return rlp.encode(this.raw);\n};\n\nTrieNode.prototype.hash = function () {\n  return ethUtil.sha3(this.serialize());\n};\n\nTrieNode.prototype.toString = function () {\n  var out = this.type;\n  out += ': [';\n  this.raw.forEach(function (el) {\n    if (Buffer.isBuffer(el)) {\n      out += el.toString('hex') + ', ';\n    } else if (el) {\n      out += 'object, ';\n    } else {\n      out += 'empty, ';\n    }\n  });\n  out = out.slice(0, -2);\n  out += ']';\n  return out;\n};\n\nTrieNode.prototype.getChildren = function () {\n  var children = [];\n\n  switch (this.type) {\n    case 'leaf':\n      // no children\n      break;\n\n    case 'extention':\n      // one child\n      children.push([this.key, this.getValue()]);\n      break;\n\n    case 'branch':\n      for (var index = 0, end = 16; index < end; index++) {\n        var value = this.getValue(index);\n\n        if (value) {\n          children.push([[index], value]);\n        }\n      }\n\n      break;\n  }\n\n  return children;\n};\n/**\n * @param {Array} dataArr\n * @returns {Buffer} - returns buffer of encoded data\n * hexPrefix\n **/\n\n\nfunction addHexPrefix(key, terminator) {\n  // odd\n  if (key.length % 2) {\n    key.unshift(1);\n  } else {\n    // even\n    key.unshift(0);\n    key.unshift(0);\n  }\n\n  if (terminator) {\n    key[0] += 2;\n  }\n\n  return key;\n}\n\nfunction removeHexPrefix(val) {\n  if (val[0] % 2) {\n    val = val.slice(1);\n  } else {\n    val = val.slice(2);\n  }\n\n  return val;\n}\n/**\n * Determines if a key has Arnold Schwarzenegger in it.\n * @method isTerminator\n * @private\n * @param {Array} key - an hexprefixed array of nibbles\n */\n\n\nfunction isTerminator(key) {\n  return key[0] > 1;\n}\n/**\n * Converts a string OR a buffer to a nibble array.\n * @method stringToNibbles\n * @private\n * @param {Buffer| String} key\n */\n\n\nfunction stringToNibbles(key) {\n  var bkey = new Buffer(key);\n  var nibbles = [];\n\n  for (var i = 0; i < bkey.length; i++) {\n    var q = i * 2;\n    nibbles[q] = bkey[i] >> 4;\n    ++q;\n    nibbles[q] = bkey[i] % 16;\n  }\n\n  return nibbles;\n}\n/**\n * Converts a nibble array into a buffer.\n * @method nibblesToBuffer\n * @private\n * @param arr\n */\n\n\nfunction nibblesToBuffer(arr) {\n  var buf = new Buffer(arr.length / 2);\n\n  for (var i = 0; i < buf.length; i++) {\n    var q = i * 2;\n    buf[i] = (arr[q] << 4) + arr[++q];\n  }\n\n  return buf;\n}\n/**\n * Determines the node type.\n * @private\n * @returns {String} - the node type\n *   - leaf - if the node is a leaf\n *   - branch - if the node is a branch\n *   - extention - if the node is an extention\n *   - unknown - if something else got borked\n */\n\n\nfunction getNodeType(node) {\n  if (node.length === 17) {\n    return 'branch';\n  } else if (node.length === 2) {\n    var key = stringToNibbles(node[0]);\n\n    if (isTerminator(key)) {\n      return 'leaf';\n    }\n\n    return 'extention';\n  }\n}\n\nfunction isRawNode(node) {\n  return Array.isArray(node) && !Buffer.isBuffer(node);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}