{"ast":null,"code":"/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll || flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message') {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};","map":{"version":3,"names":["module","exports","transferFlags","assertion","object","includeAll","flags","__flags","Object","create","arguments","length","flag"],"sources":["F:/Games/slotmachinereact/node_modules/chai/lib/chai/utils/transferFlags.js"],"sourcesContent":["/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,SAAvB,EAAkCC,MAAlC,EAA0CC,UAA1C,EAAsD;EACrE,IAAIC,KAAK,GAAGH,SAAS,CAACI,OAAV,KAAsBJ,SAAS,CAACI,OAAV,GAAoBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA1C,CAAZ;;EAEA,IAAI,CAACL,MAAM,CAACG,OAAZ,EAAqB;IACnBH,MAAM,CAACG,OAAP,GAAiBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAjB;EACD;;EAEDJ,UAAU,GAAGK,SAAS,CAACC,MAAV,KAAqB,CAArB,GAAyBN,UAAzB,GAAsC,IAAnD;;EAEA,KAAK,IAAIO,IAAT,IAAiBN,KAAjB,EAAwB;IACtB,IAAID,UAAU,IACTO,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,MAA9B,IAAwCA,IAAI,KAAK,UAAjD,IAA+DA,IAAI,IAAI,SAD5E,EACwF;MACtFR,MAAM,CAACG,OAAP,CAAeK,IAAf,IAAuBN,KAAK,CAACM,IAAD,CAA5B;IACD;EACF;AACF,CAfD"},"metadata":{},"sourceType":"script"}