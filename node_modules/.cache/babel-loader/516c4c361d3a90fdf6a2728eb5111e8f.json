{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeChain = void 0;\n\nconst ts_generator_1 = require(\"ts-generator\");\n\nconst _ = require(\"lodash\");\n\nconst lodash_1 = require(\"lodash\");\n\nconst debug_1 = require(\"./utils/debug\");\n\nconst path_1 = require(\"path\");\n/**\n * Proxies calls to real implementation that is selected based on target parameter.\n */\n\n\nclass TypeChain extends ts_generator_1.TsGeneratorPlugin {\n  constructor(ctx) {\n    super(ctx);\n    this.name = 'TypeChain';\n    this.realImpl = this.findRealImpl(ctx);\n  }\n\n  findRealImpl(ctx) {\n    const target = ctx.rawConfig.target;\n\n    if (!target) {\n      throw new Error(`Please provide --target parameter!`);\n    }\n\n    const possiblePaths = [process.env.NODE_ENV === 'test' && `../../typechain-target-${target}/lib/index`, `typechain-target-${target}`, `@typechain/${target}`, ensureAbsPath(target)];\n\n    const moduleInfo = _(possiblePaths).compact().map(tryRequire).compact().first();\n\n    if (!moduleInfo || !moduleInfo.module.default) {\n      throw new Error(`Couldn't find ${ctx.rawConfig.target}. Tried loading: ${lodash_1.compact(possiblePaths).join(', ')}.\\nPerhaps you forgot to install typechain-target-${target}?`);\n    }\n\n    debug_1.debug('Plugin found at', moduleInfo.path);\n    return new moduleInfo.module.default(ctx);\n  }\n\n  beforeRun() {\n    return this.realImpl.beforeRun();\n  }\n\n  transformFile(file) {\n    return this.realImpl.transformFile(file);\n  }\n\n  afterRun() {\n    return this.realImpl.afterRun();\n  }\n\n}\n\nexports.TypeChain = TypeChain;\n\nfunction tryRequire(name) {\n  try {\n    const module = {\n      module: require(name),\n      name,\n      path: require.resolve(name)\n    };\n    debug_1.debug('Load successfully: ', name);\n    return module;\n  } catch (e) {\n    debug_1.debug(\"Couldn't load: \", name);\n  }\n}\n\nfunction ensureAbsPath(path) {\n  if (path_1.isAbsolute(path)) {\n    return path;\n  }\n\n  return path_1.join(process.cwd(), path);\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;AAOA;;;;;AAGA,MAAaA,SAAb,SAA+BC,gCAA/B,CAAgD;EAI9CC,YAAYC,GAAZ,EAAwC;IACtC,MAAMA,GAAN;IAJF,YAAO,WAAP;IAME,KAAKC,QAAL,GAAgB,KAAKC,YAAL,CAAkBF,GAAlB,CAAhB;EACD;;EAEOE,YAAY,CAACF,GAAD,EAA6B;IAC/C,MAAMG,MAAM,GAAGH,GAAG,CAACI,SAAJ,CAAcD,MAA7B;;IACA,IAAI,CAACA,MAAL,EAAa;MACX,MAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;IACD;;IAED,MAAMC,aAAa,GAAG,CACpBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAAzB,IAAmC,0BAA0BN,MAAM,YAD/C,EAEpB,oBAAoBA,MAAM,EAFN,EAGpB,cAAcA,MAAM,EAHA,EAIpBO,aAAa,CAACP,MAAD,CAJO,CAAtB;;IAOA,MAAMQ,UAAU,GAAGC,CAAC,CAACN,aAAD,CAAD,CAAiBO,OAAjB,GAA2BC,GAA3B,CAA+BC,UAA/B,EAA2CF,OAA3C,GAAqDG,KAArD,EAAnB;;IAEA,IAAI,CAACL,UAAD,IAAe,CAACA,UAAU,CAACM,MAAX,CAAkBC,OAAtC,EAA+C;MAC7C,MAAM,IAAIb,KAAJ,CACJ,iBAAiBL,GAAG,CAACI,SAAJ,CAAcD,MAAM,oBAAoBgB,iBAAQb,aAAR,EAAuBc,IAAvB,CACvD,IADuD,CAExD,qDAAqDjB,MAAM,GAHxD,CAAN;IAKD;;IAEDkB,cAAM,iBAAN,EAAyBV,UAAU,CAACW,IAApC;IAEA,OAAO,IAAIX,UAAU,CAACM,MAAX,CAAkBC,OAAtB,CAA8BlB,GAA9B,CAAP;EACD;;EAEDuB,SAAS;IACP,OAAO,KAAKtB,QAAL,CAAcsB,SAAd,EAAP;EACD;;EAEDC,aAAa,CAACC,IAAD,EAAgB;IAC3B,OAAO,KAAKxB,QAAL,CAAcuB,aAAd,CAA4BC,IAA5B,CAAP;EACD;;EAEDC,QAAQ;IACN,OAAO,KAAKzB,QAAL,CAAcyB,QAAd,EAAP;EACD;;AAhD6C;;AAAhDC;;AAmDA,SAASZ,UAAT,CAAoBa,IAApB,EAAgC;EAC9B,IAAI;IACF,MAAMX,MAAM,GAAG;MACbA,MAAM,EAAEY,OAAO,CAACD,IAAD,CADF;MAEbA,IAFa;MAGbN,IAAI,EAAEO,OAAO,CAACC,OAAR,CAAgBF,IAAhB;IAHO,CAAf;IAKAP,cAAM,qBAAN,EAA6BO,IAA7B;IACA,OAAOX,MAAP;EACD,CARD,CAQE,OAAOc,CAAP,EAAU;IACVV,cAAM,iBAAN,EAAyBO,IAAzB;EACD;AACF;;AAED,SAASlB,aAAT,CAAuBY,IAAvB,EAAmC;EACjC,IAAIU,kBAAWV,IAAX,CAAJ,EAAsB;IACpB,OAAOA,IAAP;EACD;;EACD,OAAOU,YAAKzB,OAAO,CAAC0B,GAAR,EAAL,EAAoBX,IAApB,CAAP;AACD","names":["TypeChain","ts_generator_1","constructor","ctx","realImpl","findRealImpl","target","rawConfig","Error","possiblePaths","process","env","NODE_ENV","ensureAbsPath","moduleInfo","_","compact","map","tryRequire","first","module","default","lodash_1","join","debug_1","path","beforeRun","transformFile","file","afterRun","exports","name","require","resolve","e","path_1","cwd"],"sources":["F:\\Games\\slotmachinereact\\node_modules\\typechain\\src\\TypeChain.ts"],"sourcesContent":["import { TsGeneratorPlugin, TFileDesc, TContext, TOutput } from 'ts-generator'\nimport _ = require('lodash')\nimport { compact } from 'lodash'\nimport { debug } from './utils/debug'\nimport { isAbsolute, join } from 'path'\n\nexport interface ITypeChainCfg {\n  target: string\n  outDir?: string\n}\n\n/**\n * Proxies calls to real implementation that is selected based on target parameter.\n */\nexport class TypeChain extends TsGeneratorPlugin {\n  name = 'TypeChain'\n  private realImpl: TsGeneratorPlugin\n\n  constructor(ctx: TContext<ITypeChainCfg>) {\n    super(ctx)\n\n    this.realImpl = this.findRealImpl(ctx)\n  }\n\n  private findRealImpl(ctx: TContext<ITypeChainCfg>): TsGeneratorPlugin {\n    const target = ctx.rawConfig.target\n    if (!target) {\n      throw new Error(`Please provide --target parameter!`)\n    }\n\n    const possiblePaths = [\n      process.env.NODE_ENV === 'test' && `../../typechain-target-${target}/lib/index`, // only for tests\n      `typechain-target-${target}`, //external module\n      `@typechain/${target}`, //external module\n      ensureAbsPath(target), // path\n    ]\n\n    const moduleInfo = _(possiblePaths).compact().map(tryRequire).compact().first()\n\n    if (!moduleInfo || !moduleInfo.module.default) {\n      throw new Error(\n        `Couldn't find ${ctx.rawConfig.target}. Tried loading: ${compact(possiblePaths).join(\n          ', ',\n        )}.\\nPerhaps you forgot to install typechain-target-${target}?`,\n      )\n    }\n\n    debug('Plugin found at', moduleInfo.path)\n\n    return new moduleInfo.module.default(ctx)\n  }\n\n  beforeRun(): TOutput | Promise<TOutput> {\n    return this.realImpl.beforeRun()\n  }\n\n  transformFile(file: TFileDesc): TOutput | Promise<TOutput> {\n    return this.realImpl.transformFile(file)\n  }\n\n  afterRun(): TOutput | Promise<TOutput> {\n    return this.realImpl.afterRun()\n  }\n}\n\nfunction tryRequire(name: string): { module: any; name: string; path: string } | undefined {\n  try {\n    const module = {\n      module: require(name),\n      name,\n      path: require.resolve(name),\n    }\n    debug('Load successfully: ', name)\n    return module\n  } catch (e) {\n    debug(\"Couldn't load: \", name)\n  }\n}\n\nfunction ensureAbsPath(path: string): string {\n  if (isAbsolute(path)) {\n    return path\n  }\n  return join(process.cwd(), path)\n}\n"]},"metadata":{},"sourceType":"script"}