{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar promisify = require('util.promisify');\n/**\n * Promisified wrapper around [[StateManager]]\n * @ignore\n */\n\n\nvar PStateManager =\n/** @class */\nfunction () {\n  function PStateManager(wrapped) {\n    this._wrapped = wrapped; // We cache these promisified function as they are called lots of times during the VM execution,\n    // and promisifying them each time has degrades its performance.\n\n    this.getAccount = promisify(this._wrapped.getAccount.bind(this._wrapped));\n    this.putAccount = promisify(this._wrapped.putAccount.bind(this._wrapped));\n    this.putContractCode = promisify(this._wrapped.putContractCode.bind(this._wrapped));\n    this.getContractCode = promisify(this._wrapped.getContractCode.bind(this._wrapped));\n    this.getContractStorage = promisify(this._wrapped.getContractStorage.bind(this._wrapped));\n    this.getOriginalContractStorage = promisify(this._wrapped.getOriginalContractStorage.bind(this._wrapped));\n    this.putContractStorage = promisify(this._wrapped.putContractStorage.bind(this._wrapped));\n    this.clearContractStorage = promisify(this._wrapped.clearContractStorage.bind(this._wrapped));\n    this.checkpoint = promisify(this._wrapped.checkpoint.bind(this._wrapped));\n    this.commit = promisify(this._wrapped.commit.bind(this._wrapped));\n    this.revert = promisify(this._wrapped.revert.bind(this._wrapped));\n    this.getStateRoot = promisify(this._wrapped.getStateRoot.bind(this._wrapped));\n    this.setStateRoot = promisify(this._wrapped.setStateRoot.bind(this._wrapped));\n    this.dumpStorage = promisify(this._wrapped.dumpStorage.bind(this._wrapped));\n    this.hasGenesisState = promisify(this._wrapped.hasGenesisState.bind(this._wrapped));\n    this.generateCanonicalGenesis = promisify(this._wrapped.generateCanonicalGenesis.bind(this._wrapped));\n    this.generateGenesis = promisify(this._wrapped.generateGenesis.bind(this._wrapped));\n    this.accountIsEmpty = promisify(this._wrapped.accountIsEmpty.bind(this._wrapped));\n    this.cleanupTouchedAccounts = promisify(this._wrapped.cleanupTouchedAccounts.bind(this._wrapped));\n  }\n\n  PStateManager.prototype.copy = function () {\n    return new PStateManager(this._wrapped.copy());\n  };\n\n  return PStateManager;\n}();\n\nexports.default = PStateManager;","map":{"version":3,"mappings":"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","names":["promisify","require","wrapped","_wrapped","getAccount","bind","putAccount","putContractCode","getContractCode","getContractStorage","getOriginalContractStorage","putContractStorage","clearContractStorage","checkpoint","commit","revert","getStateRoot","setStateRoot","dumpStorage","hasGenesisState","generateCanonicalGenesis","generateGenesis","accountIsEmpty","cleanupTouchedAccounts","PStateManager","copy"],"sources":["../../lib/state/promisified.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}