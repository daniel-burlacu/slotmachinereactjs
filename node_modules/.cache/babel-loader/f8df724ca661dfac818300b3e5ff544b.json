{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBalanceChanges = exports.supportChangeEtherBalances = void 0;\n\nconst ethers_1 = require(\"ethers\");\n\nconst account_1 = require(\"./misc/account\");\n\nconst balance_1 = require(\"./misc/balance\");\n\nfunction supportChangeEtherBalances(Assertion) {\n  Assertion.addMethod('changeEtherBalances', function (accounts, balanceChanges, options) {\n    const subject = this._obj;\n    const derivedPromise = Promise.all([getBalanceChanges(subject, accounts, options), balance_1.getAddresses(accounts)]).then(_ref => {\n      let [actualChanges, accountAddresses] = _ref;\n      this.assert(actualChanges.every((change, ind) => change.eq(ethers_1.BigNumber.from(balanceChanges[ind]))), `Expected ${accountAddresses} to change balance by ${balanceChanges} wei, ` + `but it has changed by ${actualChanges} wei`, `Expected ${accountAddresses} to not change balance by ${balanceChanges} wei,`, balanceChanges.map(balanceChange => balanceChange.toString()), actualChanges.map(actualChange => actualChange.toString()));\n    });\n    this.then = derivedPromise.then.bind(derivedPromise);\n    this.catch = derivedPromise.catch.bind(derivedPromise);\n    this.promise = derivedPromise;\n    return this;\n  });\n}\n\nexports.supportChangeEtherBalances = supportChangeEtherBalances;\n\nasync function getBalanceChanges(transaction, accounts, options) {\n  let txResponse;\n\n  if (typeof transaction === 'function') {\n    txResponse = await transaction();\n  } else {\n    txResponse = transaction;\n  }\n\n  const txReceipt = await txResponse.wait();\n  const txBlockNumber = txReceipt.blockNumber;\n  const balancesAfter = await balance_1.getBalances(accounts, txBlockNumber);\n  const balancesBefore = await balance_1.getBalances(accounts, txBlockNumber - 1);\n  const txFees = await getTxFees(accounts, txResponse, options);\n  return balancesAfter.map((balance, ind) => balance.add(txFees[ind]).sub(balancesBefore[ind]));\n}\n\nexports.getBalanceChanges = getBalanceChanges;\n\nasync function getTxFees(accounts, txResponse, options) {\n  return Promise.all(accounts.map(async account => {\n    var _a;\n\n    if ((options === null || options === void 0 ? void 0 : options.includeFee) !== true && (await account_1.getAddressOf(account)) === txResponse.from) {\n      const txReceipt = await txResponse.wait();\n      const gasPrice = (_a = txResponse.gasPrice) !== null && _a !== void 0 ? _a : txReceipt.effectiveGasPrice;\n      const gasUsed = txReceipt.gasUsed;\n      const txFee = gasPrice.mul(gasUsed);\n      return txFee;\n    }\n\n    return 0;\n  }));\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getBalanceChanges","supportChangeEtherBalances","ethers_1","require","account_1","balance_1","Assertion","addMethod","accounts","balanceChanges","options","subject","_obj","derivedPromise","Promise","all","getAddresses","then","actualChanges","accountAddresses","assert","every","change","ind","eq","BigNumber","from","map","balanceChange","toString","actualChange","bind","catch","promise","transaction","txResponse","txReceipt","wait","txBlockNumber","blockNumber","balancesAfter","getBalances","balancesBefore","txFees","getTxFees","balance","add","sub","account","_a","includeFee","getAddressOf","gasPrice","effectiveGasPrice","gasUsed","txFee","mul"],"sources":["F:/Games/slotmachinereact/node_modules/@ethereum-waffle/chai/dist/cjs/matchers/changeEtherBalances.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBalanceChanges = exports.supportChangeEtherBalances = void 0;\nconst ethers_1 = require(\"ethers\");\nconst account_1 = require(\"./misc/account\");\nconst balance_1 = require(\"./misc/balance\");\nfunction supportChangeEtherBalances(Assertion) {\n    Assertion.addMethod('changeEtherBalances', function (accounts, balanceChanges, options) {\n        const subject = this._obj;\n        const derivedPromise = Promise.all([\n            getBalanceChanges(subject, accounts, options),\n            balance_1.getAddresses(accounts)\n        ]).then(([actualChanges, accountAddresses]) => {\n            this.assert(actualChanges.every((change, ind) => change.eq(ethers_1.BigNumber.from(balanceChanges[ind]))), `Expected ${accountAddresses} to change balance by ${balanceChanges} wei, ` +\n                `but it has changed by ${actualChanges} wei`, `Expected ${accountAddresses} to not change balance by ${balanceChanges} wei,`, balanceChanges.map((balanceChange) => balanceChange.toString()), actualChanges.map((actualChange) => actualChange.toString()));\n        });\n        this.then = derivedPromise.then.bind(derivedPromise);\n        this.catch = derivedPromise.catch.bind(derivedPromise);\n        this.promise = derivedPromise;\n        return this;\n    });\n}\nexports.supportChangeEtherBalances = supportChangeEtherBalances;\nasync function getBalanceChanges(transaction, accounts, options) {\n    let txResponse;\n    if (typeof transaction === 'function') {\n        txResponse = await transaction();\n    }\n    else {\n        txResponse = transaction;\n    }\n    const txReceipt = await txResponse.wait();\n    const txBlockNumber = txReceipt.blockNumber;\n    const balancesAfter = await balance_1.getBalances(accounts, txBlockNumber);\n    const balancesBefore = await balance_1.getBalances(accounts, txBlockNumber - 1);\n    const txFees = await getTxFees(accounts, txResponse, options);\n    return balancesAfter.map((balance, ind) => balance.add(txFees[ind]).sub(balancesBefore[ind]));\n}\nexports.getBalanceChanges = getBalanceChanges;\nasync function getTxFees(accounts, txResponse, options) {\n    return Promise.all(accounts.map(async (account) => {\n        var _a;\n        if ((options === null || options === void 0 ? void 0 : options.includeFee) !== true && await account_1.getAddressOf(account) === txResponse.from) {\n            const txReceipt = await txResponse.wait();\n            const gasPrice = (_a = txResponse.gasPrice) !== null && _a !== void 0 ? _a : txReceipt.effectiveGasPrice;\n            const gasUsed = txReceipt.gasUsed;\n            const txFee = gasPrice.mul(gasUsed);\n            return txFee;\n        }\n        return 0;\n    }));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}