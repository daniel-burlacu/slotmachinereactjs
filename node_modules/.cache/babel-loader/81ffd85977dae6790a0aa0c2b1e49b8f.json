{"ast":null,"code":"'use strict';\n\nvar gitHosts = module.exports = {\n  github: {\n    // First two are insecure and generally shouldn't be used any more, but\n    // they are still supported.\n    'protocols': ['git', 'http', 'git+ssh', 'git+https', 'ssh', 'https'],\n    'domain': 'github.com',\n    'treepath': 'tree',\n    'filetemplate': 'https://{auth@}raw.githubusercontent.com/{user}/{project}/{committish}/{path}',\n    'bugstemplate': 'https://{domain}/{user}/{project}/issues',\n    'gittemplate': 'git://{auth@}{domain}/{user}/{project}.git{#committish}',\n    'tarballtemplate': 'https://codeload.{domain}/{user}/{project}/tar.gz/{committish}'\n  },\n  bitbucket: {\n    'protocols': ['git+ssh', 'git+https', 'ssh', 'https'],\n    'domain': 'bitbucket.org',\n    'treepath': 'src',\n    'tarballtemplate': 'https://{domain}/{user}/{project}/get/{committish}.tar.gz'\n  },\n  gitlab: {\n    'protocols': ['git+ssh', 'git+https', 'ssh', 'https'],\n    'domain': 'gitlab.com',\n    'treepath': 'tree',\n    'bugstemplate': 'https://{domain}/{user}/{project}/issues',\n    'httpstemplate': 'git+https://{auth@}{domain}/{user}/{projectPath}.git{#committish}',\n    'tarballtemplate': 'https://{domain}/{user}/{project}/repository/archive.tar.gz?ref={committish}',\n    'pathmatch': /^[/]([^/]+)[/]((?!.*(\\/-\\/|\\/repository\\/archive\\.tar\\.gz\\?=.*|\\/repository\\/[^/]+\\/archive.tar.gz$)).*?)(?:[.]git|[/])?$/\n  },\n  gist: {\n    'protocols': ['git', 'git+ssh', 'git+https', 'ssh', 'https'],\n    'domain': 'gist.github.com',\n    'pathmatch': /^[/](?:([^/]+)[/])?([a-z0-9]{32,})(?:[.]git)?$/,\n    'filetemplate': 'https://gist.githubusercontent.com/{user}/{project}/raw{/committish}/{path}',\n    'bugstemplate': 'https://{domain}/{project}',\n    'gittemplate': 'git://{domain}/{project}.git{#committish}',\n    'sshtemplate': 'git@{domain}:/{project}.git{#committish}',\n    'sshurltemplate': 'git+ssh://git@{domain}/{project}.git{#committish}',\n    'browsetemplate': 'https://{domain}/{project}{/committish}',\n    'browsefiletemplate': 'https://{domain}/{project}{/committish}{#path}',\n    'docstemplate': 'https://{domain}/{project}{/committish}',\n    'httpstemplate': 'git+https://{domain}/{project}.git{#committish}',\n    'shortcuttemplate': '{type}:{project}{#committish}',\n    'pathtemplate': '{project}{#committish}',\n    'tarballtemplate': 'https://codeload.github.com/gist/{project}/tar.gz/{committish}',\n    'hashformat': function (fragment) {\n      return 'file-' + formatHashFragment(fragment);\n    }\n  }\n};\nvar gitHostDefaults = {\n  'sshtemplate': 'git@{domain}:{user}/{project}.git{#committish}',\n  'sshurltemplate': 'git+ssh://git@{domain}/{user}/{project}.git{#committish}',\n  'browsetemplate': 'https://{domain}/{user}/{project}{/tree/committish}',\n  'browsefiletemplate': 'https://{domain}/{user}/{project}/{treepath}/{committish}/{path}{#fragment}',\n  'docstemplate': 'https://{domain}/{user}/{project}{/tree/committish}#readme',\n  'httpstemplate': 'git+https://{auth@}{domain}/{user}/{project}.git{#committish}',\n  'filetemplate': 'https://{domain}/{user}/{project}/raw/{committish}/{path}',\n  'shortcuttemplate': '{type}:{user}/{project}{#committish}',\n  'pathtemplate': '{user}/{project}{#committish}',\n  'pathmatch': /^[/]([^/]+)[/]([^/]+?)(?:[.]git|[/])?$/,\n  'hashformat': formatHashFragment\n};\nObject.keys(gitHosts).forEach(function (name) {\n  Object.keys(gitHostDefaults).forEach(function (key) {\n    if (gitHosts[name][key]) return;\n    gitHosts[name][key] = gitHostDefaults[key];\n  });\n  gitHosts[name].protocols_re = RegExp('^(' + gitHosts[name].protocols.map(function (protocol) {\n    return protocol.replace(/([\\\\+*{}()[\\]$^|])/g, '\\\\$1');\n  }).join('|') + '):$');\n});\n\nfunction formatHashFragment(fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-');\n}","map":{"version":3,"names":["gitHosts","module","exports","github","bitbucket","gitlab","gist","fragment","formatHashFragment","gitHostDefaults","Object","keys","forEach","name","key","protocols_re","RegExp","protocols","map","protocol","replace","join","toLowerCase"],"sources":["F:/Games/slotmachinereact/node_modules/hosted-git-info/git-host-info.js"],"sourcesContent":["'use strict'\n\nvar gitHosts = module.exports = {\n  github: {\n    // First two are insecure and generally shouldn't be used any more, but\n    // they are still supported.\n    'protocols': [ 'git', 'http', 'git+ssh', 'git+https', 'ssh', 'https' ],\n    'domain': 'github.com',\n    'treepath': 'tree',\n    'filetemplate': 'https://{auth@}raw.githubusercontent.com/{user}/{project}/{committish}/{path}',\n    'bugstemplate': 'https://{domain}/{user}/{project}/issues',\n    'gittemplate': 'git://{auth@}{domain}/{user}/{project}.git{#committish}',\n    'tarballtemplate': 'https://codeload.{domain}/{user}/{project}/tar.gz/{committish}'\n  },\n  bitbucket: {\n    'protocols': [ 'git+ssh', 'git+https', 'ssh', 'https' ],\n    'domain': 'bitbucket.org',\n    'treepath': 'src',\n    'tarballtemplate': 'https://{domain}/{user}/{project}/get/{committish}.tar.gz'\n  },\n  gitlab: {\n    'protocols': [ 'git+ssh', 'git+https', 'ssh', 'https' ],\n    'domain': 'gitlab.com',\n    'treepath': 'tree',\n    'bugstemplate': 'https://{domain}/{user}/{project}/issues',\n    'httpstemplate': 'git+https://{auth@}{domain}/{user}/{projectPath}.git{#committish}',\n    'tarballtemplate': 'https://{domain}/{user}/{project}/repository/archive.tar.gz?ref={committish}',\n    'pathmatch': /^[/]([^/]+)[/]((?!.*(\\/-\\/|\\/repository\\/archive\\.tar\\.gz\\?=.*|\\/repository\\/[^/]+\\/archive.tar.gz$)).*?)(?:[.]git|[/])?$/\n  },\n  gist: {\n    'protocols': [ 'git', 'git+ssh', 'git+https', 'ssh', 'https' ],\n    'domain': 'gist.github.com',\n    'pathmatch': /^[/](?:([^/]+)[/])?([a-z0-9]{32,})(?:[.]git)?$/,\n    'filetemplate': 'https://gist.githubusercontent.com/{user}/{project}/raw{/committish}/{path}',\n    'bugstemplate': 'https://{domain}/{project}',\n    'gittemplate': 'git://{domain}/{project}.git{#committish}',\n    'sshtemplate': 'git@{domain}:/{project}.git{#committish}',\n    'sshurltemplate': 'git+ssh://git@{domain}/{project}.git{#committish}',\n    'browsetemplate': 'https://{domain}/{project}{/committish}',\n    'browsefiletemplate': 'https://{domain}/{project}{/committish}{#path}',\n    'docstemplate': 'https://{domain}/{project}{/committish}',\n    'httpstemplate': 'git+https://{domain}/{project}.git{#committish}',\n    'shortcuttemplate': '{type}:{project}{#committish}',\n    'pathtemplate': '{project}{#committish}',\n    'tarballtemplate': 'https://codeload.github.com/gist/{project}/tar.gz/{committish}',\n    'hashformat': function (fragment) {\n      return 'file-' + formatHashFragment(fragment)\n    }\n  }\n}\n\nvar gitHostDefaults = {\n  'sshtemplate': 'git@{domain}:{user}/{project}.git{#committish}',\n  'sshurltemplate': 'git+ssh://git@{domain}/{user}/{project}.git{#committish}',\n  'browsetemplate': 'https://{domain}/{user}/{project}{/tree/committish}',\n  'browsefiletemplate': 'https://{domain}/{user}/{project}/{treepath}/{committish}/{path}{#fragment}',\n  'docstemplate': 'https://{domain}/{user}/{project}{/tree/committish}#readme',\n  'httpstemplate': 'git+https://{auth@}{domain}/{user}/{project}.git{#committish}',\n  'filetemplate': 'https://{domain}/{user}/{project}/raw/{committish}/{path}',\n  'shortcuttemplate': '{type}:{user}/{project}{#committish}',\n  'pathtemplate': '{user}/{project}{#committish}',\n  'pathmatch': /^[/]([^/]+)[/]([^/]+?)(?:[.]git|[/])?$/,\n  'hashformat': formatHashFragment\n}\n\nObject.keys(gitHosts).forEach(function (name) {\n  Object.keys(gitHostDefaults).forEach(function (key) {\n    if (gitHosts[name][key]) return\n    gitHosts[name][key] = gitHostDefaults[key]\n  })\n  gitHosts[name].protocols_re = RegExp('^(' +\n    gitHosts[name].protocols.map(function (protocol) {\n      return protocol.replace(/([\\\\+*{}()[\\]$^|])/g, '\\\\$1')\n    }).join('|') + '):$')\n})\n\nfunction formatHashFragment (fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-')\n}\n"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,MAAM,CAACC,OAAP,GAAiB;EAC9BC,MAAM,EAAE;IACN;IACA;IACA,aAAa,CAAE,KAAF,EAAS,MAAT,EAAiB,SAAjB,EAA4B,WAA5B,EAAyC,KAAzC,EAAgD,OAAhD,CAHP;IAIN,UAAU,YAJJ;IAKN,YAAY,MALN;IAMN,gBAAgB,+EANV;IAON,gBAAgB,0CAPV;IAQN,eAAe,yDART;IASN,mBAAmB;EATb,CADsB;EAY9BC,SAAS,EAAE;IACT,aAAa,CAAE,SAAF,EAAa,WAAb,EAA0B,KAA1B,EAAiC,OAAjC,CADJ;IAET,UAAU,eAFD;IAGT,YAAY,KAHH;IAIT,mBAAmB;EAJV,CAZmB;EAkB9BC,MAAM,EAAE;IACN,aAAa,CAAE,SAAF,EAAa,WAAb,EAA0B,KAA1B,EAAiC,OAAjC,CADP;IAEN,UAAU,YAFJ;IAGN,YAAY,MAHN;IAIN,gBAAgB,0CAJV;IAKN,iBAAiB,mEALX;IAMN,mBAAmB,8EANb;IAON,aAAa;EAPP,CAlBsB;EA2B9BC,IAAI,EAAE;IACJ,aAAa,CAAE,KAAF,EAAS,SAAT,EAAoB,WAApB,EAAiC,KAAjC,EAAwC,OAAxC,CADT;IAEJ,UAAU,iBAFN;IAGJ,aAAa,gDAHT;IAIJ,gBAAgB,6EAJZ;IAKJ,gBAAgB,4BALZ;IAMJ,eAAe,2CANX;IAOJ,eAAe,0CAPX;IAQJ,kBAAkB,mDARd;IASJ,kBAAkB,yCATd;IAUJ,sBAAsB,gDAVlB;IAWJ,gBAAgB,yCAXZ;IAYJ,iBAAiB,iDAZb;IAaJ,oBAAoB,+BAbhB;IAcJ,gBAAgB,wBAdZ;IAeJ,mBAAmB,gEAff;IAgBJ,cAAc,UAAUC,QAAV,EAAoB;MAChC,OAAO,UAAUC,kBAAkB,CAACD,QAAD,CAAnC;IACD;EAlBG;AA3BwB,CAAhC;AAiDA,IAAIE,eAAe,GAAG;EACpB,eAAe,gDADK;EAEpB,kBAAkB,0DAFE;EAGpB,kBAAkB,qDAHE;EAIpB,sBAAsB,6EAJF;EAKpB,gBAAgB,4DALI;EAMpB,iBAAiB,+DANG;EAOpB,gBAAgB,2DAPI;EAQpB,oBAAoB,sCARA;EASpB,gBAAgB,+BATI;EAUpB,aAAa,wCAVO;EAWpB,cAAcD;AAXM,CAAtB;AAcAE,MAAM,CAACC,IAAP,CAAYX,QAAZ,EAAsBY,OAAtB,CAA8B,UAAUC,IAAV,EAAgB;EAC5CH,MAAM,CAACC,IAAP,CAAYF,eAAZ,EAA6BG,OAA7B,CAAqC,UAAUE,GAAV,EAAe;IAClD,IAAId,QAAQ,CAACa,IAAD,CAAR,CAAeC,GAAf,CAAJ,EAAyB;IACzBd,QAAQ,CAACa,IAAD,CAAR,CAAeC,GAAf,IAAsBL,eAAe,CAACK,GAAD,CAArC;EACD,CAHD;EAIAd,QAAQ,CAACa,IAAD,CAAR,CAAeE,YAAf,GAA8BC,MAAM,CAAC,OACnChB,QAAQ,CAACa,IAAD,CAAR,CAAeI,SAAf,CAAyBC,GAAzB,CAA6B,UAAUC,QAAV,EAAoB;IAC/C,OAAOA,QAAQ,CAACC,OAAT,CAAiB,qBAAjB,EAAwC,MAAxC,CAAP;EACD,CAFD,EAEGC,IAFH,CAEQ,GAFR,CADmC,GAGpB,KAHmB,CAApC;AAID,CATD;;AAWA,SAASb,kBAAT,CAA6BD,QAA7B,EAAuC;EACrC,OAAOA,QAAQ,CAACe,WAAT,GAAuBF,OAAvB,CAA+B,eAA/B,EAAgD,EAAhD,EAAoDA,OAApD,CAA4D,MAA5D,EAAoE,GAApE,CAAP;AACD"},"metadata":{},"sourceType":"script"}