{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar async = require('async');\n/**\n * @ignore\n */\n\n\nfunction runBlockchain(blockchain) {\n  var _this = this;\n\n  return new Promise(function (resolve, reject) {\n    var self = _this;\n    var headBlock;\n    var parentState;\n    blockchain = blockchain || _this.blockchain; // setup blockchain iterator\n\n    blockchain.iterator('vm', processBlock, function (err) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n\n    function processBlock(block, reorg, cb) {\n      async.series([getStartingState, runBlock], cb); // determine starting state for block run\n\n      function getStartingState(cb) {\n        // if we are just starting or if a chain re-org has happened\n        if (!headBlock || reorg) {\n          blockchain.getBlock(block.header.parentHash, function (err, parentBlock) {\n            parentState = parentBlock.header.stateRoot; // generate genesis state if we are at the genesis block\n            // we don't have the genesis state\n\n            if (!headBlock) {\n              return self.stateManager.generateCanonicalGenesis(cb);\n            } else {\n              cb(err);\n            }\n          });\n        } else {\n          parentState = headBlock.header.stateRoot;\n          cb();\n        }\n      } // run block, update head if valid\n\n\n      function runBlock(cb) {\n        self.runBlock({\n          block: block,\n          root: parentState\n        }).then(function () {\n          // set as new head block\n          headBlock = block;\n          cb();\n        }).catch(function (err) {\n          // remove invalid block\n          blockchain.delBlock(block.header.hash(), function () {\n            cb(err);\n          });\n        });\n      }\n    }\n  });\n}\n\nexports.default = runBlockchain;","map":{"version":3,"mappings":";;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;AAEA;;;;;AAGA,SAAwBC,aAAxB,CAAgDC,UAAhD,EAAsE;EAAtE;;EACE,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;IACjC,IAAMC,IAAI,GAAGC,KAAb;IACA,IAAIC,SAAJ;IACA,IAAIC,WAAJ;IAEAP,UAAU,GAAGA,UAAU,IAAIK,KAAI,CAACL,UAAhC,CALiC,CAOjC;;IACAA,UAAU,CAACQ,QAAX,CAAoB,IAApB,EAA0BC,YAA1B,EAAwC,UAACC,GAAD,EAAW;MACjD,IAAIA,GAAJ,EAAS;QACPP,MAAM,CAACO,GAAD,CAAN;MACD,CAFD,MAEO;QACLR,OAAO;MACR;IACF,CAND;;IAQA,SAASO,YAAT,CAAsBE,KAAtB,EAAkCC,KAAlC,EAAkDC,EAAlD,EAAyD;MACvDhB,KAAK,CAACiB,MAAN,CAAa,CAACC,gBAAD,EAAmBC,QAAnB,CAAb,EAA2CH,EAA3C,EADuD,CAGvD;;MACA,SAASE,gBAAT,CAA0BF,EAA1B,EAAiC;QAC/B;QACA,IAAI,CAACP,SAAD,IAAcM,KAAlB,EAAyB;UACvBZ,UAAU,CAACiB,QAAX,CAAoBN,KAAK,CAACO,MAAN,CAAaC,UAAjC,EAA6C,UAAST,GAAT,EAAmBU,WAAnB,EAAmC;YAC9Eb,WAAW,GAAGa,WAAW,CAACF,MAAZ,CAAmBG,SAAjC,CAD8E,CAE9E;YACA;;YACA,IAAI,CAACf,SAAL,EAAgB;cACd,OAAOF,IAAI,CAACkB,YAAL,CAAkBC,wBAAlB,CAA2CV,EAA3C,CAAP;YACD,CAFD,MAEO;cACLA,EAAE,CAACH,GAAD,CAAF;YACD;UACF,CATD;QAUD,CAXD,MAWO;UACLH,WAAW,GAAGD,SAAS,CAACY,MAAV,CAAiBG,SAA/B;UACAR,EAAE;QACH;MACF,CArBsD,CAuBvD;;;MACA,SAASG,QAAT,CAAkBH,EAAlB,EAAyB;QACvBT,IAAI,CACDY,QADH,CACY;UACRL,KAAK,EAAEA,KADC;UAERa,IAAI,EAAEjB;QAFE,CADZ,EAKGkB,IALH,CAKQ;UACJ;UACAnB,SAAS,GAAGK,KAAZ;UACAE,EAAE;QACH,CATH,EAUGa,KAVH,CAUS,eAAG;UACR;UACA1B,UAAU,CAAC2B,QAAX,CAAoBhB,KAAK,CAACO,MAAN,CAAaU,IAAb,EAApB,EAAyC;YACvCf,EAAE,CAACH,GAAD,CAAF;UACD,CAFD;QAGD,CAfH;MAgBD;IACF;EACF,CA3DM,CAAP;AA4DD;;AA7DDmB","names":["async","require","runBlockchain","blockchain","Promise","resolve","reject","self","_this","headBlock","parentState","iterator","processBlock","err","block","reorg","cb","series","getStartingState","runBlock","getBlock","header","parentHash","parentBlock","stateRoot","stateManager","generateCanonicalGenesis","root","then","catch","delBlock","hash","exports"],"sources":["../lib/runBlockchain.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}