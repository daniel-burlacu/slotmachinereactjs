{"ast":null,"code":"var to = require(\"./to.js\"); // Expects:\n//\n// logIndex: ...\n// transactionIndex: ...\n// transactionHash: ...\n// block: ...\n// address: ...\n// data: ...\n// topics: ...\n// type: ...\n\n\nfunction Log(data) {\n  var self = this;\n  Object.keys(data).forEach(function (key) {\n    self[key] = data[key];\n  });\n}\n\nLog.prototype.toJSON = function () {\n  // RPC quantity values like this.transactionIndex can be set to \"0x00\",\n  // use the explicit rpcQuantityHexString to properly format the JSON, removing leading zeroes.\n  // See RPC log format spec: https://github.com/ethereum/wiki/wiki/JSON-RPC\n  return {\n    logIndex: to.rpcQuantityHexString(this.logIndex),\n    transactionIndex: to.rpcQuantityHexString(this.transactionIndex),\n    transactionHash: to.rpcDataHexString(this.transactionHash),\n    blockHash: to.rpcDataHexString(this.block.hash()),\n    blockNumber: to.rpcQuantityHexString(this.block.header.number),\n    address: to.rpcDataHexString(this.address),\n    data: to.rpcDataHexString(this.data),\n    topics: this.topics,\n    type: \"mined\",\n    removed: this.removed || false\n  };\n};\n\nmodule.exports = Log;","map":{"version":3,"names":["to","require","Log","data","self","Object","keys","forEach","key","prototype","toJSON","logIndex","rpcQuantityHexString","transactionIndex","transactionHash","rpcDataHexString","blockHash","block","hash","blockNumber","header","number","address","topics","type","removed","module","exports"],"sources":["F:/Games/slotmachinereact/node_modules/ganache-core/lib/utils/log.js"],"sourcesContent":["var to = require(\"./to.js\");\n\n// Expects:\n//\n// logIndex: ...\n// transactionIndex: ...\n// transactionHash: ...\n// block: ...\n// address: ...\n// data: ...\n// topics: ...\n// type: ...\n\nfunction Log(data) {\n  var self = this;\n  Object.keys(data).forEach(function(key) {\n    self[key] = data[key];\n  });\n}\n\nLog.prototype.toJSON = function() {\n  // RPC quantity values like this.transactionIndex can be set to \"0x00\",\n  // use the explicit rpcQuantityHexString to properly format the JSON, removing leading zeroes.\n  // See RPC log format spec: https://github.com/ethereum/wiki/wiki/JSON-RPC\n  return {\n    logIndex: to.rpcQuantityHexString(this.logIndex),\n    transactionIndex: to.rpcQuantityHexString(this.transactionIndex),\n    transactionHash: to.rpcDataHexString(this.transactionHash),\n    blockHash: to.rpcDataHexString(this.block.hash()),\n    blockNumber: to.rpcQuantityHexString(this.block.header.number),\n    address: to.rpcDataHexString(this.address),\n    data: to.rpcDataHexString(this.data),\n    topics: this.topics,\n    type: \"mined\",\n    removed: (this.removed || false)\n  };\n};\n\nmodule.exports = Log;\n"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,SAAD,CAAhB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,GAAT,CAAaC,IAAb,EAAmB;EACjB,IAAIC,IAAI,GAAG,IAAX;EACAC,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,OAAlB,CAA0B,UAASC,GAAT,EAAc;IACtCJ,IAAI,CAACI,GAAD,CAAJ,GAAYL,IAAI,CAACK,GAAD,CAAhB;EACD,CAFD;AAGD;;AAEDN,GAAG,CAACO,SAAJ,CAAcC,MAAd,GAAuB,YAAW;EAChC;EACA;EACA;EACA,OAAO;IACLC,QAAQ,EAAEX,EAAE,CAACY,oBAAH,CAAwB,KAAKD,QAA7B,CADL;IAELE,gBAAgB,EAAEb,EAAE,CAACY,oBAAH,CAAwB,KAAKC,gBAA7B,CAFb;IAGLC,eAAe,EAAEd,EAAE,CAACe,gBAAH,CAAoB,KAAKD,eAAzB,CAHZ;IAILE,SAAS,EAAEhB,EAAE,CAACe,gBAAH,CAAoB,KAAKE,KAAL,CAAWC,IAAX,EAApB,CAJN;IAKLC,WAAW,EAAEnB,EAAE,CAACY,oBAAH,CAAwB,KAAKK,KAAL,CAAWG,MAAX,CAAkBC,MAA1C,CALR;IAMLC,OAAO,EAAEtB,EAAE,CAACe,gBAAH,CAAoB,KAAKO,OAAzB,CANJ;IAOLnB,IAAI,EAAEH,EAAE,CAACe,gBAAH,CAAoB,KAAKZ,IAAzB,CAPD;IAQLoB,MAAM,EAAE,KAAKA,MARR;IASLC,IAAI,EAAE,OATD;IAULC,OAAO,EAAG,KAAKA,OAAL,IAAgB;EAVrB,CAAP;AAYD,CAhBD;;AAkBAC,MAAM,CAACC,OAAP,GAAiBzB,GAAjB"},"metadata":{},"sourceType":"script"}