{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\ReelSet.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Constants from \"../Constants\";\nimport \"../assets/css/App.css\";\nimport Reel from \"./Reel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ReelSet = props => {\n  _s();\n\n  const [spinReel, setSpinReel] = useState(false);\n  const symbols = \"DDDGNNSSVVVCCFFRRYYIIJJZZMMOOLLTTPPBBQQAAG\";\n  const begginig = \"DDD\";\n\n  const renderReels = () => {\n    if (spinReel) {\n      let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\n        console.log(\"Returnin reels\");\n        setSpinReel(false);\n        return /*#__PURE__*/_jsxDEV(Reel, {\n          index: idx,\n          symb: symbols\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 14\n        }, this);\n      });\n      console.log(\"My reelList is: \" + reelList.length);\n      setSpinReel(false);\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: reelList\n      }, void 0, false);\n    } else {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"jackpot\",\n      children: [\"Jackpot: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reelSet\",\n          children: renderReels()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ReelSet, \"v6sZPFFKdbw5pAbK5atMpOJmmYM=\");\n\n_c = ReelSet;\nexport default ReelSet;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReelSet\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Constants","Reel","ReelSet","props","spinReel","setSpinReel","symbols","begginig","renderReels","reelList","Array","apply","REELS","map","el","idx","console","log","length"],"sources":["F:/Games/slotmachinereact/src/components/ReelSet.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport Constants from \"../Constants\";\r\nimport \"../assets/css/App.css\";\r\nimport Reel from \"./Reel\";\r\n\r\nconst ReelSet = (props) => {\r\n\r\n  const [spinReel, setSpinReel] = useState(false)\r\n\r\n  const symbols = \"DDDGNNSSVVVCCFFRRYYIIJJZZMMOOLLTTPPBBQQAAG\";\r\n  const begginig = \"DDD\";\r\n\r\n  const renderReels = () => {\r\n    if(spinReel){\r\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\r\n      console.log(\"Returnin reels\");\r\n      setSpinReel(false);\r\n      return <Reel key={idx} index={idx} symb={symbols}/>;\r\n    });\r\n\r\n    console.log(\"My reelList is: \" + reelList.length);\r\n    setSpinReel(false);\r\n    return <>{reelList}</>;\r\n\r\n  }else{\r\n\r\n  }\r\n  };\r\n \r\n  return (\r\n    <>\r\n      <div id=\"jackpot\">\r\n        Jackpot: <span>100</span>\r\n      </div>\r\n      <div className=\"container\">\r\n        <div className=\"playContainer\">\r\n          <div\r\n            className=\"reelSet\" \r\n          >\r\n            {renderReels()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReelSet;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAO,uBAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;EAAA;;EAEzB,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;EAEA,MAAMS,OAAO,GAAG,4CAAhB;EACA,MAAMC,QAAQ,GAAG,KAAjB;;EAEA,MAAMC,WAAW,GAAG,MAAM;IACxB,IAAGJ,QAAH,EAAY;MACZ,IAAIK,QAAQ,GAAGC,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBD,KAAK,CAACV,SAAS,CAACY,KAAX,CAAvB,EAA0CC,GAA1C,CAA8C,CAACC,EAAD,EAAKC,GAAL,KAAa;QACxEC,OAAO,CAACC,GAAR,CAAY,gBAAZ;QACAZ,WAAW,CAAC,KAAD,CAAX;QACA,oBAAO,QAAC,IAAD;UAAgB,KAAK,EAAEU,GAAvB;UAA4B,IAAI,EAAET;QAAlC,GAAWS,GAAX;UAAA;UAAA;UAAA;QAAA,QAAP;MACD,CAJc,CAAf;MAMAC,OAAO,CAACC,GAAR,CAAY,qBAAqBR,QAAQ,CAACS,MAA1C;MACAb,WAAW,CAAC,KAAD,CAAX;MACA,oBAAO;QAAA,UAAGI;MAAH,iBAAP;IAED,CAXC,MAWG,CAEJ;EACA,CAfD;;EAiBA,oBACE;IAAA,wBACE;MAAK,EAAE,EAAC,SAAR;MAAA,qCACW;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADX;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAIE;MAAK,SAAS,EAAC,WAAf;MAAA,uBACE;QAAK,SAAS,EAAC,eAAf;QAAA,uBACE;UACE,SAAS,EAAC,SADZ;UAAA,UAGGD,WAAW;QAHd;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAJF;EAAA,gBADF;AAgBD,CAxCD;;GAAMN,O;;KAAAA,O;AA0CN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}