{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst backtrackfsresolver_1 = require(\"./backtrackfsresolver\");\n\nfunction NodeResolver() {\n  const backtrack = backtrackfsresolver_1.BacktrackFsResolver(\"node_modules\");\n  return function node(what, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return backtrack(what, ctx);\n    });\n  };\n}\n\nexports.NodeResolver = NodeResolver;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA,SAAgBA,YAAhB,GAA4B;EAC1B,MAAMC,SAAS,GAAGC,0CAAoB,cAApB,CAAlB;EAEA,OAAO,SAAeC,IAAf,CAAoBC,IAApB,EAAkCC,GAAlC,EAA8C;;MACnD,OAAOJ,SAAS,CAACG,IAAD,EAAOC,GAAP,CAAhB;IACD;EAAA,CAFD;AAGD;;AANDC","names":["NodeResolver","backtrack","backtrackfsresolver_1","node","what","ctx","exports"],"sources":["F:\\Games\\slotmachinereact\\node_modules\\@resolver-engine\\fs\\src\\resolvers\\noderesolver.ts"],"sourcesContent":["import { Context, SubResolver } from \"@resolver-engine/core\";\nimport { BacktrackFsResolver } from \"./backtrackfsresolver\";\n\nexport function NodeResolver(): SubResolver {\n  const backtrack = BacktrackFsResolver(\"node_modules\");\n\n  return async function node(what: string, ctx: Context): Promise<string | null> {\n    return backtrack(what, ctx);\n  };\n}\n"]},"metadata":{},"sourceType":"script"}