{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"@resolver-engine/core\");\n\nexports.firstResult = core_1.firstResult;\nexports.ResolverEngine = core_1.ResolverEngine;\n\nvar imports_1 = require(\"@resolver-engine/imports\");\n\nexports.findImports = imports_1.findImports;\nexports.gatherSources = imports_1.gatherSources;\nexports.gatherSourcesAndCanonizeImports = imports_1.gatherSourcesAndCanonizeImports;\nexports.ImportsEngine = imports_1.ImportsEngine;\n\nvar importsfsengine_1 = require(\"./importsfsengine\");\n\nexports.ImportsFsEngine = importsfsengine_1.ImportsFsEngine;\n\nconst core_2 = require(\"@resolver-engine/core\");\n\nconst fs_1 = require(\"@resolver-engine/fs\");\n\nconst imports_2 = require(\"@resolver-engine/imports\");\n\nconst ethpmresolver_1 = require(\"./resolvers/ethpmresolver\"); // TODO(cymerrad)\n// object destructuring doesn't work in this case\n// i.e.: ...fsResolvers, ...importsResolvers\n// generated import paths in *.d.ts point to invalid files\n// this is a more laborious way of achieving the same goal\n\n\nexports.resolvers = {\n  EthPmResolver: ethpmresolver_1.EthPmResolver,\n  UriResolver: core_2.resolvers.UriResolver,\n  BacktrackFsResolver: fs_1.resolvers.BacktrackFsResolver,\n  FsResolver: fs_1.resolvers.FsResolver,\n  NodeResolver: fs_1.resolvers.NodeResolver,\n  GithubResolver: imports_2.resolvers.GithubResolver,\n  IPFSResolver: imports_2.resolvers.IPFSResolver,\n  SwarmResolver: imports_2.resolvers.SwarmResolver\n};\nexports.parsers = {\n  UrlParser: core_2.parsers.UrlParser,\n  FsParser: fs_1.parsers.FsParser,\n  ImportParser: imports_2.parsers.ImportParser\n};","map":{"version":3,"mappings":";;;;;;AAAA;;AAAkBA;AAAsBA;;AACxC;;AACEA;AACAA;AACAA;AAEAA;;AAEF;;AAASA;;AACT;;AACA;;AACA;;AACA,6D,CAEA;AACA;AACA;AACA;AACA;;;AAEaA,oBAAY;EACvBC,aAAa,EAAbC,6BADuB;EAEvBC,WAAW,EAAEC,iBAAcD,WAFJ;EAGvBE,mBAAmB,EAAEC,eAAYD,mBAHV;EAIvBE,UAAU,EAAED,eAAYC,UAJD;EAKvBC,YAAY,EAAEF,eAAYE,YALH;EAMvBC,cAAc,EAAEC,oBAAiBD,cANV;EAOvBE,YAAY,EAAED,oBAAiBC,YAPR;EAQvBC,aAAa,EAAEF,oBAAiBE;AART,CAAZ;AAWAZ,kBAAU;EACrBa,SAAS,EAAET,eAAYS,SADF;EAErBC,QAAQ,EAAER,aAAUQ,QAFC;EAGrBC,YAAY,EAAEL,kBAAeK;AAHR,CAAV","names":["exports","EthPmResolver","ethpmresolver_1","UriResolver","core_2","BacktrackFsResolver","fs_1","FsResolver","NodeResolver","GithubResolver","imports_2","IPFSResolver","SwarmResolver","UrlParser","FsParser","ImportParser"],"sources":["F:\\Games\\slotmachinereact\\node_modules\\@resolver-engine\\imports-fs\\src\\index.ts"],"sourcesContent":["export { Context, firstResult, Options, ResolverEngine, SubParser, SubResolver } from \"@resolver-engine/core\";\nexport {\n  findImports,\n  gatherSources,\n  gatherSourcesAndCanonizeImports,\n  ImportFile,\n  ImportsEngine,\n} from \"@resolver-engine/imports\";\nexport { ImportsFsEngine } from \"./importsfsengine\";\nimport { parsers as coreParsers, resolvers as coreResolvers } from \"@resolver-engine/core\";\nimport { parsers as fsParsers, resolvers as fsResolvers } from \"@resolver-engine/fs\";\nimport { parsers as importsParsers, resolvers as importsResolvers } from \"@resolver-engine/imports\";\nimport { EthPmResolver } from \"./resolvers/ethpmresolver\";\n\n// TODO(cymerrad)\n// object destructuring doesn't work in this case\n// i.e.: ...fsResolvers, ...importsResolvers\n// generated import paths in *.d.ts point to invalid files\n// this is a more laborious way of achieving the same goal\n\nexport const resolvers = {\n  EthPmResolver,\n  UriResolver: coreResolvers.UriResolver,\n  BacktrackFsResolver: fsResolvers.BacktrackFsResolver,\n  FsResolver: fsResolvers.FsResolver,\n  NodeResolver: fsResolvers.NodeResolver,\n  GithubResolver: importsResolvers.GithubResolver,\n  IPFSResolver: importsResolvers.IPFSResolver,\n  SwarmResolver: importsResolvers.SwarmResolver,\n};\n\nexport const parsers = {\n  UrlParser: coreParsers.UrlParser,\n  FsParser: fsParsers.FsParser,\n  ImportParser: importsParsers.ImportParser,\n};\n"]},"metadata":{},"sourceType":"script"}