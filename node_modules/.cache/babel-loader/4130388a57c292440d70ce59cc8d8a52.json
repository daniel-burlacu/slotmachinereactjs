{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\CalculateScore.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Constants from '../Constants';\nimport bonusWin from '../assets/sounds/winningBonus.wav';\nimport Withdrawal from './Withdrawal';\n/*\r\nReceiving spinResults={props.resultsArray} \r\n          spinResultsIdx={props.resultsArrayIdx} \r\n          myBet={bet} \r\n          setCallbackScore={callbackScore} \r\n          game={props.game}\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet show = 0;\n\nconst CalculateScore = props => {\n  _s();\n\n  const [score, setScore] = useState(2);\n  /*Controling the calculation working score part !!!*********************/\n\n  if (show !== props.game) {\n    let scoreRef = 0;\n    let bet = props.myBet;\n    let finalScore = 0;\n    let results = [];\n    let spinResults = props.spinResults;\n    let spinResultsIdx = props.spinResultsIdx; //  let bet = 0;\n\n    let winningLines = [];\n    let countWin = 0;\n    let symbolSellection = [];\n    let randomNr = 0;\n    const symbols = Constants.REEL_SYMBOLS; // audioUrlBtn = require(\"../assets/sounds/buttonPress.wav\");\n\n    const audioBtn = new Audio(\"../assets/sounds/buttonPress.wav\"); // audioUrlSpin = require(\"../assets/sounds/spinningSlotMachine.wav\");\n\n    const audioSpin = new Audio(\"../assets/sounds/spinningSlotMachine.wav\");\n    const audioWinBonus = new Audio(bonusWin);\n\n    const playWinBonus = () => {\n      audioWinBonus.play();\n    };\n\n    const handleScore = e => {\n      //        setScore(Math.round((score + e) * 100) / 100);\n      finalScore = Math.round((score + e) * 100) / 100;\n    };\n\n    const setMyScore = e => {\n      let scr = 0;\n\n      if (bet > 0 && e > 0) {\n        //  scr = e + bet * e;\n        if (e < 100) {\n          scr = bet * e * 10;\n        } else if (e >= 100) {\n          scr = bet * e + e;\n        } //  scr = Math.round(scr * 100) / 100;\n        // scr=Math.round(scr);\n\n      } else if (bet > 0 && e === 0) {\n        //  scr = e + bet * e;\n        scr = bet * e * 10; //  scr = Math.round(scr * 100) / 100;\n        // scr=Math.round(scr);\n      } else if (bet === 0 && e > 0) {//  scr = Math.round((scr + e) * 100) / 100;\n        // scr=Math.round(scr+e);\n      }\n\n      handleScore(scr);\n    };\n\n    const drawScore = (lineNumberType, fool) => {\n      let newScore = 0;\n\n      if (fool) {\n        lineNumberType = 18;\n      }\n\n      switch (lineNumberType) {\n        case 0:\n          // top line\n          newScore = 0.5;\n          break;\n\n        case 1:\n          // middle line\n          //        audioWin.play();\n          newScore = 0.5;\n          break;\n\n        case 2:\n          // bottom line\n          //        audioWin.play();\n          newScore = 0.5;\n          break;\n\n        case 3:\n          // V shape starting bottom left\n          //        audioWin.play();\n          newScore = 0.2;\n          break;\n\n        case 4:\n          // V shape starting bottom right\n          //        audioWin.play();\n          newScore = 0.2;\n          break;\n\n        case 5:\n          // W shape starting top left\n          //        audioWin.play();\n          newScore = 0.3;\n          break;\n\n        case 6:\n          // M shape starting bottom left\n          //        audioWin.play();\n          newScore = 0.3;\n          break;\n\n        case 7:\n          // M shape on top half\n          //        audioWin.play();\n          newScore = 0.3;\n          break;\n\n        case 8:\n          // W shape on top half\n          //        audioWin.play();\n          newScore = 0.3;\n          break;\n\n        case 9:\n          //W shape on bottom half\n          //        audioWin.play();\n          newScore = 0.3;\n          break;\n\n        case 10:\n          // M shape on bottom half\n          //        audioWin.play();\n          newScore = 0.3;\n          break;\n\n        case 11:\n          // U shape on top half\n          //        audioWin.play();\n          newScore = 0.1;\n          break;\n\n        case 12:\n          // inverse U shape on top half\n          //        audioWin.play();\n          newScore = 0.1;\n          break;\n\n        case 13:\n          // U shape on bottom half\n          //        audioWin.play();\n          newScore = 0.1;\n          break;\n\n        case 14:\n          // inverse U shape on bottom half\n          //        audioWin.play();\n          newScore = 0.1;\n          break;\n\n        case 15:\n          // inverse U shape on top half\n          //        audioWin.play();\n          newScore = 0.1;\n          break;\n\n        case 16:\n          // Z shape from top left\n          //        audioWin.play();\n          newScore = 0.4;\n          break;\n\n        case 17:\n          // Z shape from bottom left\n          //        audioWin.play();\n          newScore = 0.4;\n          break;\n\n        case 18:\n          // Z shape from bottom left\n          //        audioWinBonus.play();\n          playWinBonus();\n          newScore = 100;\n          break;\n\n        default:\n          newScore = 0;\n      }\n\n      setMyScore(newScore);\n      return;\n    };\n\n    const checkFiveFools = () => {\n      let fl = false; //this has been changed from Constants.LINES.length;\n\n      for (let i = 0; i < Constants.LINES.length; i++) {\n        let fool = 0; //this has been changed from Constants.LINES[i].length\n\n        for (let j = 0; j < Constants.LINES[i].length; j++) {\n          let indexI = Constants.LINES[i][j][0];\n          let indexJ = Constants.LINES[i][j][1];\n\n          if (spinResults[indexI][indexJ] === \"D\") {\n            fool++;\n          }\n        }\n\n        if (fool === 5) {\n          console.log(\"$$$$ WE HAVE 5 FOOLS !!!$$$$\");\n          fl = true;\n          winningLines.push(i);\n          props.winningLinesCallBack(winningLines, fl);\n          drawScore(i, true); //  highLightWinningLines(0);\n\n          break;\n        }\n      }\n\n      return fl;\n    };\n\n    const checkFourFools = () => {\n      console.log(\"spinResults.length =\" + spinResults.length);\n\n      for (let i = 0; i < Constants.LINES.length; i++) {\n        let fool = 0;\n\n        for (let j = 0; j < Constants.LINES[0].length; j++) {\n          let indexI = Constants.LINES[i][j][0];\n          let indexJ = Constants.LINES[i][j][1];\n\n          if (spinResults[indexI][indexJ] === \"D\") {\n            fool++;\n          }\n        }\n\n        if (fool === 4) {\n          winningLines.push(i);\n          drawScore(i, false);\n        }\n      }\n    };\n\n    const checkLinesElements = symbol => {\n      countWin++;\n      let symNr = 0;\n      let fool = 0;\n\n      for (let i = 0; i < Constants.LINES.length; i++) {\n        fool = 0;\n        symNr = 0;\n\n        for (let j = 0; j < Constants.LINES[i].length; j++) {\n          let indexI = Constants.LINES[i][j][0];\n          let indexJ = Constants.LINES[i][j][1];\n\n          if (spinResults[indexI][indexJ] === \"D\") {\n            fool++;\n          }\n\n          if (symbol === spinResults[indexI][indexJ]) {\n            symNr++;\n          }\n        }\n\n        if (fool + symNr === 5 && fool < 4) {\n          winningLines.push(i);\n        }\n      }\n\n      winningLines = uniq(winningLines);\n    };\n\n    const uniq = a => {\n      return a.sort().filter(function (item, pos, ary) {\n        return !pos || item !== ary[pos - 1];\n      });\n    };\n\n    const checkElements = () => {\n      let fool = 0;\n\n      for (let k = 0; k < 3; k++) {\n        fool = 0;\n\n        for (let i = 0; i < spinResults.length; i++) {\n          let symb = \"\";\n\n          for (let j = k; j < spinResults[i].length; j++) {\n            if (spinResults[i][j] !== \"D\") {\n              symb = spinResults[i][j];\n              j = spinResults[i].length;\n            } else {\n              fool++;\n              j = spinResults[i].length;\n            }\n          }\n\n          if (fool < 4 && symb !== \"\") {\n            symbolSellection.push(symb);\n          }\n        }\n      }\n\n      for (let i = 0; i < symbolSellection.length; i++) {\n        checkLinesElements(symbolSellection[i]);\n      }\n    };\n\n    const setBetZero = () => {\n      bet = 0;\n    };\n\n    const evaluatespinResults = () => {\n      checkFourFools();\n      checkElements();\n\n      if (winningLines.length > 0) {\n        props.winningLinesCallBack(winningLines, false);\n\n        for (let i = 0; i < winningLines.length; i++) {\n          drawScore(winningLines[i], false);\n        }\n      } else {\n        if (score - bet >= 0.2) {\n          props.looserCallBack();\n          finalScore = Math.round((score - bet) * 100) / 100; //            setScore(Math.round((score - bet) * 100) / 100);\n\n          finalScore = Math.round((score - bet) * 100) / 100;\n\n          if (score < bet) {\n            setBetZero();\n          }\n        } else if (score - bet === 0) {\n          finalScore = score - bet;\n          setBetZero(); //            setScore(0);\n\n          finalScore = 0; //CREATE A GAME OVER SET FROM HERE    \n\n          props.looserCallBack();\n        }\n      }\n    };\n\n    const checkWin = () => {\n      if (props.game > 0) {\n        let fool = checkFiveFools();\n\n        if (!fool) {\n          evaluatespinResults();\n        }\n      }\n    };\n    /**Testing part  */\n\n\n    setTimeout(() => {\n      //    setScore(scr);\n      checkWin();\n      setScore(finalScore);\n      props.setCallbackScore(finalScore);\n      show = props.game;\n    }, 7500);\n    /**END of testing part */\n\n    /******************************************/\n  }\n\n  const callbackSetMyScr = myScr => {\n    if (myScr === 0) {\n      setScore(myScr); //     props.callBackSetBet(0);\n      //   btnDisable=true;\n    } else if (myScr > 0) {\n      setScore(myScr);\n    } //score=myScr;\n\n  };\n\n  const callBackGetScore = () => {\n    return score;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Withdrawal, {\n      getScoreCallback: callBackGetScore,\n      setScoreCallBack: callbackSetMyScr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Score:\", /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"score\",\n        children: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CalculateScore, \"cidTy/0QTqYWV6l0yj/74goiK7s=\");\n\n_c = CalculateScore;\nexport default CalculateScore;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalculateScore\");","map":{"version":3,"names":["React","useEffect","useState","Constants","bonusWin","Withdrawal","show","CalculateScore","props","score","setScore","game","scoreRef","bet","myBet","finalScore","results","spinResults","spinResultsIdx","winningLines","countWin","symbolSellection","randomNr","symbols","REEL_SYMBOLS","audioBtn","Audio","audioSpin","audioWinBonus","playWinBonus","play","handleScore","e","Math","round","setMyScore","scr","drawScore","lineNumberType","fool","newScore","checkFiveFools","fl","i","LINES","length","j","indexI","indexJ","console","log","push","winningLinesCallBack","checkFourFools","checkLinesElements","symbol","symNr","uniq","a","sort","filter","item","pos","ary","checkElements","k","symb","setBetZero","evaluatespinResults","looserCallBack","checkWin","setTimeout","setCallbackScore","callbackSetMyScr","myScr","callBackGetScore"],"sources":["F:/Games/slotmachinereact/src/components/CalculateScore.js"],"sourcesContent":["import React,{useEffect, useState} from 'react';\r\nimport Constants from '../Constants';\r\nimport bonusWin from '../assets/sounds/winningBonus.wav'\r\nimport Withdrawal from './Withdrawal'; \r\n\r\n/*\r\nReceiving spinResults={props.resultsArray} \r\n          spinResultsIdx={props.resultsArrayIdx} \r\n          myBet={bet} \r\n          setCallbackScore={callbackScore} \r\n          game={props.game}\r\n*/\r\n\r\nlet show = 0;\r\n\r\nconst CalculateScore = (props) => {\r\n    const [score, setScore] = useState(2);\r\n\r\n /*Controling the calculation working score part !!!*********************/\r\n if(show!==props.game){\r\n\r\n    let scoreRef = 0;\r\n    let bet =props.myBet;\r\n    let finalScore=0;\r\n    \r\n    let results = [];\r\n\r\n    let spinResults = props.spinResults;\r\n    let spinResultsIdx = props.spinResultsIdx;\r\n\r\n  //  let bet = 0;\r\n    let winningLines = [];\r\n    let countWin = 0;\r\n    let symbolSellection = [];\r\n    let randomNr = 0;\r\n    const symbols = Constants.REEL_SYMBOLS;\r\n\r\n\r\n  \r\n   // audioUrlBtn = require(\"../assets/sounds/buttonPress.wav\");\r\n    const audioBtn = new Audio(\"../assets/sounds/buttonPress.wav\");\r\n  \r\n   // audioUrlSpin = require(\"../assets/sounds/spinningSlotMachine.wav\");\r\n    const audioSpin = new Audio(\"../assets/sounds/spinningSlotMachine.wav\");\r\n\r\n    const audioWinBonus = new Audio(bonusWin);\r\n\r\n    const playWinBonus = () =>{\r\n          audioWinBonus.play();\r\n    }\r\n\r\n    const handleScore = (e) => {\r\n//        setScore(Math.round((score + e) * 100) / 100);\r\n        finalScore=(Math.round((score + e) * 100) / 100);\r\n      };\r\n\r\n    const setMyScore = (e) => {\r\n        let scr = 0;\r\n    \r\n        if (bet > 0 && e > 0) {\r\n\r\n        //  scr = e + bet * e;\r\n        if(e<100){\r\n          scr=(bet*e)*10;\r\n        }else if(e>=100){\r\n            scr=(bet*e)+e;\r\n        }\r\n        //  scr = Math.round(scr * 100) / 100;\r\n        // scr=Math.round(scr);\r\n        } else if (bet > 0 && e === 0) {\r\n        //  scr = e + bet * e;\r\n          scr=(bet*e)*10\r\n        //  scr = Math.round(scr * 100) / 100;\r\n        // scr=Math.round(scr);\r\n        } else if (bet === 0 && e > 0) {\r\n        //  scr = Math.round((scr + e) * 100) / 100;\r\n       // scr=Math.round(scr+e);\r\n        }\r\n        handleScore(scr);\r\n      };\r\n\r\n    const drawScore = (lineNumberType, fool) => {\r\n        let newScore = 0;\r\n        if (fool) {\r\n          lineNumberType = 18;\r\n        }\r\n        switch (lineNumberType) {\r\n          case 0: // top line\r\n            newScore = 0.5;\r\n            break;\r\n          case 1: // middle line\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.5;\r\n            break;\r\n          case 2: // bottom line\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.5;\r\n            break;\r\n          case 3: // V shape starting bottom left\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.2;\r\n            break;\r\n          case 4: // V shape starting bottom right\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.2;\r\n            break;\r\n          case 5: // W shape starting top left\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.3;\r\n            break;\r\n          case 6: // M shape starting bottom left\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.3;\r\n            break;\r\n          case 7: // M shape on top half\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.3;\r\n            break;\r\n          case 8: // W shape on top half\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.3;\r\n            break;\r\n          case 9: //W shape on bottom half\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.3;\r\n            break;\r\n          case 10: // M shape on bottom half\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.3;\r\n            break;\r\n          case 11: // U shape on top half\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.1;\r\n            break;\r\n          case 12: // inverse U shape on top half\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.1;\r\n            break;\r\n          case 13: // U shape on bottom half\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.1;\r\n            break;\r\n          case 14: // inverse U shape on bottom half\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.1;\r\n            break;\r\n          case 15: // inverse U shape on top half\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.1;\r\n            break;\r\n          case 16: // Z shape from top left\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.4;\r\n            break;\r\n          case 17: // Z shape from bottom left\r\n            //        audioWin.play();\r\n            \r\n            newScore = 0.4;\r\n            break;\r\n          case 18: // Z shape from bottom left\r\n            //        audioWinBonus.play();\r\n            playWinBonus();\r\n            newScore = 100;\r\n            break;\r\n          default:\r\n            newScore = 0;\r\n        }\r\n    \r\n        setMyScore(newScore);\r\n        \r\n        return;\r\n      };\r\n\r\n      const checkFiveFools = () => {\r\n        let fl = false;\r\n       //this has been changed from Constants.LINES.length;\r\n        for (let i = 0; i < Constants.LINES.length; i++) {\r\n          let fool = 0;\r\n          //this has been changed from Constants.LINES[i].length\r\n          for (let j = 0; j < Constants.LINES[i].length; j++) {\r\n            let indexI = Constants.LINES[i][j][0];\r\n            let indexJ = Constants.LINES[i][j][1];\r\n            if (spinResults[indexI][indexJ] === \"D\") {\r\n              fool++;\r\n            }\r\n          }\r\n     \r\n          if (fool === 5) {\r\n            console.log(\"$$$$ WE HAVE 5 FOOLS !!!$$$$\");\r\n            fl = true;\r\n            winningLines.push(i);\r\n            props.winningLinesCallBack(winningLines, fl);\r\n            drawScore(i, true);\r\n            //  highLightWinningLines(0);\r\n            break;\r\n          }\r\n        }\r\n        return fl;\r\n      }\r\n\r\n      const checkFourFools = () => {\r\n        console.log(\"spinResults.length =\"+spinResults.length);\r\n        for (let i = 0; i < Constants.LINES.length; i++) {\r\n          let fool = 0;\r\n          for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n            let indexI = Constants.LINES[i][j][0];\r\n            let indexJ = Constants.LINES[i][j][1];\r\n       \r\n            if (spinResults[indexI][indexJ] === \"D\") {\r\n              fool++;\r\n            }\r\n          }\r\n       \r\n          if (fool === 4) {\r\n            winningLines.push(i);\r\n            drawScore(i, false);\r\n          }\r\n        }\r\n      };\r\n\r\n      const checkLinesElements = (symbol) => {\r\n        countWin++;\r\n        let symNr = 0;\r\n        let fool = 0;\r\n        for (let i = 0; i < Constants.LINES.length; i++) {\r\n          fool = 0;\r\n          symNr = 0;\r\n          for (let j = 0; j < Constants.LINES[i].length; j++) {\r\n            let indexI = Constants.LINES[i][j][0];\r\n            let indexJ = Constants.LINES[i][j][1];\r\n    \r\n            if (spinResults[indexI][indexJ] === \"D\") {\r\n              fool++;\r\n            }\r\n            if (symbol === spinResults[indexI][indexJ]) {\r\n              symNr++;\r\n            }\r\n          }\r\n          if (fool + symNr === 5 && fool < 4) {\r\n            winningLines.push(i);\r\n          }\r\n        }\r\n        winningLines = uniq(winningLines);\r\n      };\r\n    \r\n      const uniq = (a) => {\r\n        return a.sort().filter(function (item, pos, ary) {\r\n          return !pos || item !== ary[pos - 1];\r\n        });\r\n      };\r\n\r\n      const checkElements = () => {\r\n        let fool = 0;\r\n        for (let k = 0; k < 3; k++) {\r\n          fool = 0;\r\n          for (let i = 0; i < spinResults.length; i++) {\r\n            let symb = \"\";\r\n            for (let j = k; j < spinResults[i].length; j++) {\r\n              if (spinResults[i][j] !== \"D\") {\r\n                symb = spinResults[i][j];\r\n                j = spinResults[i].length;\r\n              } else {\r\n                fool++;\r\n                j = spinResults[i].length;\r\n              }\r\n            }\r\n            if (fool < 4 && symb !== \"\") {\r\n              symbolSellection.push(symb);\r\n            }\r\n          }\r\n        }\r\n        for (let i = 0; i < symbolSellection.length; i++) {\r\n          checkLinesElements(symbolSellection[i]);\r\n        }\r\n      };\r\n    \r\n      const setBetZero = () => {\r\n        bet = 0;\r\n      };\r\n\r\n      const evaluatespinResults = () => {\r\n        checkFourFools();\r\n        checkElements();\r\n        if (winningLines.length > 0) {\r\n         props.winningLinesCallBack(winningLines, false);\r\n          for (let i = 0; i < winningLines.length; i++) {\r\n            drawScore(winningLines[i], false);\r\n          }\r\n        } else {\r\n          if (score - bet >= 0.2) {\r\n          props.looserCallBack();\r\n            finalScore=Math.round((score - bet) * 100) / 100;\r\n//            setScore(Math.round((score - bet) * 100) / 100);\r\n            finalScore=(Math.round((score - bet) * 100) / 100);\r\n            if (score < bet) {\r\n              setBetZero();\r\n            }\r\n          } else if (score - bet === 0) {\r\n            finalScore=score-bet;\r\n            setBetZero();\r\n//            setScore(0);\r\n            finalScore=0;\r\n        //CREATE A GAME OVER SET FROM HERE    \r\n            props.looserCallBack();\r\n          }\r\n        }\r\n      };\r\n\r\n      const checkWin = () => {\r\n        if (props.game > 0) {\r\n          let fool = checkFiveFools();\r\n          if (!fool) {\r\n            evaluatespinResults();\r\n          }\r\n        }\r\n    \r\n      };\r\n\r\n\r\n/**Testing part  */  \r\n  \r\nsetTimeout(()=>{\r\n    //    setScore(scr);\r\n    checkWin();\r\n    setScore(finalScore);\r\n    props.setCallbackScore(finalScore);\r\n    show=props.game;\r\n},7500)\r\n/**END of testing part */  \r\n\r\n/******************************************/  \r\n    }\r\n    const callbackSetMyScr = (myScr) => {\r\n      if(myScr===0){\r\n          setScore(myScr);\r\n\r\n   //     props.callBackSetBet(0);\r\n   //   btnDisable=true;\r\n    }else if(myScr>0){\r\n        setScore(myScr);\r\n    }\r\n      //score=myScr;\r\n    }\r\n\r\n    const callBackGetScore = () => {\r\n      return score;\r\n    }\r\n \r\n    return (    \r\n      <> \r\n      <Withdrawal getScoreCallback={callBackGetScore} setScoreCallBack={callbackSetMyScr}/>\r\n        <label>\r\n        Score:<span id=\"score\">{score}</span>\r\n    </label>\r\n    </>  \r\n    )\r\n}\r\n\r\n\r\nexport default CalculateScore;"],"mappings":"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"},"metadata":{},"sourceType":"module"}