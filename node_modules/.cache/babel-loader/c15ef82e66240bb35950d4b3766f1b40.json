{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar rlp = require(\"rlp\");\n\nvar ethUtil = require('ethereumjs-util');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar Account =\n/** @class */\nfunction () {\n  function Account(data) {\n    var fields = [{\n      name: 'nonce',\n      default: Buffer.alloc(0)\n    }, {\n      name: 'balance',\n      default: Buffer.alloc(0)\n    }, {\n      name: 'stateRoot',\n      length: 32,\n      default: ethUtil.KECCAK256_RLP\n    }, {\n      name: 'codeHash',\n      length: 32,\n      default: ethUtil.KECCAK256_NULL\n    }];\n    ethUtil.defineProperties(this, fields, data);\n  }\n\n  Account.prototype.serialize = function () {\n    return rlp.encode([this.nonce, this.balance, this.stateRoot, this.codeHash]);\n  };\n\n  Account.prototype.isContract = function () {\n    return this.codeHash.toString('hex') !== ethUtil.KECCAK256_NULL_S;\n  };\n\n  Account.prototype.getCode = function (trie, cb) {\n    if (!this.isContract()) {\n      cb(null, Buffer.alloc(0));\n      return;\n    }\n\n    trie.getRaw(this.codeHash, cb);\n  };\n\n  Account.prototype.setCode = function (trie, code, cb) {\n    var _this = this;\n\n    this.codeHash = ethUtil.keccak256(code);\n\n    if (this.codeHash.toString('hex') === ethUtil.KECCAK256_NULL_S) {\n      cb(null, Buffer.alloc(0));\n      return;\n    }\n\n    trie.putRaw(this.codeHash, code, function (err) {\n      cb(err, _this.codeHash);\n    });\n  };\n\n  Account.prototype.getStorage = function (trie, key, cb) {\n    var t = trie.copy();\n    t.root = this.stateRoot;\n    t.get(key, cb);\n  };\n\n  Account.prototype.setStorage = function (trie, key, val, cb) {\n    var _this = this;\n\n    var t = trie.copy();\n    t.root = this.stateRoot;\n    t.put(key, val, function (err) {\n      if (err) return cb();\n      _this.stateRoot = t.root;\n      cb();\n    });\n  };\n\n  Account.prototype.isEmpty = function () {\n    return this.balance.toString('hex') === '' && this.nonce.toString('hex') === '' && this.stateRoot.toString('hex') === ethUtil.KECCAK256_RLP_S && this.codeHash.toString('hex') === ethUtil.KECCAK256_NULL_S;\n  };\n\n  return Account;\n}();\n\nexports.default = Account;","map":{"version":3,"mappings":"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","names":["ethUtil","require","Buffer","data","fields","name","default","alloc","length","KECCAK256_RLP","KECCAK256_NULL","defineProperties","Account","rlp","encode","nonce","balance","stateRoot","codeHash","toString","KECCAK256_NULL_S","trie","cb","isContract","getRaw","code","keccak256","putRaw","err","_this","key","t","copy","root","get","val","put","KECCAK256_RLP_S"],"sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}