{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recoverTypedSignature_v4 = exports.recoverTypedSignature = exports.signTypedData_v4 = exports.signTypedData = exports.recoverTypedMessage = exports.signTypedMessage = exports.getEncryptionPublicKey = exports.decryptSafely = exports.decrypt = exports.encryptSafely = exports.encrypt = exports.recoverTypedSignatureLegacy = exports.signTypedDataLegacy = exports.typedSignatureHash = exports.extractPublicKey = exports.recoverPersonalSignature = exports.personalSign = exports.normalize = exports.concatSig = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = void 0;\n\nvar ethUtil = require(\"ethereumjs-util\");\n\nvar ethAbi = require(\"ethereumjs-abi\");\n\nvar nacl = require(\"tweetnacl\");\n\nvar naclUtil = require(\"tweetnacl-util\");\n\nvar TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            type: {\n              type: 'string'\n            }\n          },\n          required: ['name', 'type']\n        }\n      }\n    },\n    primaryType: {\n      type: 'string'\n    },\n    domain: {\n      type: 'object'\n    },\n    message: {\n      type: 'object'\n    }\n  },\n  required: ['types', 'primaryType', 'domain', 'message']\n};\nexports.TYPED_MESSAGE_SCHEMA = TYPED_MESSAGE_SCHEMA;\n/**\n * A collection of utility functions used for signing typed data\n */\n\nvar TypedDataUtils = {\n  /**\n   * Encodes an object by encoding and concatenating each of its members\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to encode\n   * @param {Object} types - Type definitions\n   * @returns {Buffer} - Encoded representation of an object\n   */\n  encodeData: function (primaryType, data, types, useV4) {\n    var _this = this;\n\n    if (useV4 === void 0) {\n      useV4 = true;\n    }\n\n    var encodedTypes = ['bytes32'];\n    var encodedValues = [this.hashType(primaryType, types)];\n\n    if (useV4) {\n      var encodeField_1 = function (name, type, value) {\n        if (types[type] !== undefined) {\n          // eslint-disable-next-line no-eq-null\n          return ['bytes32', value == null ? '0x0000000000000000000000000000000000000000000000000000000000000000' : ethUtil.sha3(_this.encodeData(type, value, types, useV4))];\n        }\n\n        if (value === undefined) {\n          throw new Error(\"missing value for field \" + name + \" of type \" + type);\n        }\n\n        if (type === 'bytes') {\n          return ['bytes32', ethUtil.sha3(value)];\n        }\n\n        if (type === 'string') {\n          // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n          if (typeof value === 'string') {\n            value = Buffer.from(value, 'utf8');\n          }\n\n          return ['bytes32', ethUtil.sha3(value)];\n        }\n\n        if (type.lastIndexOf(']') === type.length - 1) {\n          var parsedType_1 = type.slice(0, type.lastIndexOf('['));\n          var typeValuePairs = value.map(function (item) {\n            return encodeField_1(name, parsedType_1, item);\n          });\n          return ['bytes32', ethUtil.sha3(ethAbi.rawEncode(typeValuePairs.map(function (_a) {\n            var t = _a[0];\n            return t;\n          }), typeValuePairs.map(function (_a) {\n            var v = _a[1];\n            return v;\n          })))];\n        }\n\n        return [type, value];\n      };\n\n      for (var _i = 0, _a = types[primaryType]; _i < _a.length; _i++) {\n        var field = _a[_i];\n\n        var _b = encodeField_1(field.name, field.type, data[field.name]),\n            type = _b[0],\n            value = _b[1];\n\n        encodedTypes.push(type);\n        encodedValues.push(value);\n      }\n    } else {\n      for (var _c = 0, _d = types[primaryType]; _c < _d.length; _c++) {\n        var field = _d[_c];\n        var value = data[field.name];\n\n        if (value !== undefined) {\n          if (field.type === 'bytes') {\n            encodedTypes.push('bytes32');\n            value = ethUtil.sha3(value);\n            encodedValues.push(value);\n          } else if (field.type === 'string') {\n            encodedTypes.push('bytes32'); // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n\n            if (typeof value === 'string') {\n              value = Buffer.from(value, 'utf8');\n            }\n\n            value = ethUtil.sha3(value);\n            encodedValues.push(value);\n          } else if (types[field.type] !== undefined) {\n            encodedTypes.push('bytes32');\n            value = ethUtil.sha3(this.encodeData(field.type, value, types, useV4));\n            encodedValues.push(value);\n          } else if (field.type.lastIndexOf(']') === field.type.length - 1) {\n            throw new Error('Arrays are unimplemented in encodeData; use V4 extension');\n          } else {\n            encodedTypes.push(field.type);\n            encodedValues.push(value);\n          }\n        }\n      }\n    }\n\n    return ethAbi.rawEncode(encodedTypes, encodedValues);\n  },\n\n  /**\n   * Encodes the type of an object by encoding a comma delimited list of its members\n   *\n   * @param {string} primaryType - Root type to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of the type of an object\n   */\n  encodeType: function (primaryType, types) {\n    var result = '';\n    var deps = this.findTypeDependencies(primaryType, types).filter(function (dep) {\n      return dep !== primaryType;\n    });\n    deps = [primaryType].concat(deps.sort());\n\n    for (var _i = 0, deps_1 = deps; _i < deps_1.length; _i++) {\n      var type = deps_1[_i];\n      var children = types[type];\n\n      if (!children) {\n        throw new Error(\"No type definition specified: \" + type);\n      }\n\n      result += type + \"(\" + types[type].map(function (_a) {\n        var name = _a.name,\n            t = _a.type;\n        return t + \" \" + name;\n      }).join(',') + \")\";\n    }\n\n    return result;\n  },\n\n  /**\n   * Finds all types within a type definition object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} types - Type definitions\n   * @param {Array} results - current set of accumulated types\n   * @returns {Array} - Set of all types found in the type definition\n   */\n  findTypeDependencies: function (primaryType, types, results) {\n    if (results === void 0) {\n      results = [];\n    }\n\n    primaryType = primaryType.match(/^\\w*/u)[0];\n\n    if (results.includes(primaryType) || types[primaryType] === undefined) {\n      return results;\n    }\n\n    results.push(primaryType);\n\n    for (var _i = 0, _a = types[primaryType]; _i < _a.length; _i++) {\n      var field = _a[_i];\n\n      for (var _b = 0, _c = this.findTypeDependencies(field.type, types, results); _b < _c.length; _b++) {\n        var dep = _c[_b];\n        !results.includes(dep) && results.push(dep);\n      }\n    }\n\n    return results;\n  },\n\n  /**\n   * Hashes an object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to hash\n   * @param {Object} types - Type definitions\n   * @returns {Buffer} - Hash of an object\n   */\n  hashStruct: function (primaryType, data, types, useV4) {\n    if (useV4 === void 0) {\n      useV4 = true;\n    }\n\n    return ethUtil.sha3(this.encodeData(primaryType, data, types, useV4));\n  },\n\n  /**\n   * Hashes the type of an object\n   *\n   * @param {string} primaryType - Root type to hash\n   * @param {Object} types - Type definitions\n   * @returns {Buffer} - Hash of an object\n   */\n  hashType: function (primaryType, types) {\n    return ethUtil.sha3(this.encodeType(primaryType, types));\n  },\n\n  /**\n   * Removes properties from a message object that are not defined per EIP-712\n   *\n   * @param {Object} data - typed message object\n   * @returns {Object} - typed message object with only allowed fields\n   */\n  sanitizeData: function (data) {\n    var sanitizedData = {};\n\n    for (var key in TYPED_MESSAGE_SCHEMA.properties) {\n      if (data[key]) {\n        sanitizedData[key] = data[key];\n      }\n    }\n\n    if ('types' in sanitizedData) {\n      sanitizedData.types = __assign({\n        EIP712Domain: []\n      }, sanitizedData.types);\n    }\n\n    return sanitizedData;\n  },\n\n  /**\n   * Signs a typed message as per EIP-712 and returns its sha3 hash\n   *\n   * @param {Object} typedData - Types message data to sign\n   * @returns {Buffer} - sha3 hash of the resulting signed message\n   */\n  sign: function (typedData, useV4) {\n    if (useV4 === void 0) {\n      useV4 = true;\n    }\n\n    var sanitizedData = this.sanitizeData(typedData);\n    var parts = [Buffer.from('1901', 'hex')];\n    parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4));\n\n    if (sanitizedData.primaryType !== 'EIP712Domain') {\n      parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4));\n    }\n\n    return ethUtil.sha3(Buffer.concat(parts));\n  }\n};\nexports.TypedDataUtils = TypedDataUtils;\n\nfunction concatSig(v, r, s) {\n  var rSig = ethUtil.fromSigned(r);\n  var sSig = ethUtil.fromSigned(s);\n  var vSig = ethUtil.bufferToInt(v);\n  var rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64);\n  var sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64);\n  var vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));\n  return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex');\n}\n\nexports.concatSig = concatSig;\n\nfunction normalize(input) {\n  if (!input) {\n    return undefined;\n  }\n\n  if (typeof input === 'number') {\n    var buffer = ethUtil.toBuffer(input);\n    input = ethUtil.bufferToHex(buffer);\n  }\n\n  if (typeof input !== 'string') {\n    var msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n    msg += \" received \" + typeof input + \": \" + input;\n    throw new Error(msg);\n  }\n\n  return ethUtil.addHexPrefix(input.toLowerCase());\n}\n\nexports.normalize = normalize;\n\nfunction personalSign(privateKey, msgParams) {\n  var message = ethUtil.toBuffer(msgParams.data);\n  var msgHash = ethUtil.hashPersonalMessage(message);\n  var sig = ethUtil.ecsign(msgHash, privateKey);\n  var serialized = ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n  return serialized;\n}\n\nexports.personalSign = personalSign;\n\nfunction recoverPersonalSignature(msgParams) {\n  var publicKey = getPublicKeyFor(msgParams);\n  var sender = ethUtil.publicToAddress(publicKey);\n  var senderHex = ethUtil.bufferToHex(sender);\n  return senderHex;\n}\n\nexports.recoverPersonalSignature = recoverPersonalSignature;\n\nfunction extractPublicKey(msgParams) {\n  var publicKey = getPublicKeyFor(msgParams);\n  return \"0x\" + publicKey.toString('hex');\n}\n\nexports.extractPublicKey = extractPublicKey;\n\nfunction externalTypedSignatureHash(typedData) {\n  var hashBuffer = typedSignatureHash(typedData);\n  return ethUtil.bufferToHex(hashBuffer);\n}\n\nexports.typedSignatureHash = externalTypedSignatureHash;\n\nfunction signTypedDataLegacy(privateKey, msgParams) {\n  var msgHash = typedSignatureHash(msgParams.data);\n  var sig = ethUtil.ecsign(msgHash, privateKey);\n  return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\n\nexports.signTypedDataLegacy = signTypedDataLegacy;\n\nfunction recoverTypedSignatureLegacy(msgParams) {\n  var msgHash = typedSignatureHash(msgParams.data);\n  var publicKey = recoverPublicKey(msgHash, msgParams.sig);\n  var sender = ethUtil.publicToAddress(publicKey);\n  return ethUtil.bufferToHex(sender);\n}\n\nexports.recoverTypedSignatureLegacy = recoverTypedSignatureLegacy;\n\nfunction encrypt(receiverPublicKey, msgParams, version) {\n  switch (version) {\n    case 'x25519-xsalsa20-poly1305':\n      {\n        if (typeof msgParams.data !== 'string') {\n          throw new Error('Cannot detect secret message, message params should be of the form {data: \"secret message\"} ');\n        } // generate ephemeral keypair\n\n\n        var ephemeralKeyPair = nacl.box.keyPair(); // assemble encryption parameters - from string to UInt8\n\n        var pubKeyUInt8Array = void 0;\n\n        try {\n          pubKeyUInt8Array = naclUtil.decodeBase64(receiverPublicKey);\n        } catch (err) {\n          throw new Error('Bad public key');\n        }\n\n        var msgParamsUInt8Array = naclUtil.decodeUTF8(msgParams.data);\n        var nonce = nacl.randomBytes(nacl.box.nonceLength); // encrypt\n\n        var encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey); // handle encrypted data\n\n        var output = {\n          version: 'x25519-xsalsa20-poly1305',\n          nonce: naclUtil.encodeBase64(nonce),\n          ephemPublicKey: naclUtil.encodeBase64(ephemeralKeyPair.publicKey),\n          ciphertext: naclUtil.encodeBase64(encryptedMessage)\n        }; // return encrypted msg data\n\n        return output;\n      }\n\n    default:\n      throw new Error('Encryption type/version not supported');\n  }\n}\n\nexports.encrypt = encrypt;\n\nfunction encryptSafely(receiverPublicKey, msgParams, version) {\n  var DEFAULT_PADDING_LENGTH = Math.pow(2, 11);\n  var NACL_EXTRA_BYTES = 16;\n  var data = msgParams.data;\n\n  if (!data) {\n    throw new Error('Cannot encrypt empty msg.data');\n  }\n\n  if (typeof data === 'object' && 'toJSON' in data) {\n    // remove toJSON attack vector\n    // TODO, check all possible children\n    throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property');\n  } // add padding\n\n\n  var dataWithPadding = {\n    data: data,\n    padding: ''\n  }; // calculate padding\n\n  var dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8');\n  var modVal = dataLength % DEFAULT_PADDING_LENGTH;\n  var padLength = 0; // Only pad if necessary\n\n  if (modVal > 0) {\n    padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES; // nacl extra bytes\n  }\n\n  dataWithPadding.padding = '0'.repeat(padLength);\n  var paddedMsgParams = {\n    data: JSON.stringify(dataWithPadding)\n  };\n  return encrypt(receiverPublicKey, paddedMsgParams, version);\n}\n\nexports.encryptSafely = encryptSafely;\n\nfunction decrypt(encryptedData, receiverPrivateKey) {\n  switch (encryptedData.version) {\n    case 'x25519-xsalsa20-poly1305':\n      {\n        // string to buffer to UInt8Array\n        var recieverPrivateKeyUint8Array = nacl_decodeHex(receiverPrivateKey);\n        var recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey; // assemble decryption parameters\n\n        var nonce = naclUtil.decodeBase64(encryptedData.nonce);\n        var ciphertext = naclUtil.decodeBase64(encryptedData.ciphertext);\n        var ephemPublicKey = naclUtil.decodeBase64(encryptedData.ephemPublicKey); // decrypt\n\n        var decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey); // return decrypted msg data\n\n        var output = void 0;\n\n        try {\n          output = naclUtil.encodeUTF8(decryptedMessage);\n        } catch (err) {\n          throw new Error('Decryption failed.');\n        }\n\n        if (output) {\n          return output;\n        }\n\n        throw new Error('Decryption failed.');\n      }\n\n    default:\n      throw new Error('Encryption type/version not supported.');\n  }\n}\n\nexports.decrypt = decrypt;\n\nfunction decryptSafely(encryptedData, receiverPrivateKey) {\n  var dataWithPadding = JSON.parse(decrypt(encryptedData, receiverPrivateKey));\n  return dataWithPadding.data;\n}\n\nexports.decryptSafely = decryptSafely;\n\nfunction getEncryptionPublicKey(privateKey) {\n  var privateKeyUint8Array = nacl_decodeHex(privateKey);\n  var encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;\n  return naclUtil.encodeBase64(encryptionPublicKey);\n}\n\nexports.getEncryptionPublicKey = getEncryptionPublicKey;\n/**\n * A generic entry point for all typed data methods to be passed, includes a version parameter.\n */\n\nfunction signTypedMessage(privateKey, msgParams, version) {\n  if (version === void 0) {\n    version = 'V4';\n  }\n\n  switch (version) {\n    case 'V1':\n      return signTypedDataLegacy(privateKey, msgParams);\n\n    case 'V3':\n      return signTypedData(privateKey, msgParams);\n\n    case 'V4':\n    default:\n      return signTypedData_v4(privateKey, msgParams);\n  }\n}\n\nexports.signTypedMessage = signTypedMessage;\n\nfunction recoverTypedMessage(msgParams, version) {\n  if (version === void 0) {\n    version = 'V4';\n  }\n\n  switch (version) {\n    case 'V1':\n      return recoverTypedSignatureLegacy(msgParams);\n\n    case 'V3':\n      return recoverTypedSignature(msgParams);\n\n    case 'V4':\n    default:\n      return recoverTypedSignature_v4(msgParams);\n  }\n}\n\nexports.recoverTypedMessage = recoverTypedMessage;\n\nfunction signTypedData(privateKey, msgParams) {\n  var message = TypedDataUtils.sign(msgParams.data, false);\n  var sig = ethUtil.ecsign(message, privateKey);\n  return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\n\nexports.signTypedData = signTypedData;\n\nfunction signTypedData_v4(privateKey, msgParams) {\n  var message = TypedDataUtils.sign(msgParams.data);\n  var sig = ethUtil.ecsign(message, privateKey);\n  return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\n\nexports.signTypedData_v4 = signTypedData_v4;\n\nfunction recoverTypedSignature(msgParams) {\n  var message = TypedDataUtils.sign(msgParams.data, false);\n  var publicKey = recoverPublicKey(message, msgParams.sig);\n  var sender = ethUtil.publicToAddress(publicKey);\n  return ethUtil.bufferToHex(sender);\n}\n\nexports.recoverTypedSignature = recoverTypedSignature;\n\nfunction recoverTypedSignature_v4(msgParams) {\n  var message = TypedDataUtils.sign(msgParams.data);\n  var publicKey = recoverPublicKey(message, msgParams.sig);\n  var sender = ethUtil.publicToAddress(publicKey);\n  return ethUtil.bufferToHex(sender);\n}\n\nexports.recoverTypedSignature_v4 = recoverTypedSignature_v4;\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\n\nfunction typedSignatureHash(typedData) {\n  var error = new Error('Expect argument to be non-empty array');\n\n  if (typeof typedData !== 'object' || !('length' in typedData) || !typedData.length) {\n    throw error;\n  }\n\n  var data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value;\n  });\n  var types = typedData.map(function (e) {\n    return e.type;\n  });\n  var schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n\n    return e.type + \" \" + e.name;\n  });\n  return ethAbi.soliditySHA3(['bytes32', 'bytes32'], [ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema), ethAbi.soliditySHA3(types, data)]);\n}\n\nfunction recoverPublicKey(hash, sig) {\n  var signature = ethUtil.toBuffer(sig);\n  var sigParams = ethUtil.fromRpcSig(signature);\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);\n}\n\nfunction getPublicKeyFor(msgParams) {\n  var message = ethUtil.toBuffer(msgParams.data);\n  var msgHash = ethUtil.hashPersonalMessage(message);\n  return recoverPublicKey(msgHash, msgParams.sig);\n}\n\nfunction padWithZeroes(number, length) {\n  var myString = \"\" + number;\n\n  while (myString.length < length) {\n    myString = \"0\" + myString;\n  }\n\n  return myString;\n} // converts hex strings to the Uint8Array format used by nacl\n\n\nfunction nacl_decodeHex(msgHex) {\n  var msgBase64 = Buffer.from(msgHex, 'hex').toString('base64');\n  return naclUtil.decodeBase64(msgBase64);\n}","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","recoverTypedSignature_v4","recoverTypedSignature","signTypedData_v4","signTypedData","recoverTypedMessage","signTypedMessage","getEncryptionPublicKey","decryptSafely","decrypt","encryptSafely","encrypt","recoverTypedSignatureLegacy","signTypedDataLegacy","typedSignatureHash","extractPublicKey","recoverPersonalSignature","personalSign","normalize","concatSig","TypedDataUtils","TYPED_MESSAGE_SCHEMA","ethUtil","require","ethAbi","nacl","naclUtil","type","properties","types","additionalProperties","items","name","required","primaryType","domain","message","encodeData","data","useV4","_this","encodedTypes","encodedValues","hashType","encodeField_1","undefined","sha3","Error","Buffer","from","lastIndexOf","parsedType_1","slice","typeValuePairs","map","item","rawEncode","_a","v","_i","field","_b","push","_c","_d","encodeType","result","deps","findTypeDependencies","filter","dep","concat","sort","deps_1","children","join","results","match","includes","hashStruct","sanitizeData","sanitizedData","key","EIP712Domain","sign","typedData","parts","r","rSig","fromSigned","sSig","vSig","bufferToInt","rStr","padWithZeroes","toUnsigned","toString","sStr","vStr","stripHexPrefix","intToHex","addHexPrefix","input","buffer","toBuffer","bufferToHex","msg","toLowerCase","privateKey","msgParams","msgHash","hashPersonalMessage","sig","ecsign","serialized","publicKey","getPublicKeyFor","sender","publicToAddress","senderHex","externalTypedSignatureHash","hashBuffer","recoverPublicKey","receiverPublicKey","version","ephemeralKeyPair","box","keyPair","pubKeyUInt8Array","decodeBase64","err","msgParamsUInt8Array","decodeUTF8","nonce","randomBytes","nonceLength","encryptedMessage","secretKey","output","encodeBase64","ephemPublicKey","ciphertext","DEFAULT_PADDING_LENGTH","Math","pow","NACL_EXTRA_BYTES","dataWithPadding","padding","dataLength","byteLength","JSON","stringify","modVal","padLength","repeat","paddedMsgParams","encryptedData","receiverPrivateKey","recieverPrivateKeyUint8Array","nacl_decodeHex","recieverEncryptionPrivateKey","fromSecretKey","decryptedMessage","open","encodeUTF8","parse","privateKeyUint8Array","encryptionPublicKey","error","e","schema","soliditySHA3","Array","fill","hash","signature","sigParams","fromRpcSig","ecrecover","number","myString","msgHex","msgBase64"],"sources":["F:/Games/slotmachinereact/node_modules/ganache-core/node_modules/eth-sig-util/index.js"],"sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.recoverTypedSignature_v4 = exports.recoverTypedSignature = exports.signTypedData_v4 = exports.signTypedData = exports.recoverTypedMessage = exports.signTypedMessage = exports.getEncryptionPublicKey = exports.decryptSafely = exports.decrypt = exports.encryptSafely = exports.encrypt = exports.recoverTypedSignatureLegacy = exports.signTypedDataLegacy = exports.typedSignatureHash = exports.extractPublicKey = exports.recoverPersonalSignature = exports.personalSign = exports.normalize = exports.concatSig = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = void 0;\nvar ethUtil = require(\"ethereumjs-util\");\nvar ethAbi = require(\"ethereumjs-abi\");\nvar nacl = require(\"tweetnacl\");\nvar naclUtil = require(\"tweetnacl-util\");\nvar TYPED_MESSAGE_SCHEMA = {\n    type: 'object',\n    properties: {\n        types: {\n            type: 'object',\n            additionalProperties: {\n                type: 'array',\n                items: {\n                    type: 'object',\n                    properties: {\n                        name: { type: 'string' },\n                        type: { type: 'string' },\n                    },\n                    required: ['name', 'type'],\n                },\n            },\n        },\n        primaryType: { type: 'string' },\n        domain: { type: 'object' },\n        message: { type: 'object' },\n    },\n    required: ['types', 'primaryType', 'domain', 'message'],\n};\nexports.TYPED_MESSAGE_SCHEMA = TYPED_MESSAGE_SCHEMA;\n/**\n * A collection of utility functions used for signing typed data\n */\nvar TypedDataUtils = {\n    /**\n     * Encodes an object by encoding and concatenating each of its members\n     *\n     * @param {string} primaryType - Root type\n     * @param {Object} data - Object to encode\n     * @param {Object} types - Type definitions\n     * @returns {Buffer} - Encoded representation of an object\n     */\n    encodeData: function (primaryType, data, types, useV4) {\n        var _this = this;\n        if (useV4 === void 0) { useV4 = true; }\n        var encodedTypes = ['bytes32'];\n        var encodedValues = [this.hashType(primaryType, types)];\n        if (useV4) {\n            var encodeField_1 = function (name, type, value) {\n                if (types[type] !== undefined) {\n                    // eslint-disable-next-line no-eq-null\n                    return ['bytes32', value == null ?\n                            '0x0000000000000000000000000000000000000000000000000000000000000000' :\n                            ethUtil.sha3(_this.encodeData(type, value, types, useV4))];\n                }\n                if (value === undefined) {\n                    throw new Error(\"missing value for field \" + name + \" of type \" + type);\n                }\n                if (type === 'bytes') {\n                    return ['bytes32', ethUtil.sha3(value)];\n                }\n                if (type === 'string') {\n                    // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n                    if (typeof value === 'string') {\n                        value = Buffer.from(value, 'utf8');\n                    }\n                    return ['bytes32', ethUtil.sha3(value)];\n                }\n                if (type.lastIndexOf(']') === type.length - 1) {\n                    var parsedType_1 = type.slice(0, type.lastIndexOf('['));\n                    var typeValuePairs = value.map(function (item) { return encodeField_1(name, parsedType_1, item); });\n                    return ['bytes32', ethUtil.sha3(ethAbi.rawEncode(typeValuePairs.map(function (_a) {\n                            var t = _a[0];\n                            return t;\n                        }), typeValuePairs.map(function (_a) {\n                            var v = _a[1];\n                            return v;\n                        })))];\n                }\n                return [type, value];\n            };\n            for (var _i = 0, _a = types[primaryType]; _i < _a.length; _i++) {\n                var field = _a[_i];\n                var _b = encodeField_1(field.name, field.type, data[field.name]), type = _b[0], value = _b[1];\n                encodedTypes.push(type);\n                encodedValues.push(value);\n            }\n        }\n        else {\n            for (var _c = 0, _d = types[primaryType]; _c < _d.length; _c++) {\n                var field = _d[_c];\n                var value = data[field.name];\n                if (value !== undefined) {\n                    if (field.type === 'bytes') {\n                        encodedTypes.push('bytes32');\n                        value = ethUtil.sha3(value);\n                        encodedValues.push(value);\n                    }\n                    else if (field.type === 'string') {\n                        encodedTypes.push('bytes32');\n                        // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n                        if (typeof value === 'string') {\n                            value = Buffer.from(value, 'utf8');\n                        }\n                        value = ethUtil.sha3(value);\n                        encodedValues.push(value);\n                    }\n                    else if (types[field.type] !== undefined) {\n                        encodedTypes.push('bytes32');\n                        value = ethUtil.sha3(this.encodeData(field.type, value, types, useV4));\n                        encodedValues.push(value);\n                    }\n                    else if (field.type.lastIndexOf(']') === field.type.length - 1) {\n                        throw new Error('Arrays are unimplemented in encodeData; use V4 extension');\n                    }\n                    else {\n                        encodedTypes.push(field.type);\n                        encodedValues.push(value);\n                    }\n                }\n            }\n        }\n        return ethAbi.rawEncode(encodedTypes, encodedValues);\n    },\n    /**\n     * Encodes the type of an object by encoding a comma delimited list of its members\n     *\n     * @param {string} primaryType - Root type to encode\n     * @param {Object} types - Type definitions\n     * @returns {string} - Encoded representation of the type of an object\n     */\n    encodeType: function (primaryType, types) {\n        var result = '';\n        var deps = this.findTypeDependencies(primaryType, types).filter(function (dep) { return dep !== primaryType; });\n        deps = [primaryType].concat(deps.sort());\n        for (var _i = 0, deps_1 = deps; _i < deps_1.length; _i++) {\n            var type = deps_1[_i];\n            var children = types[type];\n            if (!children) {\n                throw new Error(\"No type definition specified: \" + type);\n            }\n            result += type + \"(\" + types[type].map(function (_a) {\n                var name = _a.name, t = _a.type;\n                return t + \" \" + name;\n            }).join(',') + \")\";\n        }\n        return result;\n    },\n    /**\n     * Finds all types within a type definition object\n     *\n     * @param {string} primaryType - Root type\n     * @param {Object} types - Type definitions\n     * @param {Array} results - current set of accumulated types\n     * @returns {Array} - Set of all types found in the type definition\n     */\n    findTypeDependencies: function (primaryType, types, results) {\n        if (results === void 0) { results = []; }\n        primaryType = primaryType.match(/^\\w*/u)[0];\n        if (results.includes(primaryType) || types[primaryType] === undefined) {\n            return results;\n        }\n        results.push(primaryType);\n        for (var _i = 0, _a = types[primaryType]; _i < _a.length; _i++) {\n            var field = _a[_i];\n            for (var _b = 0, _c = this.findTypeDependencies(field.type, types, results); _b < _c.length; _b++) {\n                var dep = _c[_b];\n                !results.includes(dep) && results.push(dep);\n            }\n        }\n        return results;\n    },\n    /**\n     * Hashes an object\n     *\n     * @param {string} primaryType - Root type\n     * @param {Object} data - Object to hash\n     * @param {Object} types - Type definitions\n     * @returns {Buffer} - Hash of an object\n     */\n    hashStruct: function (primaryType, data, types, useV4) {\n        if (useV4 === void 0) { useV4 = true; }\n        return ethUtil.sha3(this.encodeData(primaryType, data, types, useV4));\n    },\n    /**\n     * Hashes the type of an object\n     *\n     * @param {string} primaryType - Root type to hash\n     * @param {Object} types - Type definitions\n     * @returns {Buffer} - Hash of an object\n     */\n    hashType: function (primaryType, types) {\n        return ethUtil.sha3(this.encodeType(primaryType, types));\n    },\n    /**\n     * Removes properties from a message object that are not defined per EIP-712\n     *\n     * @param {Object} data - typed message object\n     * @returns {Object} - typed message object with only allowed fields\n     */\n    sanitizeData: function (data) {\n        var sanitizedData = {};\n        for (var key in TYPED_MESSAGE_SCHEMA.properties) {\n            if (data[key]) {\n                sanitizedData[key] = data[key];\n            }\n        }\n        if ('types' in sanitizedData) {\n            sanitizedData.types = __assign({ EIP712Domain: [] }, sanitizedData.types);\n        }\n        return sanitizedData;\n    },\n    /**\n     * Signs a typed message as per EIP-712 and returns its sha3 hash\n     *\n     * @param {Object} typedData - Types message data to sign\n     * @returns {Buffer} - sha3 hash of the resulting signed message\n     */\n    sign: function (typedData, useV4) {\n        if (useV4 === void 0) { useV4 = true; }\n        var sanitizedData = this.sanitizeData(typedData);\n        var parts = [Buffer.from('1901', 'hex')];\n        parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4));\n        if (sanitizedData.primaryType !== 'EIP712Domain') {\n            parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4));\n        }\n        return ethUtil.sha3(Buffer.concat(parts));\n    },\n};\nexports.TypedDataUtils = TypedDataUtils;\nfunction concatSig(v, r, s) {\n    var rSig = ethUtil.fromSigned(r);\n    var sSig = ethUtil.fromSigned(s);\n    var vSig = ethUtil.bufferToInt(v);\n    var rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64);\n    var sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64);\n    var vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));\n    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex');\n}\nexports.concatSig = concatSig;\nfunction normalize(input) {\n    if (!input) {\n        return undefined;\n    }\n    if (typeof input === 'number') {\n        var buffer = ethUtil.toBuffer(input);\n        input = ethUtil.bufferToHex(buffer);\n    }\n    if (typeof input !== 'string') {\n        var msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n        msg += \" received \" + typeof input + \": \" + input;\n        throw new Error(msg);\n    }\n    return ethUtil.addHexPrefix(input.toLowerCase());\n}\nexports.normalize = normalize;\nfunction personalSign(privateKey, msgParams) {\n    var message = ethUtil.toBuffer(msgParams.data);\n    var msgHash = ethUtil.hashPersonalMessage(message);\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n    var serialized = ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n    return serialized;\n}\nexports.personalSign = personalSign;\nfunction recoverPersonalSignature(msgParams) {\n    var publicKey = getPublicKeyFor(msgParams);\n    var sender = ethUtil.publicToAddress(publicKey);\n    var senderHex = ethUtil.bufferToHex(sender);\n    return senderHex;\n}\nexports.recoverPersonalSignature = recoverPersonalSignature;\nfunction extractPublicKey(msgParams) {\n    var publicKey = getPublicKeyFor(msgParams);\n    return \"0x\" + publicKey.toString('hex');\n}\nexports.extractPublicKey = extractPublicKey;\nfunction externalTypedSignatureHash(typedData) {\n    var hashBuffer = typedSignatureHash(typedData);\n    return ethUtil.bufferToHex(hashBuffer);\n}\nexports.typedSignatureHash = externalTypedSignatureHash;\nfunction signTypedDataLegacy(privateKey, msgParams) {\n    var msgHash = typedSignatureHash(msgParams.data);\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n    return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\nexports.signTypedDataLegacy = signTypedDataLegacy;\nfunction recoverTypedSignatureLegacy(msgParams) {\n    var msgHash = typedSignatureHash(msgParams.data);\n    var publicKey = recoverPublicKey(msgHash, msgParams.sig);\n    var sender = ethUtil.publicToAddress(publicKey);\n    return ethUtil.bufferToHex(sender);\n}\nexports.recoverTypedSignatureLegacy = recoverTypedSignatureLegacy;\nfunction encrypt(receiverPublicKey, msgParams, version) {\n    switch (version) {\n        case 'x25519-xsalsa20-poly1305': {\n            if (typeof msgParams.data !== 'string') {\n                throw new Error('Cannot detect secret message, message params should be of the form {data: \"secret message\"} ');\n            }\n            // generate ephemeral keypair\n            var ephemeralKeyPair = nacl.box.keyPair();\n            // assemble encryption parameters - from string to UInt8\n            var pubKeyUInt8Array = void 0;\n            try {\n                pubKeyUInt8Array = naclUtil.decodeBase64(receiverPublicKey);\n            }\n            catch (err) {\n                throw new Error('Bad public key');\n            }\n            var msgParamsUInt8Array = naclUtil.decodeUTF8(msgParams.data);\n            var nonce = nacl.randomBytes(nacl.box.nonceLength);\n            // encrypt\n            var encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey);\n            // handle encrypted data\n            var output = {\n                version: 'x25519-xsalsa20-poly1305',\n                nonce: naclUtil.encodeBase64(nonce),\n                ephemPublicKey: naclUtil.encodeBase64(ephemeralKeyPair.publicKey),\n                ciphertext: naclUtil.encodeBase64(encryptedMessage),\n            };\n            // return encrypted msg data\n            return output;\n        }\n        default:\n            throw new Error('Encryption type/version not supported');\n    }\n}\nexports.encrypt = encrypt;\nfunction encryptSafely(receiverPublicKey, msgParams, version) {\n    var DEFAULT_PADDING_LENGTH = Math.pow(2, 11);\n    var NACL_EXTRA_BYTES = 16;\n    var data = msgParams.data;\n    if (!data) {\n        throw new Error('Cannot encrypt empty msg.data');\n    }\n    if (typeof data === 'object' && 'toJSON' in data) {\n        // remove toJSON attack vector\n        // TODO, check all possible children\n        throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property');\n    }\n    // add padding\n    var dataWithPadding = {\n        data: data,\n        padding: '',\n    };\n    // calculate padding\n    var dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8');\n    var modVal = dataLength % DEFAULT_PADDING_LENGTH;\n    var padLength = 0;\n    // Only pad if necessary\n    if (modVal > 0) {\n        padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES; // nacl extra bytes\n    }\n    dataWithPadding.padding = '0'.repeat(padLength);\n    var paddedMsgParams = { data: JSON.stringify(dataWithPadding) };\n    return encrypt(receiverPublicKey, paddedMsgParams, version);\n}\nexports.encryptSafely = encryptSafely;\nfunction decrypt(encryptedData, receiverPrivateKey) {\n    switch (encryptedData.version) {\n        case 'x25519-xsalsa20-poly1305': {\n            // string to buffer to UInt8Array\n            var recieverPrivateKeyUint8Array = nacl_decodeHex(receiverPrivateKey);\n            var recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey;\n            // assemble decryption parameters\n            var nonce = naclUtil.decodeBase64(encryptedData.nonce);\n            var ciphertext = naclUtil.decodeBase64(encryptedData.ciphertext);\n            var ephemPublicKey = naclUtil.decodeBase64(encryptedData.ephemPublicKey);\n            // decrypt\n            var decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey);\n            // return decrypted msg data\n            var output = void 0;\n            try {\n                output = naclUtil.encodeUTF8(decryptedMessage);\n            }\n            catch (err) {\n                throw new Error('Decryption failed.');\n            }\n            if (output) {\n                return output;\n            }\n            throw new Error('Decryption failed.');\n        }\n        default:\n            throw new Error('Encryption type/version not supported.');\n    }\n}\nexports.decrypt = decrypt;\nfunction decryptSafely(encryptedData, receiverPrivateKey) {\n    var dataWithPadding = JSON.parse(decrypt(encryptedData, receiverPrivateKey));\n    return dataWithPadding.data;\n}\nexports.decryptSafely = decryptSafely;\nfunction getEncryptionPublicKey(privateKey) {\n    var privateKeyUint8Array = nacl_decodeHex(privateKey);\n    var encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;\n    return naclUtil.encodeBase64(encryptionPublicKey);\n}\nexports.getEncryptionPublicKey = getEncryptionPublicKey;\n/**\n * A generic entry point for all typed data methods to be passed, includes a version parameter.\n */\nfunction signTypedMessage(privateKey, msgParams, version) {\n    if (version === void 0) { version = 'V4'; }\n    switch (version) {\n        case 'V1':\n            return signTypedDataLegacy(privateKey, msgParams);\n        case 'V3':\n            return signTypedData(privateKey, msgParams);\n        case 'V4':\n        default:\n            return signTypedData_v4(privateKey, msgParams);\n    }\n}\nexports.signTypedMessage = signTypedMessage;\nfunction recoverTypedMessage(msgParams, version) {\n    if (version === void 0) { version = 'V4'; }\n    switch (version) {\n        case 'V1':\n            return recoverTypedSignatureLegacy(msgParams);\n        case 'V3':\n            return recoverTypedSignature(msgParams);\n        case 'V4':\n        default:\n            return recoverTypedSignature_v4(msgParams);\n    }\n}\nexports.recoverTypedMessage = recoverTypedMessage;\nfunction signTypedData(privateKey, msgParams) {\n    var message = TypedDataUtils.sign(msgParams.data, false);\n    var sig = ethUtil.ecsign(message, privateKey);\n    return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\nexports.signTypedData = signTypedData;\nfunction signTypedData_v4(privateKey, msgParams) {\n    var message = TypedDataUtils.sign(msgParams.data);\n    var sig = ethUtil.ecsign(message, privateKey);\n    return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\nexports.signTypedData_v4 = signTypedData_v4;\nfunction recoverTypedSignature(msgParams) {\n    var message = TypedDataUtils.sign(msgParams.data, false);\n    var publicKey = recoverPublicKey(message, msgParams.sig);\n    var sender = ethUtil.publicToAddress(publicKey);\n    return ethUtil.bufferToHex(sender);\n}\nexports.recoverTypedSignature = recoverTypedSignature;\nfunction recoverTypedSignature_v4(msgParams) {\n    var message = TypedDataUtils.sign(msgParams.data);\n    var publicKey = recoverPublicKey(message, msgParams.sig);\n    var sender = ethUtil.publicToAddress(publicKey);\n    return ethUtil.bufferToHex(sender);\n}\nexports.recoverTypedSignature_v4 = recoverTypedSignature_v4;\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction typedSignatureHash(typedData) {\n    var error = new Error('Expect argument to be non-empty array');\n    if (typeof typedData !== 'object' || !('length' in typedData) || !typedData.length) {\n        throw error;\n    }\n    var data = typedData.map(function (e) {\n        return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value;\n    });\n    var types = typedData.map(function (e) {\n        return e.type;\n    });\n    var schema = typedData.map(function (e) {\n        if (!e.name) {\n            throw error;\n        }\n        return e.type + \" \" + e.name;\n    });\n    return ethAbi.soliditySHA3(['bytes32', 'bytes32'], [\n        ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),\n        ethAbi.soliditySHA3(types, data),\n    ]);\n}\nfunction recoverPublicKey(hash, sig) {\n    var signature = ethUtil.toBuffer(sig);\n    var sigParams = ethUtil.fromRpcSig(signature);\n    return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);\n}\nfunction getPublicKeyFor(msgParams) {\n    var message = ethUtil.toBuffer(msgParams.data);\n    var msgHash = ethUtil.hashPersonalMessage(message);\n    return recoverPublicKey(msgHash, msgParams.sig);\n}\nfunction padWithZeroes(number, length) {\n    var myString = \"\" + number;\n    while (myString.length < length) {\n        myString = \"0\" + myString;\n    }\n    return myString;\n}\n// converts hex strings to the Uint8Array format used by nacl\nfunction nacl_decodeHex(msgHex) {\n    var msgBase64 = Buffer.from(msgHex, 'hex').toString('base64');\n    return naclUtil.decodeBase64(msgBase64);\n}\n"],"mappings":"AAAA;;AACA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;IACpC,KAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;MACA,KAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IACP;;IACD,OAAON,CAAP;EACH,CAPD;;EAQA,OAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWAN,MAAM,CAACa,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,wBAAR,GAAmCF,OAAO,CAACG,qBAAR,GAAgCH,OAAO,CAACI,gBAAR,GAA2BJ,OAAO,CAACK,aAAR,GAAwBL,OAAO,CAACM,mBAAR,GAA8BN,OAAO,CAACO,gBAAR,GAA2BP,OAAO,CAACQ,sBAAR,GAAiCR,OAAO,CAACS,aAAR,GAAwBT,OAAO,CAACU,OAAR,GAAkBV,OAAO,CAACW,aAAR,GAAwBX,OAAO,CAACY,OAAR,GAAkBZ,OAAO,CAACa,2BAAR,GAAsCb,OAAO,CAACc,mBAAR,GAA8Bd,OAAO,CAACe,kBAAR,GAA6Bf,OAAO,CAACgB,gBAAR,GAA2BhB,OAAO,CAACiB,wBAAR,GAAmCjB,OAAO,CAACkB,YAAR,GAAuBlB,OAAO,CAACmB,SAAR,GAAoBnB,OAAO,CAACoB,SAAR,GAAoBpB,OAAO,CAACqB,cAAR,GAAyBrB,OAAO,CAACsB,oBAAR,GAA+B,KAAK,CAA/jB;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAArB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,WAAD,CAAlB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,gBAAD,CAAtB;;AACA,IAAIF,oBAAoB,GAAG;EACvBM,IAAI,EAAE,QADiB;EAEvBC,UAAU,EAAE;IACRC,KAAK,EAAE;MACHF,IAAI,EAAE,QADH;MAEHG,oBAAoB,EAAE;QAClBH,IAAI,EAAE,OADY;QAElBI,KAAK,EAAE;UACHJ,IAAI,EAAE,QADH;UAEHC,UAAU,EAAE;YACRI,IAAI,EAAE;cAAEL,IAAI,EAAE;YAAR,CADE;YAERA,IAAI,EAAE;cAAEA,IAAI,EAAE;YAAR;UAFE,CAFT;UAMHM,QAAQ,EAAE,CAAC,MAAD,EAAS,MAAT;QANP;MAFW;IAFnB,CADC;IAeRC,WAAW,EAAE;MAAEP,IAAI,EAAE;IAAR,CAfL;IAgBRQ,MAAM,EAAE;MAAER,IAAI,EAAE;IAAR,CAhBA;IAiBRS,OAAO,EAAE;MAAET,IAAI,EAAE;IAAR;EAjBD,CAFW;EAqBvBM,QAAQ,EAAE,CAAC,OAAD,EAAU,aAAV,EAAyB,QAAzB,EAAmC,SAAnC;AArBa,CAA3B;AAuBAlC,OAAO,CAACsB,oBAAR,GAA+BA,oBAA/B;AACA;AACA;AACA;;AACA,IAAID,cAAc,GAAG;EACjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIiB,UAAU,EAAE,UAAUH,WAAV,EAAuBI,IAAvB,EAA6BT,KAA7B,EAAoCU,KAApC,EAA2C;IACnD,IAAIC,KAAK,GAAG,IAAZ;;IACA,IAAID,KAAK,KAAK,KAAK,CAAnB,EAAsB;MAAEA,KAAK,GAAG,IAAR;IAAe;;IACvC,IAAIE,YAAY,GAAG,CAAC,SAAD,CAAnB;IACA,IAAIC,aAAa,GAAG,CAAC,KAAKC,QAAL,CAAcT,WAAd,EAA2BL,KAA3B,CAAD,CAApB;;IACA,IAAIU,KAAJ,EAAW;MACP,IAAIK,aAAa,GAAG,UAAUZ,IAAV,EAAgBL,IAAhB,EAAsB3B,KAAtB,EAA6B;QAC7C,IAAI6B,KAAK,CAACF,IAAD,CAAL,KAAgBkB,SAApB,EAA+B;UAC3B;UACA,OAAO,CAAC,SAAD,EAAY7C,KAAK,IAAI,IAAT,GACX,oEADW,GAEXsB,OAAO,CAACwB,IAAR,CAAaN,KAAK,CAACH,UAAN,CAAiBV,IAAjB,EAAuB3B,KAAvB,EAA8B6B,KAA9B,EAAqCU,KAArC,CAAb,CAFD,CAAP;QAGH;;QACD,IAAIvC,KAAK,KAAK6C,SAAd,EAAyB;UACrB,MAAM,IAAIE,KAAJ,CAAU,6BAA6Bf,IAA7B,GAAoC,WAApC,GAAkDL,IAA5D,CAAN;QACH;;QACD,IAAIA,IAAI,KAAK,OAAb,EAAsB;UAClB,OAAO,CAAC,SAAD,EAAYL,OAAO,CAACwB,IAAR,CAAa9C,KAAb,CAAZ,CAAP;QACH;;QACD,IAAI2B,IAAI,KAAK,QAAb,EAAuB;UACnB;UACA,IAAI,OAAO3B,KAAP,KAAiB,QAArB,EAA+B;YAC3BA,KAAK,GAAGgD,MAAM,CAACC,IAAP,CAAYjD,KAAZ,EAAmB,MAAnB,CAAR;UACH;;UACD,OAAO,CAAC,SAAD,EAAYsB,OAAO,CAACwB,IAAR,CAAa9C,KAAb,CAAZ,CAAP;QACH;;QACD,IAAI2B,IAAI,CAACuB,WAAL,CAAiB,GAAjB,MAA0BvB,IAAI,CAACnC,MAAL,GAAc,CAA5C,EAA+C;UAC3C,IAAI2D,YAAY,GAAGxB,IAAI,CAACyB,KAAL,CAAW,CAAX,EAAczB,IAAI,CAACuB,WAAL,CAAiB,GAAjB,CAAd,CAAnB;UACA,IAAIG,cAAc,GAAGrD,KAAK,CAACsD,GAAN,CAAU,UAAUC,IAAV,EAAgB;YAAE,OAAOX,aAAa,CAACZ,IAAD,EAAOmB,YAAP,EAAqBI,IAArB,CAApB;UAAiD,CAA7E,CAArB;UACA,OAAO,CAAC,SAAD,EAAYjC,OAAO,CAACwB,IAAR,CAAatB,MAAM,CAACgC,SAAP,CAAiBH,cAAc,CAACC,GAAf,CAAmB,UAAUG,EAAV,EAAc;YAC1E,IAAItE,CAAC,GAAGsE,EAAE,CAAC,CAAD,CAAV;YACA,OAAOtE,CAAP;UACH,CAH4C,CAAjB,EAGxBkE,cAAc,CAACC,GAAf,CAAmB,UAAUG,EAAV,EAAc;YACjC,IAAIC,CAAC,GAAGD,EAAE,CAAC,CAAD,CAAV;YACA,OAAOC,CAAP;UACH,CAHG,CAHwB,CAAb,CAAZ,CAAP;QAOH;;QACD,OAAO,CAAC/B,IAAD,EAAO3B,KAAP,CAAP;MACH,CAhCD;;MAiCA,KAAK,IAAI2D,EAAE,GAAG,CAAT,EAAYF,EAAE,GAAG5B,KAAK,CAACK,WAAD,CAA3B,EAA0CyB,EAAE,GAAGF,EAAE,CAACjE,MAAlD,EAA0DmE,EAAE,EAA5D,EAAgE;QAC5D,IAAIC,KAAK,GAAGH,EAAE,CAACE,EAAD,CAAd;;QACA,IAAIE,EAAE,GAAGjB,aAAa,CAACgB,KAAK,CAAC5B,IAAP,EAAa4B,KAAK,CAACjC,IAAnB,EAAyBW,IAAI,CAACsB,KAAK,CAAC5B,IAAP,CAA7B,CAAtB;QAAA,IAAkEL,IAAI,GAAGkC,EAAE,CAAC,CAAD,CAA3E;QAAA,IAAgF7D,KAAK,GAAG6D,EAAE,CAAC,CAAD,CAA1F;;QACApB,YAAY,CAACqB,IAAb,CAAkBnC,IAAlB;QACAe,aAAa,CAACoB,IAAd,CAAmB9D,KAAnB;MACH;IACJ,CAxCD,MAyCK;MACD,KAAK,IAAI+D,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGnC,KAAK,CAACK,WAAD,CAA3B,EAA0C6B,EAAE,GAAGC,EAAE,CAACxE,MAAlD,EAA0DuE,EAAE,EAA5D,EAAgE;QAC5D,IAAIH,KAAK,GAAGI,EAAE,CAACD,EAAD,CAAd;QACA,IAAI/D,KAAK,GAAGsC,IAAI,CAACsB,KAAK,CAAC5B,IAAP,CAAhB;;QACA,IAAIhC,KAAK,KAAK6C,SAAd,EAAyB;UACrB,IAAIe,KAAK,CAACjC,IAAN,KAAe,OAAnB,EAA4B;YACxBc,YAAY,CAACqB,IAAb,CAAkB,SAAlB;YACA9D,KAAK,GAAGsB,OAAO,CAACwB,IAAR,CAAa9C,KAAb,CAAR;YACA0C,aAAa,CAACoB,IAAd,CAAmB9D,KAAnB;UACH,CAJD,MAKK,IAAI4D,KAAK,CAACjC,IAAN,KAAe,QAAnB,EAA6B;YAC9Bc,YAAY,CAACqB,IAAb,CAAkB,SAAlB,EAD8B,CAE9B;;YACA,IAAI,OAAO9D,KAAP,KAAiB,QAArB,EAA+B;cAC3BA,KAAK,GAAGgD,MAAM,CAACC,IAAP,CAAYjD,KAAZ,EAAmB,MAAnB,CAAR;YACH;;YACDA,KAAK,GAAGsB,OAAO,CAACwB,IAAR,CAAa9C,KAAb,CAAR;YACA0C,aAAa,CAACoB,IAAd,CAAmB9D,KAAnB;UACH,CARI,MASA,IAAI6B,KAAK,CAAC+B,KAAK,CAACjC,IAAP,CAAL,KAAsBkB,SAA1B,EAAqC;YACtCJ,YAAY,CAACqB,IAAb,CAAkB,SAAlB;YACA9D,KAAK,GAAGsB,OAAO,CAACwB,IAAR,CAAa,KAAKT,UAAL,CAAgBuB,KAAK,CAACjC,IAAtB,EAA4B3B,KAA5B,EAAmC6B,KAAnC,EAA0CU,KAA1C,CAAb,CAAR;YACAG,aAAa,CAACoB,IAAd,CAAmB9D,KAAnB;UACH,CAJI,MAKA,IAAI4D,KAAK,CAACjC,IAAN,CAAWuB,WAAX,CAAuB,GAAvB,MAAgCU,KAAK,CAACjC,IAAN,CAAWnC,MAAX,GAAoB,CAAxD,EAA2D;YAC5D,MAAM,IAAIuD,KAAJ,CAAU,0DAAV,CAAN;UACH,CAFI,MAGA;YACDN,YAAY,CAACqB,IAAb,CAAkBF,KAAK,CAACjC,IAAxB;YACAe,aAAa,CAACoB,IAAd,CAAmB9D,KAAnB;UACH;QACJ;MACJ;IACJ;;IACD,OAAOwB,MAAM,CAACgC,SAAP,CAAiBf,YAAjB,EAA+BC,aAA/B,CAAP;EACH,CA1FgB;;EA2FjB;AACJ;AACA;AACA;AACA;AACA;AACA;EACIuB,UAAU,EAAE,UAAU/B,WAAV,EAAuBL,KAAvB,EAA8B;IACtC,IAAIqC,MAAM,GAAG,EAAb;IACA,IAAIC,IAAI,GAAG,KAAKC,oBAAL,CAA0BlC,WAA1B,EAAuCL,KAAvC,EAA8CwC,MAA9C,CAAqD,UAAUC,GAAV,EAAe;MAAE,OAAOA,GAAG,KAAKpC,WAAf;IAA6B,CAAnG,CAAX;IACAiC,IAAI,GAAG,CAACjC,WAAD,EAAcqC,MAAd,CAAqBJ,IAAI,CAACK,IAAL,EAArB,CAAP;;IACA,KAAK,IAAIb,EAAE,GAAG,CAAT,EAAYc,MAAM,GAAGN,IAA1B,EAAgCR,EAAE,GAAGc,MAAM,CAACjF,MAA5C,EAAoDmE,EAAE,EAAtD,EAA0D;MACtD,IAAIhC,IAAI,GAAG8C,MAAM,CAACd,EAAD,CAAjB;MACA,IAAIe,QAAQ,GAAG7C,KAAK,CAACF,IAAD,CAApB;;MACA,IAAI,CAAC+C,QAAL,EAAe;QACX,MAAM,IAAI3B,KAAJ,CAAU,mCAAmCpB,IAA7C,CAAN;MACH;;MACDuC,MAAM,IAAIvC,IAAI,GAAG,GAAP,GAAaE,KAAK,CAACF,IAAD,CAAL,CAAY2B,GAAZ,CAAgB,UAAUG,EAAV,EAAc;QACjD,IAAIzB,IAAI,GAAGyB,EAAE,CAACzB,IAAd;QAAA,IAAoB7C,CAAC,GAAGsE,EAAE,CAAC9B,IAA3B;QACA,OAAOxC,CAAC,GAAG,GAAJ,GAAU6C,IAAjB;MACH,CAHsB,EAGpB2C,IAHoB,CAGf,GAHe,CAAb,GAGK,GAHf;IAIH;;IACD,OAAOT,MAAP;EACH,CAlHgB;;EAmHjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,oBAAoB,EAAE,UAAUlC,WAAV,EAAuBL,KAAvB,EAA8B+C,OAA9B,EAAuC;IACzD,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;MAAEA,OAAO,GAAG,EAAV;IAAe;;IACzC1C,WAAW,GAAGA,WAAW,CAAC2C,KAAZ,CAAkB,OAAlB,EAA2B,CAA3B,CAAd;;IACA,IAAID,OAAO,CAACE,QAAR,CAAiB5C,WAAjB,KAAiCL,KAAK,CAACK,WAAD,CAAL,KAAuBW,SAA5D,EAAuE;MACnE,OAAO+B,OAAP;IACH;;IACDA,OAAO,CAACd,IAAR,CAAa5B,WAAb;;IACA,KAAK,IAAIyB,EAAE,GAAG,CAAT,EAAYF,EAAE,GAAG5B,KAAK,CAACK,WAAD,CAA3B,EAA0CyB,EAAE,GAAGF,EAAE,CAACjE,MAAlD,EAA0DmE,EAAE,EAA5D,EAAgE;MAC5D,IAAIC,KAAK,GAAGH,EAAE,CAACE,EAAD,CAAd;;MACA,KAAK,IAAIE,EAAE,GAAG,CAAT,EAAYE,EAAE,GAAG,KAAKK,oBAAL,CAA0BR,KAAK,CAACjC,IAAhC,EAAsCE,KAAtC,EAA6C+C,OAA7C,CAAtB,EAA6Ef,EAAE,GAAGE,EAAE,CAACvE,MAArF,EAA6FqE,EAAE,EAA/F,EAAmG;QAC/F,IAAIS,GAAG,GAAGP,EAAE,CAACF,EAAD,CAAZ;QACA,CAACe,OAAO,CAACE,QAAR,CAAiBR,GAAjB,CAAD,IAA0BM,OAAO,CAACd,IAAR,CAAaQ,GAAb,CAA1B;MACH;IACJ;;IACD,OAAOM,OAAP;EACH,CA1IgB;;EA2IjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,UAAU,EAAE,UAAU7C,WAAV,EAAuBI,IAAvB,EAA6BT,KAA7B,EAAoCU,KAApC,EAA2C;IACnD,IAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;MAAEA,KAAK,GAAG,IAAR;IAAe;;IACvC,OAAOjB,OAAO,CAACwB,IAAR,CAAa,KAAKT,UAAL,CAAgBH,WAAhB,EAA6BI,IAA7B,EAAmCT,KAAnC,EAA0CU,KAA1C,CAAb,CAAP;EACH,CAtJgB;;EAuJjB;AACJ;AACA;AACA;AACA;AACA;AACA;EACII,QAAQ,EAAE,UAAUT,WAAV,EAAuBL,KAAvB,EAA8B;IACpC,OAAOP,OAAO,CAACwB,IAAR,CAAa,KAAKmB,UAAL,CAAgB/B,WAAhB,EAA6BL,KAA7B,CAAb,CAAP;EACH,CAhKgB;;EAiKjB;AACJ;AACA;AACA;AACA;AACA;EACImD,YAAY,EAAE,UAAU1C,IAAV,EAAgB;IAC1B,IAAI2C,aAAa,GAAG,EAApB;;IACA,KAAK,IAAIC,GAAT,IAAgB7D,oBAAoB,CAACO,UAArC,EAAiD;MAC7C,IAAIU,IAAI,CAAC4C,GAAD,CAAR,EAAe;QACXD,aAAa,CAACC,GAAD,CAAb,GAAqB5C,IAAI,CAAC4C,GAAD,CAAzB;MACH;IACJ;;IACD,IAAI,WAAWD,aAAf,EAA8B;MAC1BA,aAAa,CAACpD,KAAd,GAAsB7C,QAAQ,CAAC;QAAEmG,YAAY,EAAE;MAAhB,CAAD,EAAuBF,aAAa,CAACpD,KAArC,CAA9B;IACH;;IACD,OAAOoD,aAAP;EACH,CAlLgB;;EAmLjB;AACJ;AACA;AACA;AACA;AACA;EACIG,IAAI,EAAE,UAAUC,SAAV,EAAqB9C,KAArB,EAA4B;IAC9B,IAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;MAAEA,KAAK,GAAG,IAAR;IAAe;;IACvC,IAAI0C,aAAa,GAAG,KAAKD,YAAL,CAAkBK,SAAlB,CAApB;IACA,IAAIC,KAAK,GAAG,CAACtC,MAAM,CAACC,IAAP,CAAY,MAAZ,EAAoB,KAApB,CAAD,CAAZ;IACAqC,KAAK,CAACxB,IAAN,CAAW,KAAKiB,UAAL,CAAgB,cAAhB,EAAgCE,aAAa,CAAC9C,MAA9C,EAAsD8C,aAAa,CAACpD,KAApE,EAA2EU,KAA3E,CAAX;;IACA,IAAI0C,aAAa,CAAC/C,WAAd,KAA8B,cAAlC,EAAkD;MAC9CoD,KAAK,CAACxB,IAAN,CAAW,KAAKiB,UAAL,CAAgBE,aAAa,CAAC/C,WAA9B,EAA2C+C,aAAa,CAAC7C,OAAzD,EAAkE6C,aAAa,CAACpD,KAAhF,EAAuFU,KAAvF,CAAX;IACH;;IACD,OAAOjB,OAAO,CAACwB,IAAR,CAAaE,MAAM,CAACuB,MAAP,CAAce,KAAd,CAAb,CAAP;EACH;AAlMgB,CAArB;AAoMAvF,OAAO,CAACqB,cAAR,GAAyBA,cAAzB;;AACA,SAASD,SAAT,CAAmBuC,CAAnB,EAAsB6B,CAAtB,EAAyBnG,CAAzB,EAA4B;EACxB,IAAIoG,IAAI,GAAGlE,OAAO,CAACmE,UAAR,CAAmBF,CAAnB,CAAX;EACA,IAAIG,IAAI,GAAGpE,OAAO,CAACmE,UAAR,CAAmBrG,CAAnB,CAAX;EACA,IAAIuG,IAAI,GAAGrE,OAAO,CAACsE,WAAR,CAAoBlC,CAApB,CAAX;EACA,IAAImC,IAAI,GAAGC,aAAa,CAACxE,OAAO,CAACyE,UAAR,CAAmBP,IAAnB,EAAyBQ,QAAzB,CAAkC,KAAlC,CAAD,EAA2C,EAA3C,CAAxB;EACA,IAAIC,IAAI,GAAGH,aAAa,CAACxE,OAAO,CAACyE,UAAR,CAAmBL,IAAnB,EAAyBM,QAAzB,CAAkC,KAAlC,CAAD,EAA2C,EAA3C,CAAxB;EACA,IAAIE,IAAI,GAAG5E,OAAO,CAAC6E,cAAR,CAAuB7E,OAAO,CAAC8E,QAAR,CAAiBT,IAAjB,CAAvB,CAAX;EACA,OAAOrE,OAAO,CAAC+E,YAAR,CAAqBR,IAAI,CAACtB,MAAL,CAAY0B,IAAZ,EAAkBC,IAAlB,CAArB,EAA8CF,QAA9C,CAAuD,KAAvD,CAAP;AACH;;AACDjG,OAAO,CAACoB,SAAR,GAAoBA,SAApB;;AACA,SAASD,SAAT,CAAmBoF,KAAnB,EAA0B;EACtB,IAAI,CAACA,KAAL,EAAY;IACR,OAAOzD,SAAP;EACH;;EACD,IAAI,OAAOyD,KAAP,KAAiB,QAArB,EAA+B;IAC3B,IAAIC,MAAM,GAAGjF,OAAO,CAACkF,QAAR,CAAiBF,KAAjB,CAAb;IACAA,KAAK,GAAGhF,OAAO,CAACmF,WAAR,CAAoBF,MAApB,CAAR;EACH;;EACD,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;IAC3B,IAAII,GAAG,GAAG,gEAAV;IACAA,GAAG,IAAI,eAAe,OAAOJ,KAAtB,GAA8B,IAA9B,GAAqCA,KAA5C;IACA,MAAM,IAAIvD,KAAJ,CAAU2D,GAAV,CAAN;EACH;;EACD,OAAOpF,OAAO,CAAC+E,YAAR,CAAqBC,KAAK,CAACK,WAAN,EAArB,CAAP;AACH;;AACD5G,OAAO,CAACmB,SAAR,GAAoBA,SAApB;;AACA,SAASD,YAAT,CAAsB2F,UAAtB,EAAkCC,SAAlC,EAA6C;EACzC,IAAIzE,OAAO,GAAGd,OAAO,CAACkF,QAAR,CAAiBK,SAAS,CAACvE,IAA3B,CAAd;EACA,IAAIwE,OAAO,GAAGxF,OAAO,CAACyF,mBAAR,CAA4B3E,OAA5B,CAAd;EACA,IAAI4E,GAAG,GAAG1F,OAAO,CAAC2F,MAAR,CAAeH,OAAf,EAAwBF,UAAxB,CAAV;EACA,IAAIM,UAAU,GAAG5F,OAAO,CAACmF,WAAR,CAAoBtF,SAAS,CAAC6F,GAAG,CAACtD,CAAL,EAAQsD,GAAG,CAACzB,CAAZ,EAAeyB,GAAG,CAAC5H,CAAnB,CAA7B,CAAjB;EACA,OAAO8H,UAAP;AACH;;AACDnH,OAAO,CAACkB,YAAR,GAAuBA,YAAvB;;AACA,SAASD,wBAAT,CAAkC6F,SAAlC,EAA6C;EACzC,IAAIM,SAAS,GAAGC,eAAe,CAACP,SAAD,CAA/B;EACA,IAAIQ,MAAM,GAAG/F,OAAO,CAACgG,eAAR,CAAwBH,SAAxB,CAAb;EACA,IAAII,SAAS,GAAGjG,OAAO,CAACmF,WAAR,CAAoBY,MAApB,CAAhB;EACA,OAAOE,SAAP;AACH;;AACDxH,OAAO,CAACiB,wBAAR,GAAmCA,wBAAnC;;AACA,SAASD,gBAAT,CAA0B8F,SAA1B,EAAqC;EACjC,IAAIM,SAAS,GAAGC,eAAe,CAACP,SAAD,CAA/B;EACA,OAAO,OAAOM,SAAS,CAACnB,QAAV,CAAmB,KAAnB,CAAd;AACH;;AACDjG,OAAO,CAACgB,gBAAR,GAA2BA,gBAA3B;;AACA,SAASyG,0BAAT,CAAoCnC,SAApC,EAA+C;EAC3C,IAAIoC,UAAU,GAAG3G,kBAAkB,CAACuE,SAAD,CAAnC;EACA,OAAO/D,OAAO,CAACmF,WAAR,CAAoBgB,UAApB,CAAP;AACH;;AACD1H,OAAO,CAACe,kBAAR,GAA6B0G,0BAA7B;;AACA,SAAS3G,mBAAT,CAA6B+F,UAA7B,EAAyCC,SAAzC,EAAoD;EAChD,IAAIC,OAAO,GAAGhG,kBAAkB,CAAC+F,SAAS,CAACvE,IAAX,CAAhC;EACA,IAAI0E,GAAG,GAAG1F,OAAO,CAAC2F,MAAR,CAAeH,OAAf,EAAwBF,UAAxB,CAAV;EACA,OAAOtF,OAAO,CAACmF,WAAR,CAAoBtF,SAAS,CAAC6F,GAAG,CAACtD,CAAL,EAAQsD,GAAG,CAACzB,CAAZ,EAAeyB,GAAG,CAAC5H,CAAnB,CAA7B,CAAP;AACH;;AACDW,OAAO,CAACc,mBAAR,GAA8BA,mBAA9B;;AACA,SAASD,2BAAT,CAAqCiG,SAArC,EAAgD;EAC5C,IAAIC,OAAO,GAAGhG,kBAAkB,CAAC+F,SAAS,CAACvE,IAAX,CAAhC;EACA,IAAI6E,SAAS,GAAGO,gBAAgB,CAACZ,OAAD,EAAUD,SAAS,CAACG,GAApB,CAAhC;EACA,IAAIK,MAAM,GAAG/F,OAAO,CAACgG,eAAR,CAAwBH,SAAxB,CAAb;EACA,OAAO7F,OAAO,CAACmF,WAAR,CAAoBY,MAApB,CAAP;AACH;;AACDtH,OAAO,CAACa,2BAAR,GAAsCA,2BAAtC;;AACA,SAASD,OAAT,CAAiBgH,iBAAjB,EAAoCd,SAApC,EAA+Ce,OAA/C,EAAwD;EACpD,QAAQA,OAAR;IACI,KAAK,0BAAL;MAAiC;QAC7B,IAAI,OAAOf,SAAS,CAACvE,IAAjB,KAA0B,QAA9B,EAAwC;UACpC,MAAM,IAAIS,KAAJ,CAAU,8FAAV,CAAN;QACH,CAH4B,CAI7B;;;QACA,IAAI8E,gBAAgB,GAAGpG,IAAI,CAACqG,GAAL,CAASC,OAAT,EAAvB,CAL6B,CAM7B;;QACA,IAAIC,gBAAgB,GAAG,KAAK,CAA5B;;QACA,IAAI;UACAA,gBAAgB,GAAGtG,QAAQ,CAACuG,YAAT,CAAsBN,iBAAtB,CAAnB;QACH,CAFD,CAGA,OAAOO,GAAP,EAAY;UACR,MAAM,IAAInF,KAAJ,CAAU,gBAAV,CAAN;QACH;;QACD,IAAIoF,mBAAmB,GAAGzG,QAAQ,CAAC0G,UAAT,CAAoBvB,SAAS,CAACvE,IAA9B,CAA1B;QACA,IAAI+F,KAAK,GAAG5G,IAAI,CAAC6G,WAAL,CAAiB7G,IAAI,CAACqG,GAAL,CAASS,WAA1B,CAAZ,CAf6B,CAgB7B;;QACA,IAAIC,gBAAgB,GAAG/G,IAAI,CAACqG,GAAL,CAASK,mBAAT,EAA8BE,KAA9B,EAAqCL,gBAArC,EAAuDH,gBAAgB,CAACY,SAAxE,CAAvB,CAjB6B,CAkB7B;;QACA,IAAIC,MAAM,GAAG;UACTd,OAAO,EAAE,0BADA;UAETS,KAAK,EAAE3G,QAAQ,CAACiH,YAAT,CAAsBN,KAAtB,CAFE;UAGTO,cAAc,EAAElH,QAAQ,CAACiH,YAAT,CAAsBd,gBAAgB,CAACV,SAAvC,CAHP;UAIT0B,UAAU,EAAEnH,QAAQ,CAACiH,YAAT,CAAsBH,gBAAtB;QAJH,CAAb,CAnB6B,CAyB7B;;QACA,OAAOE,MAAP;MACH;;IACD;MACI,MAAM,IAAI3F,KAAJ,CAAU,uCAAV,CAAN;EA9BR;AAgCH;;AACDhD,OAAO,CAACY,OAAR,GAAkBA,OAAlB;;AACA,SAASD,aAAT,CAAuBiH,iBAAvB,EAA0Cd,SAA1C,EAAqDe,OAArD,EAA8D;EAC1D,IAAIkB,sBAAsB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAA7B;EACA,IAAIC,gBAAgB,GAAG,EAAvB;EACA,IAAI3G,IAAI,GAAGuE,SAAS,CAACvE,IAArB;;EACA,IAAI,CAACA,IAAL,EAAW;IACP,MAAM,IAAIS,KAAJ,CAAU,+BAAV,CAAN;EACH;;EACD,IAAI,OAAOT,IAAP,KAAgB,QAAhB,IAA4B,YAAYA,IAA5C,EAAkD;IAC9C;IACA;IACA,MAAM,IAAIS,KAAJ,CAAU,qEAAV,CAAN;EACH,CAXyD,CAY1D;;;EACA,IAAImG,eAAe,GAAG;IAClB5G,IAAI,EAAEA,IADY;IAElB6G,OAAO,EAAE;EAFS,CAAtB,CAb0D,CAiB1D;;EACA,IAAIC,UAAU,GAAGpG,MAAM,CAACqG,UAAP,CAAkBC,IAAI,CAACC,SAAL,CAAeL,eAAf,CAAlB,EAAmD,OAAnD,CAAjB;EACA,IAAIM,MAAM,GAAGJ,UAAU,GAAGN,sBAA1B;EACA,IAAIW,SAAS,GAAG,CAAhB,CApB0D,CAqB1D;;EACA,IAAID,MAAM,GAAG,CAAb,EAAgB;IACZC,SAAS,GAAGX,sBAAsB,GAAGU,MAAzB,GAAkCP,gBAA9C,CADY,CACoD;EACnE;;EACDC,eAAe,CAACC,OAAhB,GAA0B,IAAIO,MAAJ,CAAWD,SAAX,CAA1B;EACA,IAAIE,eAAe,GAAG;IAAErH,IAAI,EAAEgH,IAAI,CAACC,SAAL,CAAeL,eAAf;EAAR,CAAtB;EACA,OAAOvI,OAAO,CAACgH,iBAAD,EAAoBgC,eAApB,EAAqC/B,OAArC,CAAd;AACH;;AACD7H,OAAO,CAACW,aAAR,GAAwBA,aAAxB;;AACA,SAASD,OAAT,CAAiBmJ,aAAjB,EAAgCC,kBAAhC,EAAoD;EAChD,QAAQD,aAAa,CAAChC,OAAtB;IACI,KAAK,0BAAL;MAAiC;QAC7B;QACA,IAAIkC,4BAA4B,GAAGC,cAAc,CAACF,kBAAD,CAAjD;QACA,IAAIG,4BAA4B,GAAGvI,IAAI,CAACqG,GAAL,CAASC,OAAT,CAAiBkC,aAAjB,CAA+BH,4BAA/B,EAA6DrB,SAAhG,CAH6B,CAI7B;;QACA,IAAIJ,KAAK,GAAG3G,QAAQ,CAACuG,YAAT,CAAsB2B,aAAa,CAACvB,KAApC,CAAZ;QACA,IAAIQ,UAAU,GAAGnH,QAAQ,CAACuG,YAAT,CAAsB2B,aAAa,CAACf,UAApC,CAAjB;QACA,IAAID,cAAc,GAAGlH,QAAQ,CAACuG,YAAT,CAAsB2B,aAAa,CAAChB,cAApC,CAArB,CAP6B,CAQ7B;;QACA,IAAIsB,gBAAgB,GAAGzI,IAAI,CAACqG,GAAL,CAASqC,IAAT,CAActB,UAAd,EAA0BR,KAA1B,EAAiCO,cAAjC,EAAiDoB,4BAAjD,CAAvB,CAT6B,CAU7B;;QACA,IAAItB,MAAM,GAAG,KAAK,CAAlB;;QACA,IAAI;UACAA,MAAM,GAAGhH,QAAQ,CAAC0I,UAAT,CAAoBF,gBAApB,CAAT;QACH,CAFD,CAGA,OAAOhC,GAAP,EAAY;UACR,MAAM,IAAInF,KAAJ,CAAU,oBAAV,CAAN;QACH;;QACD,IAAI2F,MAAJ,EAAY;UACR,OAAOA,MAAP;QACH;;QACD,MAAM,IAAI3F,KAAJ,CAAU,oBAAV,CAAN;MACH;;IACD;MACI,MAAM,IAAIA,KAAJ,CAAU,wCAAV,CAAN;EAzBR;AA2BH;;AACDhD,OAAO,CAACU,OAAR,GAAkBA,OAAlB;;AACA,SAASD,aAAT,CAAuBoJ,aAAvB,EAAsCC,kBAAtC,EAA0D;EACtD,IAAIX,eAAe,GAAGI,IAAI,CAACe,KAAL,CAAW5J,OAAO,CAACmJ,aAAD,EAAgBC,kBAAhB,CAAlB,CAAtB;EACA,OAAOX,eAAe,CAAC5G,IAAvB;AACH;;AACDvC,OAAO,CAACS,aAAR,GAAwBA,aAAxB;;AACA,SAASD,sBAAT,CAAgCqG,UAAhC,EAA4C;EACxC,IAAI0D,oBAAoB,GAAGP,cAAc,CAACnD,UAAD,CAAzC;EACA,IAAI2D,mBAAmB,GAAG9I,IAAI,CAACqG,GAAL,CAASC,OAAT,CAAiBkC,aAAjB,CAA+BK,oBAA/B,EAAqDnD,SAA/E;EACA,OAAOzF,QAAQ,CAACiH,YAAT,CAAsB4B,mBAAtB,CAAP;AACH;;AACDxK,OAAO,CAACQ,sBAAR,GAAiCA,sBAAjC;AACA;AACA;AACA;;AACA,SAASD,gBAAT,CAA0BsG,UAA1B,EAAsCC,SAAtC,EAAiDe,OAAjD,EAA0D;EACtD,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,IAAV;EAAiB;;EAC3C,QAAQA,OAAR;IACI,KAAK,IAAL;MACI,OAAO/G,mBAAmB,CAAC+F,UAAD,EAAaC,SAAb,CAA1B;;IACJ,KAAK,IAAL;MACI,OAAOzG,aAAa,CAACwG,UAAD,EAAaC,SAAb,CAApB;;IACJ,KAAK,IAAL;IACA;MACI,OAAO1G,gBAAgB,CAACyG,UAAD,EAAaC,SAAb,CAAvB;EAPR;AASH;;AACD9G,OAAO,CAACO,gBAAR,GAA2BA,gBAA3B;;AACA,SAASD,mBAAT,CAA6BwG,SAA7B,EAAwCe,OAAxC,EAAiD;EAC7C,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,IAAV;EAAiB;;EAC3C,QAAQA,OAAR;IACI,KAAK,IAAL;MACI,OAAOhH,2BAA2B,CAACiG,SAAD,CAAlC;;IACJ,KAAK,IAAL;MACI,OAAO3G,qBAAqB,CAAC2G,SAAD,CAA5B;;IACJ,KAAK,IAAL;IACA;MACI,OAAO5G,wBAAwB,CAAC4G,SAAD,CAA/B;EAPR;AASH;;AACD9G,OAAO,CAACM,mBAAR,GAA8BA,mBAA9B;;AACA,SAASD,aAAT,CAAuBwG,UAAvB,EAAmCC,SAAnC,EAA8C;EAC1C,IAAIzE,OAAO,GAAGhB,cAAc,CAACgE,IAAf,CAAoByB,SAAS,CAACvE,IAA9B,EAAoC,KAApC,CAAd;EACA,IAAI0E,GAAG,GAAG1F,OAAO,CAAC2F,MAAR,CAAe7E,OAAf,EAAwBwE,UAAxB,CAAV;EACA,OAAOtF,OAAO,CAACmF,WAAR,CAAoBtF,SAAS,CAAC6F,GAAG,CAACtD,CAAL,EAAQsD,GAAG,CAACzB,CAAZ,EAAeyB,GAAG,CAAC5H,CAAnB,CAA7B,CAAP;AACH;;AACDW,OAAO,CAACK,aAAR,GAAwBA,aAAxB;;AACA,SAASD,gBAAT,CAA0ByG,UAA1B,EAAsCC,SAAtC,EAAiD;EAC7C,IAAIzE,OAAO,GAAGhB,cAAc,CAACgE,IAAf,CAAoByB,SAAS,CAACvE,IAA9B,CAAd;EACA,IAAI0E,GAAG,GAAG1F,OAAO,CAAC2F,MAAR,CAAe7E,OAAf,EAAwBwE,UAAxB,CAAV;EACA,OAAOtF,OAAO,CAACmF,WAAR,CAAoBtF,SAAS,CAAC6F,GAAG,CAACtD,CAAL,EAAQsD,GAAG,CAACzB,CAAZ,EAAeyB,GAAG,CAAC5H,CAAnB,CAA7B,CAAP;AACH;;AACDW,OAAO,CAACI,gBAAR,GAA2BA,gBAA3B;;AACA,SAASD,qBAAT,CAA+B2G,SAA/B,EAA0C;EACtC,IAAIzE,OAAO,GAAGhB,cAAc,CAACgE,IAAf,CAAoByB,SAAS,CAACvE,IAA9B,EAAoC,KAApC,CAAd;EACA,IAAI6E,SAAS,GAAGO,gBAAgB,CAACtF,OAAD,EAAUyE,SAAS,CAACG,GAApB,CAAhC;EACA,IAAIK,MAAM,GAAG/F,OAAO,CAACgG,eAAR,CAAwBH,SAAxB,CAAb;EACA,OAAO7F,OAAO,CAACmF,WAAR,CAAoBY,MAApB,CAAP;AACH;;AACDtH,OAAO,CAACG,qBAAR,GAAgCA,qBAAhC;;AACA,SAASD,wBAAT,CAAkC4G,SAAlC,EAA6C;EACzC,IAAIzE,OAAO,GAAGhB,cAAc,CAACgE,IAAf,CAAoByB,SAAS,CAACvE,IAA9B,CAAd;EACA,IAAI6E,SAAS,GAAGO,gBAAgB,CAACtF,OAAD,EAAUyE,SAAS,CAACG,GAApB,CAAhC;EACA,IAAIK,MAAM,GAAG/F,OAAO,CAACgG,eAAR,CAAwBH,SAAxB,CAAb;EACA,OAAO7F,OAAO,CAACmF,WAAR,CAAoBY,MAApB,CAAP;AACH;;AACDtH,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC;AACA;AACA;AACA;AACA;;AACA,SAASa,kBAAT,CAA4BuE,SAA5B,EAAuC;EACnC,IAAImF,KAAK,GAAG,IAAIzH,KAAJ,CAAU,uCAAV,CAAZ;;EACA,IAAI,OAAOsC,SAAP,KAAqB,QAArB,IAAiC,EAAE,YAAYA,SAAd,CAAjC,IAA6D,CAACA,SAAS,CAAC7F,MAA5E,EAAoF;IAChF,MAAMgL,KAAN;EACH;;EACD,IAAIlI,IAAI,GAAG+C,SAAS,CAAC/B,GAAV,CAAc,UAAUmH,CAAV,EAAa;IAClC,OAAOA,CAAC,CAAC9I,IAAF,KAAW,OAAX,GAAqBL,OAAO,CAACkF,QAAR,CAAiBiE,CAAC,CAACzK,KAAnB,CAArB,GAAiDyK,CAAC,CAACzK,KAA1D;EACH,CAFU,CAAX;EAGA,IAAI6B,KAAK,GAAGwD,SAAS,CAAC/B,GAAV,CAAc,UAAUmH,CAAV,EAAa;IACnC,OAAOA,CAAC,CAAC9I,IAAT;EACH,CAFW,CAAZ;EAGA,IAAI+I,MAAM,GAAGrF,SAAS,CAAC/B,GAAV,CAAc,UAAUmH,CAAV,EAAa;IACpC,IAAI,CAACA,CAAC,CAACzI,IAAP,EAAa;MACT,MAAMwI,KAAN;IACH;;IACD,OAAOC,CAAC,CAAC9I,IAAF,GAAS,GAAT,GAAe8I,CAAC,CAACzI,IAAxB;EACH,CALY,CAAb;EAMA,OAAOR,MAAM,CAACmJ,YAAP,CAAoB,CAAC,SAAD,EAAY,SAAZ,CAApB,EAA4C,CAC/CnJ,MAAM,CAACmJ,YAAP,CAAoB,IAAIC,KAAJ,CAAUvF,SAAS,CAAC7F,MAApB,EAA4BqL,IAA5B,CAAiC,QAAjC,CAApB,EAAgEH,MAAhE,CAD+C,EAE/ClJ,MAAM,CAACmJ,YAAP,CAAoB9I,KAApB,EAA2BS,IAA3B,CAF+C,CAA5C,CAAP;AAIH;;AACD,SAASoF,gBAAT,CAA0BoD,IAA1B,EAAgC9D,GAAhC,EAAqC;EACjC,IAAI+D,SAAS,GAAGzJ,OAAO,CAACkF,QAAR,CAAiBQ,GAAjB,CAAhB;EACA,IAAIgE,SAAS,GAAG1J,OAAO,CAAC2J,UAAR,CAAmBF,SAAnB,CAAhB;EACA,OAAOzJ,OAAO,CAAC4J,SAAR,CAAkBJ,IAAlB,EAAwBE,SAAS,CAACtH,CAAlC,EAAqCsH,SAAS,CAACzF,CAA/C,EAAkDyF,SAAS,CAAC5L,CAA5D,CAAP;AACH;;AACD,SAASgI,eAAT,CAAyBP,SAAzB,EAAoC;EAChC,IAAIzE,OAAO,GAAGd,OAAO,CAACkF,QAAR,CAAiBK,SAAS,CAACvE,IAA3B,CAAd;EACA,IAAIwE,OAAO,GAAGxF,OAAO,CAACyF,mBAAR,CAA4B3E,OAA5B,CAAd;EACA,OAAOsF,gBAAgB,CAACZ,OAAD,EAAUD,SAAS,CAACG,GAApB,CAAvB;AACH;;AACD,SAASlB,aAAT,CAAuBqF,MAAvB,EAA+B3L,MAA/B,EAAuC;EACnC,IAAI4L,QAAQ,GAAG,KAAKD,MAApB;;EACA,OAAOC,QAAQ,CAAC5L,MAAT,GAAkBA,MAAzB,EAAiC;IAC7B4L,QAAQ,GAAG,MAAMA,QAAjB;EACH;;EACD,OAAOA,QAAP;AACH,C,CACD;;;AACA,SAASrB,cAAT,CAAwBsB,MAAxB,EAAgC;EAC5B,IAAIC,SAAS,GAAGtI,MAAM,CAACC,IAAP,CAAYoI,MAAZ,EAAoB,KAApB,EAA2BrF,QAA3B,CAAoC,QAApC,CAAhB;EACA,OAAOtE,QAAQ,CAACuG,YAAT,CAAsBqD,SAAtB,CAAP;AACH"},"metadata":{},"sourceType":"script"}