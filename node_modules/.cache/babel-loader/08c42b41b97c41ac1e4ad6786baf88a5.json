{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\ReelSet.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport Constants from \"../Constants\";\nimport \"../assets/css/App.css\";\nimport Reel from \"./Reel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ReelSet = props => {\n  _s();\n\n  //  const [spinReel, setSpinReel] = useState(false)\n  let spinResults = [];\n  let results = [];\n  let bet = 0;\n  let score = 2;\n  let scr = 0;\n  let winningLines = [];\n  let reels = useRef();\n  let countWin = 0;\n  let symbolSellection = [];\n  let randomNr = 0; //  const symbols = \"DDDGNNSSVVVCCFFRRYYIIJJZZMMOOLLTTPPBBQQAAG\";\n\n  const symbols = \"DDDGNNSS\";\n\n  const createArray = randomNr => {\n    console.log(\"My random nr is\" + -(randomNr / 242));\n\n    for (let i = 0; i < 3; i++) {\n      results.push(symbols[-(randomNr / 242) + i]);\n    }\n  };\n\n  const getRandomNr = () => {\n    if (props.startGame > 0) {\n      randomNr = -(Math.floor(Math.random() * 42) * 242);\n    }\n\n    createArray(randomNr);\n    return randomNr;\n  };\n\n  const renderReels = () => {\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\n      return /*#__PURE__*/_jsxDEV(Reel, {\n        reel: el,\n        index: idx,\n        gameOn: getRandomNr()\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 14\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: reelList\n    }, void 0, false);\n  };\n\n  console.log(\"My spin results are \" + reels.length);\n\n  const drawScore = (lineNumberType, fool) => {\n    let newScore = 0;\n\n    if (fool) {\n      lineNumberType = 18;\n    }\n\n    switch (lineNumberType) {\n      case 0:\n        // top line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 1:\n        // middle line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 2:\n        // bottom line\n        //        audioWin.play();\n        newScore = 0.5;\n        break;\n\n      case 3:\n        // V shape starting bottom left\n        //        audioWin.play();\n        newScore = 0.2;\n        break;\n\n      case 4:\n        // V shape starting bottom right\n        //        audioWin.play();\n        newScore = 0.2;\n        break;\n\n      case 5:\n        // W shape starting top left\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 6:\n        // M shape starting bottom left\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 7:\n        // M shape on top half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 8:\n        // W shape on top half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 9:\n        //W shape on bottom half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 10:\n        // M shape on bottom half\n        //        audioWin.play();\n        newScore = 0.3;\n        break;\n\n      case 11:\n        // U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 12:\n        // inverse U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 13:\n        // U shape on bottom half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 14:\n        // inverse U shape on bottom half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 15:\n        // inverse U shape on top half\n        //        audioWin.play();\n        newScore = 0.1;\n        break;\n\n      case 16:\n        // Z shape from top left\n        //        audioWin.play();\n        newScore = 0.4;\n        break;\n\n      case 17:\n        // Z shape from bottom left\n        //        audioWin.play();\n        newScore = 0.4;\n        break;\n\n      case 18:\n        // Z shape from bottom left\n        //        audioWinBonus.play();\n        newScore = 100;\n        break;\n\n      default:\n        newScore = 0;\n    }\n\n    console.log(\"My score is:\" + newScore);\n    setScore(newScore);\n    return;\n  };\n\n  const createResults = () => {\n    console.log(\"My results is: \" + results);\n    console.log(\"My results.length is: \" + results.length);\n    let myResults = [];\n    let j = 0;\n\n    for (let i = 0; i <= results.length; i++) {\n      myResults[j] = results[i];\n      j++;\n\n      if (j === 3) {\n        spinResults.push(myResults);\n        myResults = [];\n        j = 0;\n      }\n    }\n  };\n\n  const spinReel = () => {\n    checkWin();\n  };\n\n  const getScore = () => {\n    return score;\n  };\n\n  const setScoreState = () => {\n    console.log(\"My scr is:\" + scr);\n    score = scr;\n  };\n\n  const checkLinesElements = symbol => {\n    countWin++;\n    let symNr = 0;\n    let fool = 0;\n\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      fool = 0;\n      symNr = 0;\n\n      for (let j = 0; j < Constants.LINES[i].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n\n        if (symbol === spinResults[indexI][indexJ]) {\n          symNr++;\n        }\n      }\n\n      if (fool + symNr === 5 && fool < 4) {\n        winningLines.push(i);\n      }\n    }\n\n    winningLines = uniq(winningLines);\n  };\n\n  const uniq = a => {\n    return a.sort().filter(function (item, pos, ary) {\n      return !pos || item !== ary[pos - 1];\n    });\n  };\n\n  const checkElements = () => {\n    let fool = 0;\n\n    for (let k = 0; k < 3; k++) {\n      fool = 0;\n\n      for (let i = 0; i < spinResults.length; i++) {\n        let symb = \"\";\n\n        for (let j = k; j < spinResults[i].length; j++) {\n          if (spinResults[i][j] !== \"D\") {\n            symb = spinResults[i][j];\n            j = spinResults[i].length;\n          } else {\n            fool++;\n            j = spinResults[i].length;\n          }\n        }\n\n        if (fool < 4 && symb !== \"\") {\n          symbolSellection.push(symb);\n        }\n      }\n    }\n\n    for (let i = 0; i < symbolSellection.length; i++) {\n      checkLinesElements(symbolSellection[i]);\n    }\n  };\n\n  const setBetZero = () => {\n    bet = 0;\n  };\n\n  const setScore = e => {\n    console.log(\"We are in setScore: \" + e);\n    let sc = 0;\n\n    if (bet > 0 && e > 0) {\n      console.log(\"Calculating:\" + scr + \"+(\" + bet + \"*\" + e + \")\");\n      scr = scr + (e + bet * e);\n      scr = Math.round(scr * 100) / 100;\n    } else if (bet > 0 && e === 0) {\n      scr = scr - (e + bet * e);\n      console.log(\"Calculating:\" + sc + \"-(\" + bet + \"*\" + e + \")\");\n      scr = Math.round(scr * 100) / 100;\n    } else if (bet === 0 && e > 0) {\n      console.log(\"Calculating: \" + scr + \" + \" + e);\n      scr = Math.round((scr + e) * 100) / 100;\n    } //setBetZero();\n\n\n    setScoreState(scr);\n  };\n\n  const checkFourFools = () => {\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      let fool = 0;\n\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n      }\n\n      if (fool === 4) {\n        winningLines.push(i);\n        drawScore(i, false);\n      }\n    }\n  };\n\n  const evaluateResults = () => {\n    checkFourFools();\n    checkElements(); //highLightWinningLines(0);\n\n    if (winningLines.length > 0) {\n      console.log(\"We have winning line !!!\");\n\n      for (let i = 0; i < winningLines.length; i++) {\n        drawScore(winningLines[i], false);\n      }\n    } else {\n      console.log(\"We have no winning lines !!!\");\n\n      if (scr - bet >= 0.2) {\n        scr = Math.round((scr - bet) * 100) / 100;\n        setScoreState();\n\n        if (scr < bet) {\n          setBetZero();\n        }\n      } else if (scr - bet === 0) {\n        setBetZero();\n        scr = 0;\n        setScoreState();\n      }\n    } //winningLines=[];\n\n  };\n\n  const checkFiveFools = () => {\n    let fl = false;\n\n    for (let i = 0; i < Constants.LINES.length; i++) {\n      let fool = 0;\n\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\n        let indexI = Constants.LINES[i][j][0];\n        let indexJ = Constants.LINES[i][j][1];\n\n        if (spinResults[indexI][indexJ] === \"D\") {\n          fool++;\n        }\n      }\n\n      if (fool === 5) {\n        fl = true;\n        winningLines.push(i); //  drawScore(i,true);\n        //  highLightWinningLines(0);\n\n        break;\n      }\n    }\n\n    return fl;\n  };\n\n  const checkWin = () => {\n    let fool = checkFiveFools();\n\n    if (!fool) {\n      evaluateResults();\n    } //  setScoreState();\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"jackpot\",\n      children: [\"Jackpot: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reelSet\",\n          scr: score,\n          children: [renderReels(), \" \", createResults(), \" \", spinReel()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ReelSet, \"jsI1n9YSz1eHHXHupnRsVr3nges=\");\n\n_c = ReelSet;\nexport default ReelSet;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReelSet\");","map":{"version":3,"names":["React","useRef","Constants","Reel","ReelSet","props","spinResults","results","bet","score","scr","winningLines","reels","countWin","symbolSellection","randomNr","symbols","createArray","console","log","i","push","getRandomNr","startGame","Math","floor","random","renderReels","reelList","Array","apply","REELS","map","el","idx","length","drawScore","lineNumberType","fool","newScore","setScore","createResults","myResults","j","spinReel","checkWin","getScore","setScoreState","checkLinesElements","symbol","symNr","LINES","indexI","indexJ","uniq","a","sort","filter","item","pos","ary","checkElements","k","symb","setBetZero","e","sc","round","checkFourFools","evaluateResults","checkFiveFools","fl"],"sources":["F:/Games/slotmachinereact/src/components/ReelSet.js"],"sourcesContent":["import React, { useRef } from \"react\";\r\nimport Constants from \"../Constants\";\r\nimport \"../assets/css/App.css\";\r\nimport Reel from \"./Reel\";\r\n\r\nconst ReelSet = (props) => {\r\n  //  const [spinReel, setSpinReel] = useState(false)\r\n  let spinResults = [];\r\n  let results = [];\r\n  let bet = 0;\r\n  let score = 2;\r\n  let scr = 0;\r\n  let winningLines = [];\r\n  let reels = useRef();\r\n  let countWin = 0;\r\n  let symbolSellection = [];\r\n  let randomNr = 0;\r\n//  const symbols = \"DDDGNNSSVVVCCFFRRYYIIJJZZMMOOLLTTPPBBQQAAG\";\r\nconst symbols = \"DDDGNNSS\";\r\n\r\n  const createArray = (randomNr) => {\r\n    console.log(\"My random nr is\" + -(randomNr / 242));\r\n    for (let i = 0; i < 3; i++) {\r\n      results.push(symbols[-(randomNr / 242) + i]);\r\n    }\r\n  };\r\n\r\n  const getRandomNr = () => {\r\n    if (props.startGame > 0) {\r\n      randomNr = -(Math.floor(Math.random() * 42) * 242);\r\n    }\r\n    createArray(randomNr);\r\n    return randomNr;\r\n  };\r\n\r\n  const renderReels = () => {\r\n    let reelList = Array.apply(null, Array(Constants.REELS)).map((el, idx) => {\r\n      return <Reel reel={el} key={idx} index={idx} gameOn={getRandomNr()}/>;\r\n    });\r\n\r\n    return <>{reelList}</>;\r\n  };\r\n\r\n  console.log(\"My spin results are \" + reels.length);\r\n\r\n  const drawScore = (lineNumberType, fool) => {\r\n    let newScore = 0;\r\n    if (fool) {\r\n      lineNumberType = 18;\r\n    }\r\n    switch (lineNumberType) {\r\n      case 0: // top line\r\n        //        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 1: // middle line\r\n        //        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 2: // bottom line\r\n        //        audioWin.play();\r\n        newScore = 0.5;\r\n        break;\r\n      case 3: // V shape starting bottom left\r\n        //        audioWin.play();\r\n        newScore = 0.2;\r\n        break;\r\n      case 4: // V shape starting bottom right\r\n        //        audioWin.play();\r\n        newScore = 0.2;\r\n        break;\r\n      case 5: // W shape starting top left\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 6: // M shape starting bottom left\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 7: // M shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 8: // W shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 9: //W shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 10: // M shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.3;\r\n        break;\r\n      case 11: // U shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 12: // inverse U shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 13: // U shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 14: // inverse U shape on bottom half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 15: // inverse U shape on top half\r\n        //        audioWin.play();\r\n        newScore = 0.1;\r\n        break;\r\n      case 16: // Z shape from top left\r\n        //        audioWin.play();\r\n        newScore = 0.4;\r\n        break;\r\n      case 17: // Z shape from bottom left\r\n        //        audioWin.play();\r\n        newScore = 0.4;\r\n        break;\r\n      case 18: // Z shape from bottom left\r\n        //        audioWinBonus.play();\r\n        newScore = 100;\r\n        break;\r\n      default:\r\n        newScore = 0;\r\n    }\r\n\r\n    console.log(\"My score is:\" + newScore);\r\n    setScore(newScore);\r\n    return;\r\n  };\r\n\r\n  const createResults = () => {\r\n    console.log(\"My results is: \" + results);\r\n    console.log(\"My results.length is: \"+results.length)\r\n    let myResults = [];\r\n    let j=0;\r\n\r\n    for(let i=0; i<=results.length;i++){\r\n      \r\n      myResults[j]=(results[i]);\r\n      j++;\r\n\r\n      if(j===3){\r\n        spinResults.push(myResults);\r\n        myResults=[];\r\n        j=0;\r\n      }\r\n      \r\n    }\r\n \r\n  };\r\n\r\n  const spinReel = () => {\r\n    checkWin();\r\n  };\r\n\r\n  const getScore=()=>{\r\n    return score;\r\n  }\r\n\r\n  const setScoreState = () => {\r\n    console.log(\"My scr is:\" + scr);\r\n    score = scr;\r\n  };\r\n\r\n  const checkLinesElements = (symbol) => {\r\n    countWin++;\r\n    let symNr = 0;\r\n    let fool = 0;\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      fool = 0;\r\n      symNr = 0;\r\n      for (let j = 0; j < Constants.LINES[i].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n\r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n          fool++;\r\n        }\r\n        if (symbol === spinResults[indexI][indexJ]) {\r\n          symNr++;\r\n        }\r\n      }\r\n      if (fool + symNr === 5 && fool < 4) {\r\n        winningLines.push(i);\r\n      }\r\n    }\r\n    winningLines = uniq(winningLines);\r\n  };\r\n\r\n  const uniq = (a) => {\r\n    return a.sort().filter(function (item, pos, ary) {\r\n      return !pos || item !== ary[pos - 1];\r\n    });\r\n  };\r\n\r\n  const checkElements = () => {\r\n    let fool = 0;\r\n    for (let k = 0; k < 3; k++) {\r\n      fool = 0;\r\n      for (let i = 0; i < spinResults.length; i++) {\r\n        let symb = \"\";\r\n        for (let j = k; j < spinResults[i].length; j++) {\r\n          if (spinResults[i][j] !== \"D\") {\r\n            symb = spinResults[i][j];\r\n            j = spinResults[i].length;\r\n          } else {\r\n            fool++;\r\n            j = spinResults[i].length;\r\n          }\r\n        }\r\n        if (fool < 4 && symb !== \"\") {\r\n          symbolSellection.push(symb);\r\n        }\r\n      }\r\n    }\r\n    for (let i = 0; i < symbolSellection.length; i++) {\r\n      checkLinesElements(symbolSellection[i]);\r\n    }\r\n  };\r\n\r\n  const setBetZero = () => {\r\n    bet = 0;\r\n  };\r\n\r\n  const setScore = (e) => {\r\n    console.log(\"We are in setScore: \" + e);\r\n    let sc = 0;\r\n    if (bet > 0 && e > 0) {\r\n      console.log(\"Calculating:\" + scr + \"+(\" + bet + \"*\" + e + \")\");\r\n      scr = scr + (e + bet * e);\r\n      scr = Math.round(scr * 100) / 100;\r\n    } else if (bet > 0 && e === 0) {\r\n      scr = scr - (e + bet * e);\r\n      console.log(\"Calculating:\" + sc + \"-(\" + bet + \"*\" + e + \")\");\r\n      scr = Math.round(scr * 100) / 100;\r\n    } else if (bet === 0 && e > 0) {\r\n      console.log(\"Calculating: \" + scr + \" + \" + e);\r\n      scr = Math.round((scr + e) * 100) / 100;\r\n    }\r\n\r\n    //setBetZero();\r\n    setScoreState(scr);\r\n  };\r\n  const checkFourFools = () => {\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      let fool = 0;\r\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n\r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n          fool++;\r\n        }\r\n      }\r\n      if (fool === 4) {\r\n        winningLines.push(i);\r\n        drawScore(i, false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const evaluateResults = () => {\r\n    checkFourFools();\r\n    checkElements();\r\n    //highLightWinningLines(0);\r\n    if (winningLines.length > 0) {\r\n      console.log(\"We have winning line !!!\");\r\n      for (let i = 0; i < winningLines.length; i++) {\r\n        drawScore(winningLines[i], false);\r\n      }\r\n    } else {\r\n      console.log(\"We have no winning lines !!!\");\r\n      if (scr - bet >= 0.2) {\r\n        scr = Math.round((scr - bet) * 100) / 100;\r\n        setScoreState();\r\n        if (scr < bet) {\r\n          setBetZero();\r\n        }\r\n      } else if (scr - bet === 0) {\r\n        setBetZero();\r\n        scr = 0;\r\n        setScoreState();\r\n      }\r\n    }\r\n    //winningLines=[];\r\n  };\r\n  const checkFiveFools = () => {\r\n    let fl = false;\r\n    for (let i = 0; i < Constants.LINES.length; i++) {\r\n      let fool = 0;\r\n      for (let j = 0; j < Constants.LINES[0].length; j++) {\r\n        let indexI = Constants.LINES[i][j][0];\r\n        let indexJ = Constants.LINES[i][j][1];\r\n        if (spinResults[indexI][indexJ] === \"D\") {\r\n          fool++;\r\n        }\r\n      }\r\n      if (fool === 5) {\r\n        fl = true;\r\n        winningLines.push(i);\r\n        //  drawScore(i,true);\r\n        //  highLightWinningLines(0);\r\n        break;\r\n      }\r\n    }\r\n    return fl;\r\n  };\r\n\r\n  const checkWin = () => {\r\n    let fool = checkFiveFools();\r\n    if (!fool) {\r\n      evaluateResults();\r\n    }\r\n    //  setScoreState();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div id=\"jackpot\">\r\n        Jackpot: <span>100</span>\r\n      </div>\r\n      <div className=\"container\">\r\n        <div className=\"playContainer\">\r\n          <div className=\"reelSet\" scr={score} >\r\n            {renderReels()} {createResults()} {spinReel()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReelSet;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}