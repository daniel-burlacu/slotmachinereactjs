{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fsSys = __importStar(require(\"fs\"));\n\nconst pathSys = __importStar(require(\"path\"));\n\nconst statAsync = path => new Promise((resolve, reject) => {\n  fsSys.stat(path, (err, stats) => {\n    if (err) {\n      reject(err);\n    }\n\n    resolve(stats);\n  });\n});\n\nconst NO_FILE = \"ENOENT\";\n\nfunction FsResolver() {\n  return function fs(resolvePath, ctx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const cwd = ctx.cwd || process.cwd();\n      let myPath;\n\n      if (!pathSys.isAbsolute(resolvePath)) {\n        myPath = pathSys.join(cwd, resolvePath);\n      } else {\n        myPath = resolvePath;\n      }\n\n      try {\n        const stats = yield statAsync(myPath);\n        return stats.isFile() ? myPath : null;\n      } catch (e) {\n        if (e.code === NO_FILE) {\n          return null;\n        }\n\n        throw e;\n      }\n    });\n  };\n}\n\nexports.FsResolver = FsResolver;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AAEA,MAAMA,SAAS,GAAIC,IAAD,IAChB,IAAIC,OAAJ,CAAyB,CAACC,OAAD,EAAUC,MAAV,KAAoB;EAC3CC,KAAK,CAACC,IAAN,CAAWL,IAAX,EAAiB,CAACM,GAAD,EAAMC,KAAN,KAAe;IAC9B,IAAID,GAAJ,EAAS;MACPH,MAAM,CAACG,GAAD,CAAN;IACD;;IAEDJ,OAAO,CAACK,KAAD,CAAP;EACD,CAND;AAOD,CARD,CADF;;AAUA,MAAMC,OAAO,GAAG,QAAhB;;AAEA,SAAgBC,UAAhB,GAA0B;EACxB,OAAO,SAAeC,EAAf,CAAkBC,WAAlB,EAAuCC,GAAvC,EAAmD;;MACxD,MAAMC,GAAG,GAAGD,GAAG,CAACC,GAAJ,IAAWC,OAAO,CAACD,GAAR,EAAvB;MAEA,IAAIE,MAAJ;;MACA,IAAI,CAACC,OAAO,CAACC,UAAR,CAAmBN,WAAnB,CAAL,EAAsC;QACpCI,MAAM,GAAGC,OAAO,CAACE,IAAR,CAAaL,GAAb,EAAkBF,WAAlB,CAAT;MACD,CAFD,MAEO;QACLI,MAAM,GAAGJ,WAAT;MACD;;MACD,IAAI;QACF,MAAMJ,KAAK,GAAG,MAAMR,SAAS,CAACgB,MAAD,CAA7B;QACA,OAAOR,KAAK,CAACY,MAAN,KAAiBJ,MAAjB,GAA0B,IAAjC;MACD,CAHD,CAGE,OAAOK,CAAP,EAAU;QACV,IAAIA,CAAC,CAACC,IAAF,KAAWb,OAAf,EAAwB;UACtB,OAAO,IAAP;QACD;;QACD,MAAMY,CAAN;MACD;IACF;EAAA,CAlBD;AAmBD;;AApBDE","names":["statAsync","path","Promise","resolve","reject","fsSys","stat","err","stats","NO_FILE","FsResolver","fs","resolvePath","ctx","cwd","process","myPath","pathSys","isAbsolute","join","isFile","e","code","exports"],"sources":["F:\\Games\\slotmachinereact\\node_modules\\@resolver-engine\\fs\\src\\resolvers\\fsresolver.ts"],"sourcesContent":["import { Context, SubResolver } from \"@resolver-engine/core\";\nimport * as fsSys from \"fs\";\nimport * as pathSys from \"path\";\n\nconst statAsync = (path: string): Promise<fsSys.Stats> =>\n  new Promise<fsSys.Stats>((resolve, reject) => {\n    fsSys.stat(path, (err, stats) => {\n      if (err) {\n        reject(err);\n      }\n\n      resolve(stats);\n    });\n  });\nconst NO_FILE = \"ENOENT\";\n\nexport function FsResolver(): SubResolver {\n  return async function fs(resolvePath: string, ctx: Context): Promise<string | null> {\n    const cwd = ctx.cwd || process.cwd();\n\n    let myPath: string;\n    if (!pathSys.isAbsolute(resolvePath)) {\n      myPath = pathSys.join(cwd, resolvePath);\n    } else {\n      myPath = resolvePath;\n    }\n    try {\n      const stats = await statAsync(myPath);\n      return stats.isFile() ? myPath : null;\n    } catch (e) {\n      if (e.code === NO_FILE) {\n        return null;\n      }\n      throw e;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script"}