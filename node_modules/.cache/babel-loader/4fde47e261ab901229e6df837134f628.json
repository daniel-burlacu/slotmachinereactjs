{"ast":null,"code":"var _jsxFileName = \"F:\\\\Games\\\\slotmachinereact\\\\src\\\\components\\\\Withdrawal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport '../assets/css/App.css';\nimport { ethers } from \"ethers\";\nimport PFPRacerNFT from '../artifacts/contracts/PFPRacerNFT.sol/PFPRacerNFT.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Withdrawal = props => {\n  _s();\n\n  const [rolling, setRolling] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [account, setAccount] = useState(\"\");\n  const [contract, setContract] = useState(\"\");\n  let refCode = \"\";\n  let smartKey = \"\";\n\n  const createSmartKey = async refCode => {\n    await fetch('http://localhost:8000/secrets').then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n    }).then(jsonResponse => smartKey = jsonResponse);\n    console.log(\"smartkey = \" + smartKey);\n    console.log(\"smartKey + refCode = \" + smartKey + refCode);\n  };\n\n  const initConnection = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const newSigner = provider.getSigner();\n      setAccount(accounts[0]);\n      setContract(new ethers.Contract(\"0xE0059D8C4242BDf03c9ca37E0e651c07b1b9d587\", PFPRacerNFT.abi, newSigner));\n    } else {\n      console.log(\"Please install metamask\");\n    }\n  };\n\n  const getNFTBalance = async () => {\n    let balance = await contract.getNFTBalance();\n    console.log(\"How many NFT's have been  minted ? \" + balance);\n    return balance;\n  };\n\n  const howManyNFTsAreLeft = async () => {\n    let totalNFT = await contract.maxSupply();\n    let mintedNFT = await getNFTBalance();\n    let nftLeftToMint = totalNFT - mintedNFT;\n    console.log(\"Total NFT's left to mint \" + nftLeftToMint);\n  };\n\n  useEffect(() => {\n    initConnection();\n  }, [account]);\n\n  const makeWithdrawal = async refCode => {\n    let score = Math.floor(props.getScoreCallback());\n    console.log(\"My score in makeWithdrawal is \" + score);\n\n    if (score > 0) {\n      window.confirm(\"Please be aware: if you have 1.2 or 20.2 NFT's you will be able to withdrawal only the integer part like 1 or 2.\"); //await contract.withdrawal(refCode);\n\n      console.log(\"This is the withdrawal function !!!\");\n      await contract.withdrawal(score, refCode);\n      let myScr = props.getScoreCallback() - score;\n      console.log(\"My score is \" + myScr); //props.callbackSetScore(myScr);\n\n      props.setScoreCallBack(myScr);\n    }\n  };\n\n  const withdrawal = () => {\n    console.log(\"My withdrawal is: \" + props.blockWithdraw);\n\n    if (!props.blockWithdraw) {\n      let score = Math.floor(props.getScoreCallback());\n      console.log(\"Withdrawal has been activated\");\n      console.log(\"My account is: \" + account);\n      howManyNFTsAreLeft();\n\n      if (score > 0) {\n        refCode = prompt(\"Please enter your refCode:\", \"RefCode\");\n\n        if (refCode == null || refCode == \"\" || refCode !== \"RACECOUPLE2022\") {\n          let text = \"Withdrawal has been canceled !!! You have the option to buy the NFT's\";\n          window.confirm(text);\n        } else {\n          createSmartKey(refCode); //  makeWithdrawal(refCode);\n        }\n      } else {\n        window.confirm(\"You need to have at least 1 NFT to withdrawal\");\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: withdrawal ? \"roll rolling\" : \"roll\",\n    onClick: () => {\n      withdrawal();\n    },\n    children: \"Withdrawal\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Withdrawal, \"YMWh4SPmI+fS85XywQLQRJu3nhQ=\");\n\n_c = Withdrawal;\nexport default Withdrawal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Withdrawal\");","map":{"version":3,"names":["React","useEffect","useState","useRef","ethers","PFPRacerNFT","Withdrawal","props","rolling","setRolling","name","setName","account","setAccount","contract","setContract","refCode","smartKey","createSmartKey","fetch","then","res","ok","json","jsonResponse","console","log","initConnection","window","ethereum","accounts","request","method","provider","providers","Web3Provider","newSigner","getSigner","Contract","abi","getNFTBalance","balance","howManyNFTsAreLeft","totalNFT","maxSupply","mintedNFT","nftLeftToMint","makeWithdrawal","score","Math","floor","getScoreCallback","confirm","withdrawal","myScr","setScoreCallBack","blockWithdraw","prompt","text"],"sources":["F:/Games/slotmachinereact/src/components/Withdrawal.js"],"sourcesContent":["import  React, { useEffect, useState, useRef } from \"react\";\r\nimport '../assets/css/App.css';\r\nimport {ethers} from \"ethers\";\r\nimport PFPRacerNFT from '../artifacts/contracts/PFPRacerNFT.sol/PFPRacerNFT.json'\r\n \r\nconst Withdrawal=(props)=>{\r\n    const [rolling, setRolling] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [account, setAccount] = useState(\"\");\r\n    const [contract, setContract] = useState(\"\");\r\n    let refCode =\"\";\r\n    let smartKey = \"\";\r\n\r\n    const createSmartKey = async (refCode) =>{\r\n     await fetch('http://localhost:8000/secrets').then(res => {\r\n        if(res.ok){\r\n          return res.json()\r\n        }\r\n      }).then(jsonResponse =>(smartKey=jsonResponse ) )\r\n\r\n      console.log(\"smartkey = \"+smartKey);\r\n      console.log(\"smartKey + refCode = \"+smartKey+refCode);\r\n    }\r\n\r\n    const initConnection = async () =>{\r\n      if(typeof window.ethereum !== \"undefined\"){\r\n        const accounts = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const newSigner = provider.getSigner();\r\n        setAccount(accounts[0]);\r\n        setContract(\r\n          new ethers.Contract(\r\n            \"0xE0059D8C4242BDf03c9ca37E0e651c07b1b9d587\",\r\n            PFPRacerNFT.abi,\r\n            newSigner\r\n          )\r\n        )\r\n      }else{\r\n        console.log(\"Please install metamask\");\r\n      }\r\n    }\r\n\r\n    const getNFTBalance = async () =>{\r\n      let balance = await contract.getNFTBalance();\r\n      console.log(\"How many NFT's have been  minted ? \"+balance );\r\n\r\n      return balance;\r\n    }\r\n\r\n    const howManyNFTsAreLeft = async () =>{\r\n      let totalNFT = await contract.maxSupply();\r\n      let mintedNFT= await getNFTBalance();\r\n      let nftLeftToMint = totalNFT -mintedNFT;\r\n\r\n      console.log(\"Total NFT's left to mint \"+nftLeftToMint);\r\n    }\r\n\r\n    useEffect(()=>{\r\n      initConnection();\r\n    },[account]);\r\n\r\n  const makeWithdrawal = async(refCode) => {\r\n    let score = Math.floor(props.getScoreCallback());\r\n    console.log(\"My score in makeWithdrawal is \"+score);\r\n     if(score > 0){\r\n    window.confirm(\"Please be aware: if you have 1.2 or 20.2 NFT's you will be able to withdrawal only the integer part like 1 or 2.\");\r\n    //await contract.withdrawal(refCode);\r\n    console.log(\"This is the withdrawal function !!!\");\r\n    \r\n    await contract.withdrawal(score,refCode);\r\n    \r\n    let myScr= props.getScoreCallback()-score;\r\n    console.log(\"My score is \"+myScr);\r\n    //props.callbackSetScore(myScr);\r\n    props.setScoreCallBack(myScr);\r\n    }\r\n  }\r\n    \r\n  const withdrawal = () => {\r\n    console.log(\"My withdrawal is: \"+props.blockWithdraw);\r\n    if(!props.blockWithdraw){\r\n    let score = Math.floor(props.getScoreCallback());\r\n        console.log(\"Withdrawal has been activated\");\r\n        console.log(\"My account is: \"+account);\r\n        howManyNFTsAreLeft();\r\n  if(score>0){\r\n    refCode = prompt(\"Please enter your refCode:\", \"RefCode\");\r\n    if (refCode == null || refCode == \"\" || refCode !== \"RACECOUPLE2022\") {\r\n      let text = \"Withdrawal has been canceled !!! You have the option to buy the NFT's\";\r\n      window.confirm(text)\r\n    } else {\r\n        createSmartKey(refCode);\r\n      //  makeWithdrawal(refCode);\r\n      }\r\n    \r\n  }else{\r\n    window.confirm(\"You need to have at least 1 NFT to withdrawal\");\r\n  }\r\n} \r\n};\r\n\r\n    return(\r\n    <div\r\n         className={withdrawal ? \"roll rolling\" : \"roll\"}\r\n         onClick={() => {withdrawal()}}\r\n    >Withdrawal</div>\r\n    )\r\n}\r\n\r\nexport default Withdrawal;"],"mappings":"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"},"metadata":{},"sourceType":"module"}