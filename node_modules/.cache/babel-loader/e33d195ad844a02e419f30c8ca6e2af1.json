{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\n\nvar _a = require('ethereum-cryptography/keccak'),\n    keccak224 = _a.keccak224,\n    keccak384 = _a.keccak384,\n    k256 = _a.keccak256,\n    keccak512 = _a.keccak512;\n\nvar createHash = require('create-hash');\n\nvar rlp = require(\"rlp\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsBuffer(a);\n\n  switch (bits) {\n    case 224:\n      {\n        return keccak224(a);\n      }\n\n    case 256:\n      {\n        return k256(a);\n      }\n\n    case 384:\n      {\n        return keccak384(a);\n      }\n\n    case 512:\n      {\n        return keccak512(a);\n      }\n\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\" + bits);\n      }\n  }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\n\n\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccakFromString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsString(a);\n  var buf = Buffer.from(a, 'utf8');\n  return exports.keccak(buf, bits);\n};\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccakFromHexString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsHexString(a);\n  return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccakFromArray = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsArray(a);\n  return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\n\n\nexports.sha256 = function (a) {\n  helpers_1.assertIsBuffer(a);\n  return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\n\n\nexports.sha256FromString = function (a) {\n  helpers_1.assertIsString(a);\n  return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\n\n\nexports.sha256FromArray = function (a) {\n  helpers_1.assertIsArray(a);\n  return _sha256(a);\n};\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\n\n\nvar _sha256 = function (a) {\n  a = bytes_1.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nexports.ripemd160 = function (a, padded) {\n  helpers_1.assertIsBuffer(a);\n  return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nexports.ripemd160FromString = function (a, padded) {\n  helpers_1.assertIsString(a);\n  return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nexports.ripemd160FromArray = function (a, padded) {\n  helpers_1.assertIsArray(a);\n  return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nvar _ripemd160 = function (a, padded) {\n  a = bytes_1.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n\n  if (padded === true) {\n    return bytes_1.setLengthLeft(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\n\n\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};","map":{"version":3,"mappings":"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","names":["require","keccak224","keccak384","k256","keccak512","createHash","exports","a","bits","helpers_1","Error","buf","Buffer","from","bytes_1","_sha256","update","digest","padded","_ripemd160","hash","rlp","encode"],"sources":["../src/hash.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}