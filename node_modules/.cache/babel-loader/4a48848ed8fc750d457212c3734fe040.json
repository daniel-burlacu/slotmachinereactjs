{"ast":null,"code":"var Receipt = require(\"../utils/receipt\");\n\nvar async = require(\"async\");\n\nfunction ReceiptSerializer(database) {\n  this.database = database;\n}\n\nReceiptSerializer.prototype.encode = function (receipt, done) {\n  done(null, receipt.toJSON());\n};\n\nReceiptSerializer.prototype.decode = function (json, done) {\n  var self = this; // Make sure we can handle mixed/upper-case transaction hashes\n  // it doesn't seem possible to record a transaction hash that isn't\n  // already lower case, as that's the way ganache generates them, however\n  // I don't think it will hurt anything to normalize here anyway.\n  // If you can figure out how to test this please feel free to add a test!\n\n  var txHash = json.transactionHash.toLowerCase();\n  this.database.transactions.get(json.transactionHash, function (err, tx) {\n    if (err) {\n      return done(err);\n    }\n\n    self.database.blockHashes.get(json.blockHash, function (err, blockIndex) {\n      if (err) {\n        return done(err);\n      }\n\n      async.parallel({\n        block: self.database.blocks.get.bind(self.database.blocks, blockIndex),\n        logs: self.database.blockLogs.get.bind(self.database.blockLogs, blockIndex)\n      }, function (err, result) {\n        if (err) {\n          return done(err);\n        }\n\n        done(null, new Receipt(tx, result.block, result.logs.filter(log => log.transactionHash.toLowerCase() === txHash), json.gasUsed, json.cumulativeGasUsed, json.contractAddress, json.status, json.logsBloom));\n      });\n    });\n  });\n};\n\nmodule.exports = ReceiptSerializer;","map":{"version":3,"names":["Receipt","require","async","ReceiptSerializer","database","prototype","encode","receipt","done","toJSON","decode","json","self","txHash","transactionHash","toLowerCase","transactions","get","err","tx","blockHashes","blockHash","blockIndex","parallel","block","blocks","bind","logs","blockLogs","result","filter","log","gasUsed","cumulativeGasUsed","contractAddress","status","logsBloom","module","exports"],"sources":["F:/Games/slotmachinereact/node_modules/ganache-core/lib/database/receiptserializer.js"],"sourcesContent":["var Receipt = require(\"../utils/receipt\");\nvar async = require(\"async\");\n\nfunction ReceiptSerializer(database) {\n  this.database = database;\n}\n\nReceiptSerializer.prototype.encode = function(receipt, done) {\n  done(null, receipt.toJSON());\n};\n\nReceiptSerializer.prototype.decode = function(json, done) {\n  var self = this;\n  // Make sure we can handle mixed/upper-case transaction hashes\n  // it doesn't seem possible to record a transaction hash that isn't\n  // already lower case, as that's the way ganache generates them, however\n  // I don't think it will hurt anything to normalize here anyway.\n  // If you can figure out how to test this please feel free to add a test!\n  var txHash = json.transactionHash.toLowerCase();\n\n  this.database.transactions.get(json.transactionHash, function(err, tx) {\n    if (err) {\n      return done(err);\n    }\n\n    self.database.blockHashes.get(json.blockHash, function(err, blockIndex) {\n      if (err) {\n        return done(err);\n      }\n\n      async.parallel(\n        {\n          block: self.database.blocks.get.bind(self.database.blocks, blockIndex),\n          logs: self.database.blockLogs.get.bind(self.database.blockLogs, blockIndex)\n        },\n        function(err, result) {\n          if (err) {\n            return done(err);\n          }\n\n          done(\n            null,\n            new Receipt(\n              tx,\n              result.block,\n              result.logs.filter((log) => log.transactionHash.toLowerCase() === txHash),\n              json.gasUsed,\n              json.cumulativeGasUsed,\n              json.contractAddress,\n              json.status,\n              json.logsBloom\n            )\n          );\n        }\n      );\n    });\n  });\n};\n\nmodule.exports = ReceiptSerializer;\n"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAArB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AAEA,SAASE,iBAAT,CAA2BC,QAA3B,EAAqC;EACnC,KAAKA,QAAL,GAAgBA,QAAhB;AACD;;AAEDD,iBAAiB,CAACE,SAAlB,CAA4BC,MAA5B,GAAqC,UAASC,OAAT,EAAkBC,IAAlB,EAAwB;EAC3DA,IAAI,CAAC,IAAD,EAAOD,OAAO,CAACE,MAAR,EAAP,CAAJ;AACD,CAFD;;AAIAN,iBAAiB,CAACE,SAAlB,CAA4BK,MAA5B,GAAqC,UAASC,IAAT,EAAeH,IAAf,EAAqB;EACxD,IAAII,IAAI,GAAG,IAAX,CADwD,CAExD;EACA;EACA;EACA;EACA;;EACA,IAAIC,MAAM,GAAGF,IAAI,CAACG,eAAL,CAAqBC,WAArB,EAAb;EAEA,KAAKX,QAAL,CAAcY,YAAd,CAA2BC,GAA3B,CAA+BN,IAAI,CAACG,eAApC,EAAqD,UAASI,GAAT,EAAcC,EAAd,EAAkB;IACrE,IAAID,GAAJ,EAAS;MACP,OAAOV,IAAI,CAACU,GAAD,CAAX;IACD;;IAEDN,IAAI,CAACR,QAAL,CAAcgB,WAAd,CAA0BH,GAA1B,CAA8BN,IAAI,CAACU,SAAnC,EAA8C,UAASH,GAAT,EAAcI,UAAd,EAA0B;MACtE,IAAIJ,GAAJ,EAAS;QACP,OAAOV,IAAI,CAACU,GAAD,CAAX;MACD;;MAEDhB,KAAK,CAACqB,QAAN,CACE;QACEC,KAAK,EAAEZ,IAAI,CAACR,QAAL,CAAcqB,MAAd,CAAqBR,GAArB,CAAyBS,IAAzB,CAA8Bd,IAAI,CAACR,QAAL,CAAcqB,MAA5C,EAAoDH,UAApD,CADT;QAEEK,IAAI,EAAEf,IAAI,CAACR,QAAL,CAAcwB,SAAd,CAAwBX,GAAxB,CAA4BS,IAA5B,CAAiCd,IAAI,CAACR,QAAL,CAAcwB,SAA/C,EAA0DN,UAA1D;MAFR,CADF,EAKE,UAASJ,GAAT,EAAcW,MAAd,EAAsB;QACpB,IAAIX,GAAJ,EAAS;UACP,OAAOV,IAAI,CAACU,GAAD,CAAX;QACD;;QAEDV,IAAI,CACF,IADE,EAEF,IAAIR,OAAJ,CACEmB,EADF,EAEEU,MAAM,CAACL,KAFT,EAGEK,MAAM,CAACF,IAAP,CAAYG,MAAZ,CAAoBC,GAAD,IAASA,GAAG,CAACjB,eAAJ,CAAoBC,WAApB,OAAsCF,MAAlE,CAHF,EAIEF,IAAI,CAACqB,OAJP,EAKErB,IAAI,CAACsB,iBALP,EAMEtB,IAAI,CAACuB,eANP,EAOEvB,IAAI,CAACwB,MAPP,EAQExB,IAAI,CAACyB,SARP,CAFE,CAAJ;MAaD,CAvBH;IAyBD,CA9BD;EA+BD,CApCD;AAqCD,CA9CD;;AAgDAC,MAAM,CAACC,OAAP,GAAiBnC,iBAAjB"},"metadata":{},"sourceType":"script"}