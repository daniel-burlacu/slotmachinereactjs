{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDomainInfo = exports.deployContract = exports.COIN_TYPE_ETH = void 0;\n\nconst ethers_1 = require(\"ethers\");\n\nconst errors_1 = require(\"./errors\");\n\nconst {\n  namehash\n} = ethers_1.utils;\nexports.COIN_TYPE_ETH = 60;\n\nconst deployContract = async (signer, contractJSON, args) => {\n  const factory = new ethers_1.ContractFactory(contractJSON.abi, contractJSON.bytecode, signer);\n  return factory.deploy(...args);\n};\n\nexports.deployContract = deployContract;\n\nconst getDomainInfo = domain => {\n  const chunks = domain.split('.');\n  const isTopLevelDomain = chunks.length === 1 && chunks[0].length > 0;\n  const isEmptyDomain = domain === '';\n\n  if (isTopLevelDomain) {\n    throw new errors_1.ExpectedTopLevelDomain();\n  } else if (isEmptyDomain) {\n    throw new errors_1.InvalidDomain(domain);\n  }\n\n  try {\n    namehash(domain);\n  } catch (e) {\n    throw new errors_1.InvalidDomain(domain);\n  }\n\n  return {\n    chunks,\n    tld: chunks[chunks.length - 1],\n    rawLabel: chunks[0],\n    label: ethers_1.utils.id(chunks[0]),\n    node: namehash(domain),\n    rootNode: namehash(domain.replace(chunks[0] + '.', '')),\n    decodedRootNode: domain.replace(chunks[0] + '.', '')\n  };\n};\n\nexports.getDomainInfo = getDomainInfo;","map":{"version":3,"names":["Object","defineProperty","exports","value","getDomainInfo","deployContract","COIN_TYPE_ETH","ethers_1","require","errors_1","namehash","utils","signer","contractJSON","args","factory","ContractFactory","abi","bytecode","deploy","domain","chunks","split","isTopLevelDomain","length","isEmptyDomain","ExpectedTopLevelDomain","InvalidDomain","e","tld","rawLabel","label","id","node","rootNode","replace","decodedRootNode"],"sources":["F:/Games/slotmachinereact/node_modules/@ethereum-waffle/ens/dist/cjs/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDomainInfo = exports.deployContract = exports.COIN_TYPE_ETH = void 0;\nconst ethers_1 = require(\"ethers\");\nconst errors_1 = require(\"./errors\");\nconst { namehash } = ethers_1.utils;\nexports.COIN_TYPE_ETH = 60;\nconst deployContract = async (signer, contractJSON, args) => {\n    const factory = new ethers_1.ContractFactory(contractJSON.abi, contractJSON.bytecode, signer);\n    return factory.deploy(...args);\n};\nexports.deployContract = deployContract;\nconst getDomainInfo = (domain) => {\n    const chunks = domain.split('.');\n    const isTopLevelDomain = (chunks.length === 1 && chunks[0].length > 0);\n    const isEmptyDomain = (domain === '');\n    if (isTopLevelDomain) {\n        throw new errors_1.ExpectedTopLevelDomain();\n    }\n    else if (isEmptyDomain) {\n        throw new errors_1.InvalidDomain(domain);\n    }\n    try {\n        namehash(domain);\n    }\n    catch (e) {\n        throw new errors_1.InvalidDomain(domain);\n    }\n    return {\n        chunks,\n        tld: chunks[chunks.length - 1],\n        rawLabel: chunks[0],\n        label: ethers_1.utils.id(chunks[0]),\n        node: namehash(domain),\n        rootNode: namehash(domain.replace(chunks[0] + '.', '')),\n        decodedRootNode: domain.replace(chunks[0] + '.', '')\n    };\n};\nexports.getDomainInfo = getDomainInfo;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwBF,OAAO,CAACG,cAAR,GAAyBH,OAAO,CAACI,aAAR,GAAwB,KAAK,CAA9E;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAM;EAAEE;AAAF,IAAeH,QAAQ,CAACI,KAA9B;AACAT,OAAO,CAACI,aAAR,GAAwB,EAAxB;;AACA,MAAMD,cAAc,GAAG,OAAOO,MAAP,EAAeC,YAAf,EAA6BC,IAA7B,KAAsC;EACzD,MAAMC,OAAO,GAAG,IAAIR,QAAQ,CAACS,eAAb,CAA6BH,YAAY,CAACI,GAA1C,EAA+CJ,YAAY,CAACK,QAA5D,EAAsEN,MAAtE,CAAhB;EACA,OAAOG,OAAO,CAACI,MAAR,CAAe,GAAGL,IAAlB,CAAP;AACH,CAHD;;AAIAZ,OAAO,CAACG,cAAR,GAAyBA,cAAzB;;AACA,MAAMD,aAAa,GAAIgB,MAAD,IAAY;EAC9B,MAAMC,MAAM,GAAGD,MAAM,CAACE,KAAP,CAAa,GAAb,CAAf;EACA,MAAMC,gBAAgB,GAAIF,MAAM,CAACG,MAAP,KAAkB,CAAlB,IAAuBH,MAAM,CAAC,CAAD,CAAN,CAAUG,MAAV,GAAmB,CAApE;EACA,MAAMC,aAAa,GAAIL,MAAM,KAAK,EAAlC;;EACA,IAAIG,gBAAJ,EAAsB;IAClB,MAAM,IAAId,QAAQ,CAACiB,sBAAb,EAAN;EACH,CAFD,MAGK,IAAID,aAAJ,EAAmB;IACpB,MAAM,IAAIhB,QAAQ,CAACkB,aAAb,CAA2BP,MAA3B,CAAN;EACH;;EACD,IAAI;IACAV,QAAQ,CAACU,MAAD,CAAR;EACH,CAFD,CAGA,OAAOQ,CAAP,EAAU;IACN,MAAM,IAAInB,QAAQ,CAACkB,aAAb,CAA2BP,MAA3B,CAAN;EACH;;EACD,OAAO;IACHC,MADG;IAEHQ,GAAG,EAAER,MAAM,CAACA,MAAM,CAACG,MAAP,GAAgB,CAAjB,CAFR;IAGHM,QAAQ,EAAET,MAAM,CAAC,CAAD,CAHb;IAIHU,KAAK,EAAExB,QAAQ,CAACI,KAAT,CAAeqB,EAAf,CAAkBX,MAAM,CAAC,CAAD,CAAxB,CAJJ;IAKHY,IAAI,EAAEvB,QAAQ,CAACU,MAAD,CALX;IAMHc,QAAQ,EAAExB,QAAQ,CAACU,MAAM,CAACe,OAAP,CAAed,MAAM,CAAC,CAAD,CAAN,GAAY,GAA3B,EAAgC,EAAhC,CAAD,CANf;IAOHe,eAAe,EAAEhB,MAAM,CAACe,OAAP,CAAed,MAAM,CAAC,CAAD,CAAN,GAAY,GAA3B,EAAgC,EAAhC;EAPd,CAAP;AASH,CAzBD;;AA0BAnB,OAAO,CAACE,aAAR,GAAwBA,aAAxB"},"metadata":{},"sourceType":"script"}