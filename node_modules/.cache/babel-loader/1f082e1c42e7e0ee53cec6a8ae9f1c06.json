{"ast":null,"code":"const http = require(\"http\");\n\nconst {\n  rpcError\n} = require(\"./utils/to\");\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction createCORSResponseHeaders(method, requestHeaders) {\n  // https://fetch.spec.whatwg.org/#http-requests\n  const headers = {};\n  const isCORSRequest = hasOwnProperty.call(requestHeaders, \"origin\");\n\n  if (isCORSRequest) {\n    // OPTIONS preflight requests need a little extra treatment\n    if (method === \"OPTIONS\") {\n      // we only allow POST requests, so it doesn't matter which method the request is asking for\n      headers[\"Access-Control-Allow-Methods\"] = \"POST\"; // echo all requested access-control-request-headers back to the response\n\n      if (hasOwnProperty.call(requestHeaders, \"access-control-request-headers\")) {\n        headers[\"Access-Control-Allow-Headers\"] = requestHeaders[\"access-control-request-headers\"];\n      } // Safari needs Content-Length = 0 for a 204 response otherwise it hangs forever\n      // https://github.com/expressjs/cors/pull/121#issue-130260174\n\n\n      headers[\"Content-Length\"] = 0; // Make browsers and compliant clients cache the OPTIONS preflight response for 10\n      // minutes (this is the maximum time Chromium allows)\n\n      headers[\"Access-Control-Max-Age\"] = 600; // seconds\n    } // From the spec: https://fetch.spec.whatwg.org/#http-responses\n    // \"For a CORS-preflight request, request’s credentials mode is always \"omit\",\n    // but for any subsequent CORS requests it might not be. Support therefore\n    // needs to be indicated as part of the HTTP response to the CORS-preflight request as well.\", so this\n    // header is added to all requests.\n    // Additionally, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials,\n    // states that there aren't any HTTP Request headers that indicate you whether or not Request.withCredentials\n    // is set. Because web3@1.0.0-beta.35-? always sets `request.withCredentials = true` while Safari requires it be\n    // returned even when no credentials are set in the browser this header must always be return on all requests.\n    // (I've found that Chrome and Firefox don't actually require the header when credentials aren't set)\n    //  Regression Commit: https://github.com/ethereum/web3.js/pull/1722\n    //  Open Web3 Issue: https://github.com/ethereum/web3.js/issues/1802\n\n\n    headers[\"Access-Control-Allow-Credentials\"] = true; // From the spec: \"It cannot be reliably identified as participating in the CORS protocol\n    // as the `Origin` header is also included for all requests whose method is neither\n    // `GET` nor `HEAD`.\"\n    // Explicitly set the origin instead of using *, since credentials\n    // can't be used in conjunction with *. This will always be set\n    /// for valid preflight requests.\n\n    headers[\"Access-Control-Allow-Origin\"] = requestHeaders.origin;\n  }\n\n  return headers;\n}\n\nfunction sendResponse(response, statusCode, headers, data) {\n  response.writeHead(statusCode, headers);\n  response.end(data);\n}\n\nmodule.exports = function (provider, logger) {\n  var server = http.createServer(function (request, response) {\n    var method = request.method;\n    var body = [];\n    request.on(\"data\", function (chunk) {\n      body.push(chunk);\n    }).on(\"end\", function () {\n      body = Buffer.concat(body).toString(); // At this point, we have the headers, method, url and body, and can now\n      // do whatever we need to in order to respond to this request.\n\n      const headers = createCORSResponseHeaders(method, request.headers);\n\n      switch (method) {\n        case \"POST\":\n          var payload;\n\n          try {\n            payload = JSON.parse(body);\n          } catch (e) {\n            headers[\"Content-Type\"] = \"text/plain\";\n            sendResponse(response, 400, headers, \"400 Bad Request\");\n            return;\n          } // Log messages that come into the TestRPC via http\n\n\n          if (payload instanceof Array) {\n            // Batch request\n            for (var i = 0; i < payload.length; i++) {\n              var item = payload[i];\n              logger.log(item.method);\n            }\n          } else {\n            logger.log(payload.method);\n          } // http connections do not support subscriptions\n\n\n          if (payload.method === \"eth_subscribe\" || payload.method === \"eth_unsubscribe\") {\n            headers[\"Content-Type\"] = \"application/json\";\n            sendResponse(response, 400, headers, rpcError(payload.id, -32000, \"notifications not supported\"));\n            break;\n          }\n\n          provider.send(payload, function (_, result) {\n            headers[\"Content-Type\"] = \"application/json\";\n            sendResponse(response, 200, headers, JSON.stringify(result));\n          });\n          break;\n\n        case \"OPTIONS\":\n          sendResponse(response, 204, headers);\n          break;\n\n        default:\n          headers[\"Content-Type\"] = \"text/plain\";\n          sendResponse(response, 400, headers, \"400 Bad Request\");\n          break;\n      }\n    });\n  });\n  server.ganacheProvider = provider;\n  return server;\n};","map":{"version":3,"names":["http","require","rpcError","hasOwnProperty","Object","prototype","createCORSResponseHeaders","method","requestHeaders","headers","isCORSRequest","call","origin","sendResponse","response","statusCode","data","writeHead","end","module","exports","provider","logger","server","createServer","request","body","on","chunk","push","Buffer","concat","toString","payload","JSON","parse","e","Array","i","length","item","log","id","send","_","result","stringify","ganacheProvider"],"sources":["F:/Games/slotmachinereact/node_modules/ganache-core/lib/httpServer.js"],"sourcesContent":["const http = require(\"http\");\nconst { rpcError } = require(\"./utils/to\");\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction createCORSResponseHeaders(method, requestHeaders) {\n  // https://fetch.spec.whatwg.org/#http-requests\n  const headers = {};\n  const isCORSRequest = hasOwnProperty.call(requestHeaders, \"origin\");\n  if (isCORSRequest) {\n    // OPTIONS preflight requests need a little extra treatment\n    if (method === \"OPTIONS\") {\n      // we only allow POST requests, so it doesn't matter which method the request is asking for\n      headers[\"Access-Control-Allow-Methods\"] = \"POST\";\n      // echo all requested access-control-request-headers back to the response\n      if (hasOwnProperty.call(requestHeaders, \"access-control-request-headers\")) {\n        headers[\"Access-Control-Allow-Headers\"] = requestHeaders[\"access-control-request-headers\"];\n      }\n      // Safari needs Content-Length = 0 for a 204 response otherwise it hangs forever\n      // https://github.com/expressjs/cors/pull/121#issue-130260174\n      headers[\"Content-Length\"] = 0;\n\n      // Make browsers and compliant clients cache the OPTIONS preflight response for 10\n      // minutes (this is the maximum time Chromium allows)\n      headers[\"Access-Control-Max-Age\"] = 600; // seconds\n    }\n\n    // From the spec: https://fetch.spec.whatwg.org/#http-responses\n    // \"For a CORS-preflight request, request’s credentials mode is always \"omit\",\n    // but for any subsequent CORS requests it might not be. Support therefore\n    // needs to be indicated as part of the HTTP response to the CORS-preflight request as well.\", so this\n    // header is added to all requests.\n    // Additionally, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials,\n    // states that there aren't any HTTP Request headers that indicate you whether or not Request.withCredentials\n    // is set. Because web3@1.0.0-beta.35-? always sets `request.withCredentials = true` while Safari requires it be\n    // returned even when no credentials are set in the browser this header must always be return on all requests.\n    // (I've found that Chrome and Firefox don't actually require the header when credentials aren't set)\n    //  Regression Commit: https://github.com/ethereum/web3.js/pull/1722\n    //  Open Web3 Issue: https://github.com/ethereum/web3.js/issues/1802\n    headers[\"Access-Control-Allow-Credentials\"] = true;\n\n    // From the spec: \"It cannot be reliably identified as participating in the CORS protocol\n    // as the `Origin` header is also included for all requests whose method is neither\n    // `GET` nor `HEAD`.\"\n    // Explicitly set the origin instead of using *, since credentials\n    // can't be used in conjunction with *. This will always be set\n    /// for valid preflight requests.\n    headers[\"Access-Control-Allow-Origin\"] = requestHeaders.origin;\n  }\n  return headers;\n}\n\nfunction sendResponse(response, statusCode, headers, data) {\n  response.writeHead(statusCode, headers);\n  response.end(data);\n}\n\nmodule.exports = function(provider, logger) {\n  var server = http.createServer(function(request, response) {\n    var method = request.method;\n    var body = [];\n\n    request\n      .on(\"data\", function(chunk) {\n        body.push(chunk);\n      })\n      .on(\"end\", function() {\n        body = Buffer.concat(body).toString();\n        // At this point, we have the headers, method, url and body, and can now\n        // do whatever we need to in order to respond to this request.\n\n        const headers = createCORSResponseHeaders(method, request.headers);\n\n        switch (method) {\n          case \"POST\":\n            var payload;\n            try {\n              payload = JSON.parse(body);\n            } catch (e) {\n              headers[\"Content-Type\"] = \"text/plain\";\n              sendResponse(response, 400, headers, \"400 Bad Request\");\n              return;\n            }\n\n            // Log messages that come into the TestRPC via http\n            if (payload instanceof Array) {\n              // Batch request\n              for (var i = 0; i < payload.length; i++) {\n                var item = payload[i];\n                logger.log(item.method);\n              }\n            } else {\n              logger.log(payload.method);\n            }\n\n            // http connections do not support subscriptions\n            if (payload.method === \"eth_subscribe\" || payload.method === \"eth_unsubscribe\") {\n              headers[\"Content-Type\"] = \"application/json\";\n              sendResponse(response, 400, headers, rpcError(payload.id, -32000, \"notifications not supported\"));\n              break;\n            }\n\n            provider.send(payload, function(_, result) {\n              headers[\"Content-Type\"] = \"application/json\";\n              sendResponse(response, 200, headers, JSON.stringify(result));\n            });\n\n            break;\n          case \"OPTIONS\":\n            sendResponse(response, 204, headers);\n            break;\n          default:\n            headers[\"Content-Type\"] = \"text/plain\";\n            sendResponse(response, 400, headers, \"400 Bad Request\");\n            break;\n        }\n      });\n  });\n\n  server.ganacheProvider = provider;\n  return server;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}